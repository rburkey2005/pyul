* 1800A JOB 55-238-50  YUL SYSTEM
*       YUL
Y  YUL  ADD NEW COMPUTER AGC4
Y  YUL  ASSEMBLY PASS 1 FOR AGC4 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 2 FOR AGC4 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 3 FOR AGC4 IS AVAILABLE
Y  YUL  ASSEMBLE NEW AGC4 PROGRAM SOLRUM55 BY NASA 1021108-021
L 001   ASSEMBLY AND OPERATION INFORMATION
R0001  2TABLE OF LOG CARDS              (ALL LOG CARDS ARE TWO SPACED)
R0002   ASSEMBLY AND OPERATION INFORMATION
R0003   ERASABLE ASSIGNMENTS
R0004   INTERRUPT TRANSFER ROUTINES
R0005   FIXED-FIXED INTERPRETER SECTION
R0006   BANK 03 INTERPRETER SECTION
R0007   EXECUTIVE
R0008   WAITLIST
R0009   RESTART CONTROL
R0010   501 RESTART TABLES AND ROUTINES
R0011   FRESH START AND RESTART
R0012   DOWN-TELEMETRY PROGRAM
R0013   T4RUPT OUTPUT CONTROL PROGRAMS
R0014   MODE SWITCHING AND MARK ROUTINES
R0015   IMU COMPENSATION PACKAGE
R0016   IRIG PULSE-TORQUING ROUTINES
R0017   EXTENDED VERBS FOR MODING
R0018   AGC SELF-CHECK
R0019   INTER-BANK COMMUNICATION
R0020   ALARM AND DISPLAY PROCEDURES
R0021   ORBITAL INTEGRATION PROGRAM
R0025   ORBITAL INTEGRATION FOR 501
R0028   PRELAUNCH ALIGNMENT PROGRAM
R0029   INFLIGHT ALIGNMENT PROGRAM
R0030   RTB OP CODES
R0031   IMU PERFORMANCE TESTS 1
R0032   IMU PERFORMANCE TESTS 2
R0033   INFLIGHT ALIGNMENT SUBROUTINES
R0034   KEYRUPT, UPRUPT, FRESH START
R0035   PINBALL GAME  BUTTONS AND LIGHTS
R0036   501 MISSION CONTROL PROGRAM
R0037   POWERED FLIGHT SUBROUTINES
R00375  TIME OF FREE-FALL CALCULATIONS
R0038   DUMMY 501 INITIALISATION
R0039   RE-ENTRY CONTROL
R0040   AVERAGE G INTEGRATOR
R0041   VERIFICATION ASSISTANCE PROGRAMS
R0042   SUM-CHECK END OF RECORD MARKS
P0043  3TABLE OF ERROR CODES
R0044  2OPTICS SUB-SYSTEM
R0045   00101    ZERO CDU SWITCH ALTERED BEFORE EXPIRATION OF 30 SECOND WAIT
R0046   00102    COMPUTER UNABLE TO ACHIEVE DESIRED OPTICS MODE
R0047   00103    SXT-ON SWITCH TURNED ON WITH OPTICS NOT IN ZERO CDU MODE
R0048   00104    NO VAC AREA AVAILABLE FOR MARKS
R0049   00105    INTERNAL MARKS REQUEST WITH MARK SYSTEM BUSY
R0050   00106    SXT-ON SWITCH NOT IN DESIRED STATE AT MARK TIME OR MARK WITH AL
 0051  9L REQUESTED MARKS ACCEPTED
R0052   00107    MARK ACCEPT WITH MARK SYSTEM NOT IN USE
R0053   00110    MARK ACCEPT WITH ALL REQUESTED MARKS ACCEPTED, OR NO MARKS SINC
 0054  9E INITIALIZATION OR LAST MARK ACCEPT
R0055  2IMU SUB-SYSTEM
R0056   00201    CDU ZERO SWITCH ALTERED BEFORE EXPIRATION OF 30 SECOND WAIT
R0057   00202    COMPUTER UNABLE TO ACHIEVE DESIRED MODE
R0058   00203    NO IMU MODE INDICATED TO COMPUTER
R0059   00204    MODE SWITCH WITH TRNSW IN COMPUTER CONTROL, BUT COMPUTER NOT CO
 0060  9MMANDING
R0061  2GENERAL MISSION PROGRAM ERRORS (ERROR RETURN ON IMUSTALL, ETC.)
R0062   00301    CURTAINS PROGRAM
R0063  2PROCEDURAL DIFFICULTY
R0064   00401    DESIRED GIMBAL ANGLES YIELD GIMBAL LOCK (MGA GREATER THAN 60 DE
 0065  9GREES).
R0066   00402    STAR OUT OF FIELD OF VIEW
R0067   00403    STAR OUT OF FIELD OF VIEW
R0068  2COMPUTER HARDWARE MALFUNCTIONS
R0069   01101    RUPT2 OCCURRED
R0070   01102    AGC SELF TEST ERROR (Q IN SFAIL)
R0071   01103    UNUSED CCS BRANCH EXECUTED
R0072   01104    C-RELAY FAILED DURING C-RELAY TEST
R0073  2LIST OVERFLOWS (ALL ABORTS)
R0074   01201    EXECUTIVE OVERFLOW - NO VAC AREAS
R0075   01202    EXECUTIVE OVERFLOW - NO CORE SETS
R0076   01203    WAITLIST OVERFLOW - TOO MANY TASKS
R0077   01204    SLIGHT VARIATION OF 01203
R0078   01205    MASTER CONTROL OVERFLOW - TOO MANY JOBS WAITING
R0079   01206    KEYBOARD + DISPLAY WAITING LINE OVERFLOW
R0080   01207    NO VAC AREA FOR MARKS
R0081   01210    SOMETHING ALREADY WAITING IN IMUSTALL
R0082  2INTERPRETER ERRORS
R0083   01301    ARCCOS-ARCSIN INPUT ANGLE TOO LARGE
R0084   01302    SQRT CALLED WITH NEGATIVE ARGUMENT
R0085  2DISPLAY ALARMS
R0086   01401    (VG) INCREASING - LOSS OF CONTROL
R0087   01402    (DELV) TOO LOW - ENGINE NOT ON
R00871  01403    501 ABORT. WILL OVERSHOOT TARGET.
R00872  01404    501 ABORT. PRESENT SMA LESS THAN RE/2
R00873  01405    501 ABORT. COT SQ(GAMMA E) NEGATIVE.
R00874  01406    501 ABORT. FREE-FALL ANGLE EXEEDS ---
R00875  01407    COMMANDED CDUZ EXCEEDS 60 DEGREES
R00876 201411    TIME TO INCORPORATE AVE G UPDATE ALREADY PAST
R0088  2KEYBOARD AND DISPLAY PROGRAM
R0089   01501    KEYBOARD AND DISPLAY ALARM DURING INTERNAL USE (NVSUB). ABORT
P0090  4VERB DEFINITIONS
R0091    REGULAR VERBS
R0092   01  DISPLAY OCTAL COMP 1 (R1)
R0093   02  DISPLAY OCTAL COMP 2 (R1)
R0094   03  DISPLAY OCTAL COMP 3 (R1)
R0095   04  DISPLAY OCTAL COMP 1,2 (R1,R2)
R0096   05  DISPLAY OCTAL COMP 1,2,3 (R1,R2,R3)
R0097   06  DECIMAL DISPLAY
R0098   07  DP DECIMAL DISPLAY (R1,R2)
R0099   10  REQUEST WAITLIST
R0100   11  MONITOR OCT COMP 1 (R1)
R0101   12  MONITOR OCT COMP 2 (R1)
R0102   13  MONITOR OCT COMP 3 (R1)
R0103   14  MONITOR OCT COMP 1,2 (R1)
R0104   15  MONITOR OCT COMP 1,2,3 (R1,R2,R3)
R0105   16  MONITOR DECIMAL
R0106   17  MONITOR DP DECIMAL (R1,R2)
R0107   20  REQUEST EXECUTIVE
R0108   21  LOAD COMP 1 (R1)
R0109   22  LOAD COMP 2 (R2)
R0110   23  LOAD COMP 3 (R3)
R0111   24  LOAD COMP 1,2 (R1,R2)
R0112   25  LOAD COMP 1,2,3 (R1,R2,R3)
R0113   26  SPARE
R0114   27  SPARE
R0115   30  SPARE
R0116   31  BANK DISPLAY
R0117   32  C(R2) INTO R3, C(R1) INTO R2
R0118   33  PROCEED WITHOUT DATA
R0119   34  TERMINATE CURRENT TEST OR LOAD REQUEST
R0120   35  RELEASE DISPLAY SYSTEM
R0121   36  FRESH START
R0122   37  CHANGE MAJOR MODE
R0123  4END OF REGULAR VERBS
R0124   EXTENDED VERBS
R0125   40  ZERO (USED WITH NOUN ICDU OR OCDU)
R0126   41  COARSE ALIGN (USED WITH NOUN ICDU OR OCDU)
R0127   42  FINE ALIGN IMU
R0128   43  LOCK IMU
R0129   44  SET IMU TO ATTITUDE CONTROL
R0130   45  SET IMU TO RE-ENTRY CONTROL
R0131   46  RETURN IMU TO COARSE ALIGN
R0132   47  OPTICAL TRACKER ON (NOT IN USE YET)
R0133   50  PLEASE PERFORM
R0134   51  PLEASE MARK
R0135   52  MARK REJECT (UNTIL BUTTON AVAILABLE)
R0136   53  FREE (USED WITH NOUN ICDU OR OCDU)
R0137   54  PULSE TORQUE GYROS
R0138   55  ALIGN TIME
R0139   56  PERFORM BANKSUM
R0140   57  DO SYSTEM TEST
R0141   60  PREPARE FOR STANDBY
R0142   61  RECOVER FROM STANDBY
R0143   62  ILLEGAL VERB
R0144   63  ILLEGAL VERB
R0145   64  ILLEGAL VERB
R0146   65  ILLEGAL VERB
R0147   66  ILLEGAL VERB
R0148   67  ILLEGAL VERB
R0149   70  ILLEGAL VERB
R0150   71  DO TFFMIN UPDATE
R0151   72  ABORT
R0152   73  ILLEGAL VERB
R0153   74  ILLEGAL VERB
R0154   75  MANUAL I/O FOR FLIGHTS
R0155   76  DO RVT UPDATE
R0156   77  DO L/O TIME UPDATE
P0157   NORMAL NOUNS                                       SCALE AND DECIMAL POI
 0158  9NT
R0159   00  NOT IN USE
R0160   01  SPECIFY MACHINE ADDRESS (FRACTIONAL)           (.XXXXX)
R0161   02  SPECIFY MACHINE ADDRESS (WHOLE)                (XXXXX.)
R0162   03  SPECIFY MACHINE ADDRESS (DEGREES)              (XXX.XXDEGREES)
R0163   04  SPECIFY MACHINE ADDRESS (HOURS)                (XXX.XXHOURS)
R0164   05  SPECIFY MACHINE ADDRESS (SECONDS)              (XXX.XXSECONDS)
R0165   06  SPECIFY MACHINE ADDRESS (GYRO DEGREES)         (XX.XXXDEGREES)
R0166   07  SPECIFY MACHINE ADDRESS (Y OPT DEGREES)        (XXX.XXDEG OR XX.XXXD
 0167  9EG)
R0168   10  SPARE
R0169   11  SPARE
R0170   12  SPARE
R0171   13  SPARE
R0172   14  SPARE
R0173   15  INCREMENT MACHINE ADDRESS                      (OCTAL ONLY)
R0174   16  TIME SECONDS                                   (XXX.XXSECONDS)
R0175   17  TIME HOURS                                     (XXX.XXHOURS)
R0176   20  ICDU                                           (XXX.XXDEGREES)
R0177   21  PIPAS                                          (XXXXX.PULSES)
R0178   22  NEW ANGLES I                                   (XXX.XXDEGREES)
R0179   23  DELTA ANGLES I                                 (XXX.XXDEGREES)
R0180   24  DELTA TIME (SECONDS)                           (XXX.XXSECONDS)
R0181   25  CHECKLIST                                      (XXXXX.)
R0182   26  PRIO/DELAY                                     (XXXXX.)
R0183   27  SELF TEST ON/OFF SWITCH                        (XXXXX.)
R0184   30  STAR NUMBERS                                   (XXXXX.)
R0185   31  FAILREG, SFAIL, ERCOUNT                        (OCTAL ONLY)
R0186   32  DECISION TIME (MIDCOURSE)                      (XXX.XXHOURS (INTERNA
 0187  9L UNITS = WEEKS))
R0188   33  EPHEMERIS TIME (MIDCOURSE)                     (XXX.XXHOURS (INTERNA
 0189  9L UNITS = WEEKS))
R0190   34  MEASURED QUANTITY (MIDCOURSE)                  (XXXX.XKILOMETERS)
R0191   35  ROLL, PITCH, YAW                               (XXX.XXDEGREES)
R0192   36  LANDMARK DATA 1                                (OCTAL ONLY)
R0193   37  LANDMARK DATA 2                                (OCTAL ONLY)
R0194   40  VG FOR 501                                     (XXXX.X METERS/SEC)
R0195   41  SPARE
R0196   42  SPARE
R0197   43  SPARE
R0198   44  SPARE
R0199   45  SPARE
R0200   46  SPARE
R0201   47  SPARE
R0202   50  SPARE
R0203   51  SPARE
R0204   52  GYRO BIAS DRIFT                                (.BBXXXXXMILLIRAD/SEC
 0205  9)
R0206   53  GYRO INPUT AXIS ACCELERATION DRIFT             (.BBXXXXX(MILLIRAD/SE
 0207  9C)/(CM/SEC SEC))
R0208   54  GYRO SPIN AXIS ACCELERATION DRIFT              (.BBXXXXX(MILLIRAD/SE
 0209  9C)/(CM/SEC SEC))
R0210  4END OF NORMAL NOUNS
R0211   MIXED NOUNS                                        SCALE AND DECIMAL POI
 0212  9NT
R0213   55  OCDU                                           (XXX.XXDEG, XXX.XXDEG
 0214  9 OR XX.XXXDEG)
R0215   56  UNCALLED MARK DATA (OCDU & TIME(SECONDS))      (XXX.XXDEG, XXX.XXDEG
 0216  9 OR XX.XXXDEG, XXX.XXSEC)
R0217   57  NEW ANGLES OCDU                                (XXX.XXDEG, XXX.XXDEG
R0218  9 OR XX.XXXDEG)
R0219   60  IMU MODE STATUS (IN3, WASKSET, OLDERR)         (OCTAL ONLY)
R0220   61  TARGET AZIMUTH AND ELEVATION                   (XXX.XXDEG, XX.XXXDEG
 0221  9)
R0222   62  RE-ENTRY VARIABLES                             (XXX.XXSEC, XXXXX., X
 0223  9XXXX.)
R0224   63  OCDUX AND TIME                                 (XXX.XXDEG, XXX.XXSEC
 0225  9)
R0226   64  OCDUY AND TIME                                 (XXX.XXDEG OR XX.XXXD
 0227  9EG, XXX.XXSEC)
R0228   65  SAMPLED TIME (HOURS AND SECONDS)               (XXX.XXHOURS, XXX.XXS
 0229  9EC)
R0230           (FETCHED IN INTERRUPT)
R0231   66  SYSTEM TEST RESULTS                            (XXXXX., .XXXXX, XXXX
 0232  9X.)
R0233   67  DELTA GYRO ANGLES                              (XX.XXXDEG  FOR EACH)
R0234   70  PIPA BIAS                                      (X.XXXXCM/SEC SEC  FO
 0235  9R EACH)
R0236   71  PIPA SCALE FACTOR ERROR                        (XXXXX.PARTS/MILLION
 0237  9 FOR EACH)
R0238   72  DELTA POSITION                                 (XXXX.XKILOMETERS  FO
 0239  9R EACH)
R0240   73  DELTA VELOCITY                                 (XXXX.XMETERS/SEC  FO
 0241  9R EACH)
R0242   74  MEASUREMENT DATA (MIDCOURSE)                   (XXX.XXHOURS (INTERNA
 0243  9L UNITS=WEEKS), XXXX.XKILOMETERS, XXXXX.
R0244   75  MEASUREMENT DEVIATIONS (MIDCOURSE)             (XXXX.XKILOMETERS, XX
 0245  9XX.XMETERS/SEC, XXXX.XKILOMETERS)
R0246   76  POSITION VECTOR                                (XXXX.XKILOMETERS  FO
 0247  9R EACH)
R0248   77  VELOCITY VECTOR                                (XXXX.XMETERS/SEC  FO
 0249  9R EACH)
P0250  4MAJOR MODES FOR FLIGHT 501
R0251  4         00     IDLING
R0252  2         0X     PRELAUNCH
R0253            01     INITIALIZATION
R0254            02     GYROCOMPASSING
R0255            03     OPTICAL VERIFICATION
R0256            04     INERTIAL REFERENCE
R02561           05     VERTICAL ERECT.  (COUNTING)
R02562 2         06     VERTICAL ERECT.  (UNCONDITIONAL)
R0257  4         07     SYSTEM TEST
R0258  2         1X     BOOSTER MONITOR
R0259  2         11     FIRST STAGE BOOSTER MONITORING
R0260  4         14     SIV-B BOOSTER MONITOR WITH TUMBLE MON. ON
R0261  2         2X     COASTING PHASE
R0262            21     MANEUVER TO COLDSOAK ATTITUDE
R0263            22     HOLD ATTITUDE DURING ORBITAL INTEGRATION
R0264            23     HOLD ATTITUDE
R0265  2         24     HOLD ATTITUDE WITH STATE VECTOR UPDATE ALLOWED.
R02655           26     HOLD SPS2 ATTITUDE AND WAIT FOR TFF = TFFMIN
R0266  4         27     R, V, T UPDATING
R0267  2         3X     PRE-THRUSTING PHASES
R0268            31     PRE-SPS1
R0269  4         32     PRE-SPS2
R0270  2         4X     THRUSTING PHASES
R0271            41     SPS1
R0272  4         42     SPS2
R0275  4         5X     ALIGNMENT
R0276  2         6X     ENTRY
R0277            61     CM/SM SEPARATION MANEUVER
R0278            62     PRE-ENTRY MANEUVER
R0279            63     INITIATE ENTRY STEERING
R0280            64     .05 G INDICATION
R0281            65     UP-CONTROL PHASE
R0282            66     BALLISTIC PHASE
R0283  4         67     FINAL PHASE
R0284  2         7X     ABORT PHASES
R0285            71     POST-TUMBLE ATTITUDE RECOVERY
R0286            72     FREE-FALL ENTRY ABORT
R0287            73     ABORT BURN
R0288  2         74     TUMBLE ARREST BURN
R0289            77     G+N FLUSHED
P0290  2JOB PRIORITIES FOR 501
R0291   PRIO37 = DOALARM
R0292   PRIO36 = NWJOB
R0293   PRIO35 = BIASONLY
R0294          = 1/GYRO
R0295          = ENEMA
R0296          = MODE32
R0297          = MODE26
R0298   PRIO33 = POSTBY3
R0299          = CHARIN
R0300   PRIO32 = MKVB50
R0301          = MKVB51
R0302          = REMKVB51
R0303   PRIO31 = SPITGYRO
R0304          = MONDO
R0305          = FREDSPDO
R0306   PRIO27 = SPITGYRO
R0307          = ENEMA
R0308          = S4BSMSEP
R0309   PRIO25 = ABORTEST
R0310          = REDO4.21
R0311          = BEGIN501
R0312   PRIO24 = LIFTOFF
R0313   PRIO23 = MANUJOB
R0314   PRIO22 = TUMBJOB1
R0315          = TUMBJOB
R0316   PRIO21 = CGJOB
R0317   PRIO20 = TOP1
R0318          = TSELECT
R0319          = PRAWAKE
R0320          = STARTPL2
R0321          = GYRDRFT2
R0322          = CDUXJOB
R0323   PRIO16 = SERVICER
R0324          = ENTRYTOP
R0325   PRIO15 = SMOOTHER
R0326   PRIO14 = CHKOPT
R0327          = UPTHETA1
R0328   PRIO13 = SOAKJOB
R0329   PRIO12 = TARGJOB
R0330          = SOAKINIT
R0331          = ATTIJOB
R0332          = ATTIJOB1 -1
R0333          = ATTIJOB2
R0334          = SEPMANU
R0335          = ENTAJOB
R0336   PRIO10 = ROLLJOB
R0337   PRIO7  = MODE23
R0338          = MODE44
R0339   PRIO6  = UPJOB
R03395  PRIO5  = MONITJOB
R0340          = MARKDISP
R0341   PRIO2  = FXFXCHK
L      2ERASABLE ASSIGNMENTS
R0001   COUNTER AND SPECIAL REGISTER TAGS
R0002  2------- --- ------- -------- ----
 0003   A        EQUALS 0
 0004   Q        EQUALS 1
 0005   Z        EQUALS 2
 0006   LP       EQUALS 3
 0007   IN0      EQUALS 4
 0008   IN1      EQUALS 5
 0009   IN2      EQUALS 6
 0010   IN3      EQUALS 7
 0011   OUT0     EQUALS 10
 0012   OUT1     EQUALS 11
 0013   OUT2     EQUALS 12
 0014   OUT4     EQUALS 14
 0015   BANKREG  EQUALS 15
 0016   RELINT   EQUALS 16
 0017   INHINT   EQUALS 17
 0018   CYR      EQUALS 20
 0019   SR       EQUALS 21
 0020   CYL      EQUALS 22
 0021   SL       EQUALS 23
 0022   ZRUPT    EQUALS 24
 0023   BRUPT    EQUALS 25
 0024   ARUPT    EQUALS 26
 0025  2QRUPT    EQUALS 27
 0026   BANKRUPT EQUALS 30
 0027   OVRUPT   EQUALS 31
 0028   LPRUPT   EQUALS 32
 0029  2DSRUPTSW EQUALS 33              T4RUPT PHASE COUNT GOES 7(-1)0
 0030   OVCTR    EQUALS 34
 0031   TIME2    EQUALS 35
 0032   TIME1    EQUALS 36
 0033   TIME3    EQUALS 37
 0034   TIME4    EQUALS 40
 0035   UPLINK   EQUALS 41
 0036   OUTCR1   EQUALS 42
 0037   OUTCR2   EQUALS 43
 0038   PIPAX    EQUALS 44
 0039   PIPAY    EQUALS 45
 0040   PIPAZ    EQUALS 46
 0041   CDUX     EQUALS 47
 0042   CDUY     EQUALS 50
 0043   CDUZ     EQUALS 51
 0044   OPTX     EQUALS 52
 0045   OPTY     EQUALS 53
P0046  2         INTERPRETIVE SPECIAL REGISTERS CONTAINED IN THE WORK AREA.
 0047   VAC      EQUALS 32D             RELATIVE TO FIXLOC
 0048   VACX     EQUALS VAC
 0049   VACY     EQUALS VAC  + 2
 0050   VACZ     EQUALS VAC  + 4
 0051   X1       EQUALS 38D             INDEXES ARE RELATIVE TO FIXLOC
 0052   X2       EQUALS 39D
 0053   S1       EQUALS 40D             AND SO ARE STEP REGISTERS
 0054   S2       EQUALS 41D
 0055  8QPRET    EQUALS 42D             AS IS QPRET
 0056  2         SETLOC 60
R0057            THE FOLLOWING REGISTERS ARE USED BY THE INTERPRETER, AND MAY BE
 0058  9 USED BY A BASIC JOB OR BASIC
R0059   PORTIONS OF AN INTERPRETIVE JOB (SOME RESTRICTIONS APPEAR WITH RTB FOLLO
 0060  9WED BY TC DANZIG, BUT THE NINE REGISTERS
R0061   VBUF AND BUF ARE AVAILABLE THEN). THE REGISTERS ARE NOT SAVED IN THEIR E
 0062  9NTIRETY DURING CHANGE JOB (MOST OF THEM
R0063  2ARE IGNORED), SO THAT THESE MUST BE USED ONLY AS TEMPORARIES BETWEEN ANY
 0064  9 CCS NEWJOBS.
 0065   NNADTEM  EQUALS 54              TEMP FOR NOUN ADDRESS TABLE ENTRY.
 0066   NNTYPTEM EQUALS 55              TEMP FOR NOUN TYPE TABLE ENTRY.
 0067   IDAD1TEM EQUALS 56              TEMP FOR INDIR ADRES TABLE ENTRY(MIXNN)
A0068                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
 0069   IDAD2TEM EQUALS 57              TEMP FOR INDIR ADRES TABLE ENTRY(MIXNN)
A0070                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
 0071   IDAD3TEM ERASE                  TEMP FOR INDIR ADRES TABLE ENTRY(MIXNN)
A0072  4                                MUST = IDAD1TEM+2, = IDAD2TEM+1.
 0073   BANKSET  ERASE                  STORAGE FOR BANK BITS OF OBJECT PROGRAM
 0074   ADDRWD   ERASE                  THIS WILL CONTAIN A PROPER 12 BIT ADDR
 0075   ORDER    ERASE                  STORAGE FOR RIGHT-HAND OPERATORS
 0076   UPDATRET =      ORDER           RETURN FOR UPDATNN, UPDATVB
 0077   CHAR     =      ORDER           TEMP FOR CHARIN
 0078   ERCNT    =      ORDER           COUNTER FOR ERROR LIGHT RESET
 0079   DECOUNT  =      ORDER           COUNTER FOR SCALING AND DISPLAY (DEC)
 0080   TEM11    ERASE
 0081   SGNON    =      TEM11           TEMP FOR +,- ON
 0082   NOUNTEM  =      TEM11           COUNTER FOR MIXNOUN FETCH
 0083   DISTEM   =      TEM11           COUNTER FOR OCTAL DISPLAY VERBS
 0084   DECTEM   =      TEM11           COUNTER FOR FETCH (DEC DISPLAY VERBS)
 0085   DECTEM1  =      TEM11           TEMP FOR NUM
 0086   MODE     ERASE                  DENOTES VECTOR, DP, OR TP.
 0087   ENTRET   =      MODE            EXIT FROM ENTER
 0088   LOADIND  ERASE                  LOAD INDICATOR
 0089   NEWEQIND EQUALS LOADIND
 0090   MONTEM   =      NEWEQIND        TEMP RETURN FOR MONITOR
 0091   FIXLOC   ERASE                  ADDRESS OF CURRENT VAC AREA
 0092   VACLOC   ERASE                  ADDRESS OF CURRENT VAC (= FIXLOC+32D)
 0093   VBUF     ERASE  +5              6 WORD TEMPORARY BLOCK FOR VXV, MXV, ETC
 0094   TEMQS    EQUALS VBUF            TEMP STORAGE FOR SWCALL ROUTINE
 0095   BANKTEM  EQUALS VBUF +1         LIKEWISE
 0096   B        EQUALS VBUF +2         ARGUMENT STORAGE IN FUNCTIONS
 0097   PROGREG  =      VBUF    +2      FOR GO EXEC PROGRAM
 0098   MIXTEMP  =      VBUF    +2      FOR MIXNOUN DATA
 0099   SIGNRET  =      VBUF    +2      RETURN FOR +,- ON
R0100   ALSO PROGREG+1 ,PROGREG+2.  MIXTEMP+1, MIXTEMP+2.
 0101   ESCAPE2  EQUALS VBUF +4         NEGATIVE ARGUMENT SWITCH IN ARCCOS
 0102   TAG1     EQUALS VBUF +4         USED FOR PICKING UP INDEX AND STEP REGS
 0103   TEMQ3    EQUALS VBUF +5         RETURN FROM DDV AND SQRTDIV
 0104   POLISH   EQUALS VBUF +5         TEMPORARY STORAGE FOR COMPLETE ADDRESSES
 0105   WDCNT    =      VBUF    +5      CHAR COUNTER FOR DSPWD
 0106   INREL    =      VBUF    +5      INPUT BUFFER SELECTOR ( X,Y,Z, REG )
 0107   BUF      ERASE  +2              USED BY DMP1, SQRTDIV
 0108   LOGTEM   EQUALS BUF             LOG SUBROUTINE TEMP.
 0109   SGNDMAX  EQUALS BUF +2          USED IN TPAGREE
 0110   TEM3     EQUALS BUF +2
 0111   GCOMPSW  EQUALS BUF +2
 0112   TEM2     ERASE
 0113   DSREL    =      TEM2            REL ADDRESS FOR DSPIN(TEM2 USED BY DAD1)
 0114   TEM4     ERASE
 0115   TEMQ     EQUALS TEM4            RETURN FROM TPAGREE
 0116   DSMAG    =      TEM4            MAGNITUDE STORE FOR DSPIN
 0117   IDADDTEM =      TEM4            MIXNOUN INDIRECT ADDRESS STORAGE
 0118   TEM5     ERASE
 0119   TEMQ2    EQUALS TEM5
 0120   BASE     =      TEM5
 0121   COUNT    =      TEM5            FOR DSPIN  (TEM5 IS USED BY DAD)
 0122   TEM8     ERASE
 0123   TEM6     EQUALS TEM8            ERASABLE ASSIGNMENTS BY EQUALS
 0124   TEM9     ERASE
 0125   WRDRET   =      TEM9            RETURN FOR 5BLANK
 0126   WDRET    =      TEM9            RETURN FOR DSPWD
 0127   DECRET   =      TEM9            RETURN FOR PUTCOM(DEC LOAD)
 0128   21/22REG =      TEM9            TEMP FOR CHARIN
 0129   TEM10    ERASE
 0130   IND      EQUALS TEM10           USED IN CROSS ROUTINE
 0131   MIXBR    =      TEM10           INDICATOR FOR MIXED OR NORMAL NOUN
 0132   DSPMMTEM =      TEM10           DSPCOUNT SAVE FOR DSPMM
 0133   DVSW     ERASE                  (THIS CAN PROBABLY BE EQUATED)
 0134   SGNOFF   =      DVSW            TEMP FOR +,- ON
 0135   NVTEMP   =      DVSW            TEMP FOR NVSUB
 0136   SFTEMP1  =      DVSW            STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
 0137   DECTEM2  =      DVSW            TEMP FOR NUM
 0138   BRANCHQ  ERASE                  (DITTO)
 0139   CODE     =      BRANCHQ         FOR DSPIN
 0140   SFTEMP2  =      BRANCHQ         STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
 0141   COMPON   ERASE                  (DITTO)
 0142   DSEXIT   =      COMPON          RETURN FOR DSPIN
 0143   EXITEM   =      COMPON          RETURN FOR SCALE FACTOR ROUTINE SELECT
 0144   BLANKRET =      COMPON          RETURN FOR 2BLANK
 0145   ARETURN  ERASE                  RETURN ADDRESS FOR ARCSIN/ARCCOS.
 0146   LSTPTR   =      ARETURN         LIST POINTER FOR GRABUSY
 0147   RELRET   =      ARETURN         RETURN FOR RELDSP
 0148  2FREERET  =      ARETURN         RETURN FOR FREEDSP
 0149   ESCAPE   ERASE                  ARCSIN/ARCCOS SWITCH
 0150  2CADRTEM  =      ESCAPE          TEMP STORAGE FOR GRAB ROUTINES
R0151  2         THE FOLLOWING REGISTERS ARE USED EXCLUSIVELY BY THE EXECUTIVE.
 0152   MPAC     ERASE  +2              MULTIPLE-PRECISION ACCUMULATOR
 0153   LOC      ERASE                  LOCATION COUNTER FOR OPERATOR WORDS
 0154   ADRLOC   ERASE                  LOCATION COUNTER FOR OPERAND ADDRESSES
 0155   OVFIND   ERASE                  0 FOR NO OVERFLOW, NON-ZERO OTHERWISE
 0156   PUSHLOC  ERASE                  NEXT AVAILABLE ENTRY IN PUSH-DOWN LIST
 0157  2PRIORITY ERASE                  PRIORITY OF CURRENT JOB
 0158  2         ERASE  +55D            EIGHT JOBS POSSIBLE
 0159  2NEWJOB   ERASE                  SET NON-ZERO TO SIGNAL EXECUTIVE RUPT
 0160   VAC1USE  ERASE                  SEE EXECUTIVE PROGRAMS FOR USE OF THESE
 0161   VAC1     ERASE  +42D            REGISTERS
 0162   VAC2USE  ERASE
 0163   VAC2     ERASE  +42D
 0164   VAC3USE  ERASE
 0165   VAC3     ERASE  +42D
 0166   VAC4USE  ERASE
 0167   VAC4     ERASE  +42D
 0168   VAC5USE  ERASE
 0169  2VAC5     ERASE  +42D
R0170  2         THE FOLLOWING REGISTERS ARE USED EXCLUSIVELY BY THE WAITLISTER.
 0171   LST1     ERASE  +6              DELTA T'S.
 0172   LST2     ERASE  +7              TASK CADRS.
 0173  2RUPTAGN  ERASE                  WAITLIST ADDITIONAL TASK INDICATOR.
 0174  2KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
R0175            THE FOLLOWING GROUP OF REGISTERS MAY BE USED AS TEMPORARY STORA
 0176  9GE BY ANY INTERRUPT PROGRAM OR BY ANY
R0177   PROGRAM WHICH INHIBITS INTERRUPT. CARE MUST BE TAKEN, HOWEVER, TO SEE TH
 0178  9AT THEY ARE NOT USED DURING A CALL
R0179  2TO THE EXECUTIVE (FOR EXAMPLE), FOR THE EXECUTIVE MAY USE THEM AS TEMPOR
 0180  9ARIES TOO.
 0181   EXECTEM1 ERASE                  THESE REGISTERS, EXECTEM1-3, MAY BE USED
 0182   RUPTSTOR =      EXECTEM1
 0183   IN1HITEM =      EXECTEM1        INTERRUPT TEMP FOR STANDBY PREP
 0184   EXECTEM2 ERASE                  AS SCRATCH STORAGE BY ANY PROGRAM WHICH
 0185   PROG     EQUALS EXECTEM2
 0186   IN1LOTEM =      EXECTEM2        INTERRUPT TEMP FOR STANDBY PREP
 0187   EXECTEM3 ERASE                  INHIBITS INTERRUPTS
 0188   ITEMP3   EQUALS EXECTEM3
 0189   SRRUPT   EQUALS EXECTEM3        SHORT STORAGE FOR SR DURING INTERRUPT.
 0190   LOOKRET  =      EXECTEM3        INTERRUPT TEMP FOR STANDBY PREP
 0191   EXECTEM4 ERASE
 0192   EXECTEM5 ERASE                  BANK RETURN FROM PHASE CONTROL.
 0193   NEWPRIO  ERASE                  PRIORITY OF NEW JOB
 0194   NVAL     =      NEWPRIO
 0195   DELT     =      NVAL
 0196   ITEMP1   =      NEWPRIO
 0197   WTEXIT   ERASE
 0198   ITEMP2   =      WTEXIT
 0199   KEYTEMP1 =      WTEXIT          TEMP FOR KEYRUPT, UPRUPT
 0200   DSRUPTEM =      WTEXIT          TEMP FOR DSPOUT
 0201   LOCCTR   ERASE                  USED TO LOCATE STORAGE FOR CORE REGISTRS
 0202  2PHASDATA EQUALS LOCCTR
R0211  2ERASABLE ASSIGNMENTS SPECIFIC TO PINBALL
 0212   VERBREG  ERASE                  VERB CODE
 0213   NOUNREG  ERASE                  NOUN CODE
 0214   XREG     ERASE                  R1 INPUT BUFFER
 0215   YREG     ERASE                  R2 INPUT BUFFER
 0216   ZREG     ERASE                  R3 INPUT BUFFER
 0217   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
 0218   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
 0219   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
 0220   MODREG   ERASE                  MODE CODE
 0221   REQRET   ERASE                  RETURN REGISTER FOR LOAD
 0222   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
 0223   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
 0224            SETLOC 616             NEEDED FOR PINBALL AUTO CHECK
 0225   DSPTEM1  ERASE  +2              BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
 0226   LANDMARK EQUALS DSPTEM1
 0227   V75TEMP  EQUALS DSPTEM1
 0228   DSPTEM2  ERASE  +2              BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
 0229   NOUNADD  ERASE                  MACHINE ADDRESS FOR NOUN
 0230   MONSAVE  ERASE                  N/V CODE FOR MONITOR. ALSO ACTIVITY
 0231   MONSAVE1 ERASE                  NOUNADD STORAGE FOR MONITOR WITH MATBS
 0232   CADRSTOR ERASE                  ENDIDLE STORAGE
 0233   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
 0234   NVSBCADR ERASE                  NVSUB STORAGE FOR CALLING CADR
 0235   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
 0236   CLPASS   ERASE                  PASS INDICATOR FOR CLEAR
 0237  4DSPLIST  ERASE  +2              WAITING LIST FOR DSP SYST INTERNAL USE
R02371 2LONG-TERM STORAGE USED DURING INTERUPT, NOT USED BY EXECUTIVE, WAITLIST,
 02372 9 ETC.
 02373  RUPTREG1 ERASE
 02374  KSAMPTEM EQUALS RUPTREG1
 02375  RUPTREG2 ERASE
 02376  OSAMPTEM EQUALS RUPTREG2
 02377  RUPTREG3 ERASE
 02378 2RUPTREG4 ERASE
R0238  2MISCELLANEOUS RESERVATIONS
 0239  2SAMPTIME ERASE  +1              SAMPLED TIME FOR PINBALL REFERENCE.
R0240  2         INTERPRETER SWITCH ASSIGNMENTS.
 0241  2STATE    ERASE  +2              45 SWITCHES USED BY INTERPRETIVE PROGS.
 0242   DSPLOCK  EQUALS STATE           BIT 4
 0243   EXTVBACT EQUALS STATE           BIT 3
 0244   UPLOCK   EQUALS STATE           BIT 2
 0245   FLAGWRD1 EQUALS STATE +1
 0246  2FLAGWRD2 EQUALS STATE +2
 0247   JSWITCH  EQUALS 1               FREE-FALL INTEGRATION.
 0248   ABORTSIG EQUALS 2               SET WHEN GROUND ABORT V72 IS RECEIVED.
 0249   TFF2FLAG EQUALS 3               TOM D. NAMED THIS
 0250   BIASFLAG EQUALS 4               CAUSES DELV TO BE ZEROED AFTER 1/PIPA
 0251   NBSMBIT  EQUALS 5               IN-FLIGHT ALIGNMENT.
 0252   GONEPAST EQUALS 6                RE-ENTRY
 0253   RELVELSW EQUALS 7D              RE-ENTRY.
 0254   EGSW     EQUALS 8D              RE-ENTRY.
 0255   HUNTSW1  EQUALS 9D              RE-ENTRY.
 0256   HIND     EQUALS 10D             ENTRY.
 02565  VERIFLAG EQUALS 10D
A0257   DSKYFLAG EQUALS 11D             GUARDS AGAINST DOUBLE KEYBOARD ENTRIES.
A0258   DSPLOCK  EQUALS 12D             KEYBOARD/SUBROUTINE CALL INTERLOCK
A0259   EXTVBACT EQUALS 13D             EXTENDED VERB ACTIVITY
A0260   UPLOCK   EQUALS 14D             UPLINK INTERLOCK (ACTIVATED BY RECPTION
A0261  2                                OF A BAD CODE IN UPLINK)
 02615  INRLSW   EQUALS 15D             PROGSTALL NOT USED DURING ENTRY.
 0262  2PRGSW    EQUALS 15D             USED BY PRGSTALL.
 0263   COASTFLG EQUALS 17D             17 TO 47 ARE 501 SEQUENCE CONTROL FLAGS.
 0264   UPDATFLG EQUALS 18D
 0265   SOAKFLAG EQUALS 19D
 0266   SHTDNFLG EQUALS 20D
 0267   ACTIVFLG EQUALS 21D
 0268   INTPFLAG EQUALS 22D
 0269   INITFLAG EQUALS 23D
 0270   S4BSMFLG EQUALS 24D
 0271   INT1FLAG EQUALS 25D
 0272   MONITFLG EQUALS 26D
 0273   DVMONFLG EQUALS 27D
 0274   STEERFLG EQUALS 28D
 0275   ENTRYFLG EQUALS 29D
 0276   LIFTFLAG EQUALS 30D
 0277  2TUMBFLAG EQUALS 31D
 0278   DRIFTFLG EQUALS 33D
 0279   CDUXFLAG EQUALS 34D
 0280   BACKFLAG EQUALS 35D
 0281   ROLLFLAG EQUALS 36D
 0282   CALCFLAG EQUALS 37D
 0283   DOMANFLG EQUALS 38D
 0284   NEGFLAG  EQUALS 39D
 0285   BEGINFLG EQUALS 40D
 0286   SPS4FLAG EQUALS 41D
 0287   SPS3FLAG EQUALS 42D
 0288   SPS2FLAG EQUALS 43D
 0289   SPS1FLAG EQUALS 44D
 0290   TABTFLAG EQUALS 45D
 0291   ABRTFLAG EQUALS 46D
 0292  2ARRSTFLG EQUALS 47D
R0293  2         STORAGE USED BY PHASE CONTROL.
 0294   PHASETAB ERASE  +5              PHASE VALUES FOR 6 PROGRAMS
 0295   PHASE1   EQUALS PHASETAB
 0296   PHASE2   EQUALS PHASETAB + 1
 0297   PHASE3   EQUALS PHASETAB + 2
 0298   PHASE4   EQUALS PHASETAB + 3
 0299   PHASE5   EQUALS PHASETAB + 4
 0300   PHASE6   EQUALS PHASETAB + 5
 0301   PHASEBAR ERASE  +5              COMPLEMENTED COPY.
 0302   -PHASE1  EQUALS PHASEBAR
 0303   TBASE2   ERASE
 0304   TBASE3   ERASE
 0305   TBASE4   ERASE
 0306  2TBASE5   ERASE                   SHOULD COMPLETE THIS SET.
R0307  2         THE FOLLOWING REGISTERS ARE USED BY THE DOWNRUPT PROGRAM.
 0308   TELCOUNT ERASE                  ENDPULSE FREQUENCY MONITORING COUNTER.
 0309   LDATALST ERASE
 0310   DNLSTADR ERASE                  BASE ADDRESS OF APPROPRIATE TM LIST.
 0311   DNTMGOTO ERASE                  ADDRESS OF CURRENT DOWNLINK PHASE.
 0312   TMINDEX  ERASE                  STEPS THROUGH THE DOWNLIST
 0313   TMMARKER ERASE
 0314  2MARKERCT ERASE
R0315  2         THE FOLLOWING STORAGE IS USED BY T4RUPT.
 0316   CDUIND   ERASE                  IMU CDU STATUS INDICATOR AND INDEXER.
 0317   THETAD   ERASE  +2              SET OF THREE DEISRED ANGLES IN 2S COMPL.
 0318   OPTIND   ERASE                  OPTICS CDU STATUS INDICATOR AND INDEXER.
 0319  2DESOPTX  ERASE  +1              DESIRED OPTICS CDU ANGLES.
 0320   DSPCNT   ERASE                  STEPS THROUGH K-RELAY SLOTS IN DSPTAB.
 0321   NOUT     ERASE                  HOLDS NUMBER OF RELAY WORDS TO CHANGE.
 0322  2DSPTAB   ERASE  +13D            HOLDS STATE OF ALL RELAYS AND CHANGE INF
 0323  2OLDERR   ERASE                  LAST-SAMPLED SYSTEM ERROR BITS.
R0324  2         THE BITS OF OLDERR HAVE THE FOLLOWING MEANINGS:
R0325   BIT 1 = 1 IF THE PILOTS ATTITUDE BUTTON IS DEPRESSED.
R0326   BIT 2 = 1 IF RESTART FAILED (AND DID A FRESH START).
R0327   BIT 3 = 1 IF BIT 4 OF OUT1 WAS NOT INVERTED LAST NWJOB.
R0328   BIT 4 = 1 TO INHIBIT IMU FAIL FOR 5 SECONDS AFTER COARSE ALIGN.
R0329   BIT 5 = 1 IF CURTAINS CALLED (IMU MODING FAILURE, ETC.)
R0330   BIT10 = 1 IF CDU FAIL IS ON IN FINE ALIGN.
R0331   BIT11 = 1 IF PIPA FAIL IS ON.
R0332  2BIT12 = 1 IF IMU FAIL IS ON IN ANY MODE BUT COARSE ALIGN.
R0333            IN FLIGHT 501, BITS 2, 5, 11, AND 12 INHIBIT MAINTENANCE OF THE
 0334  9 NIGHT WATCHMAN ALARM
R0335  2SO THAT IF THEY ARE PRESENT FOR 2 CONSECUTIVE NWJOBS, G & N FAIL WILL BE
 0336  9 SENT TO THE MCP.
 0337   WASKSET  ERASE                  LAST SETTING OF IMU MODE SWITCHES.
 0338  2WASOPSET ERASE                  LAST SETTING OF OPTICS MODE SWITCHES.
 0339   DESKSET  ERASE                  DESIRED SETTING OF IMU MODE SWITCHES.
 0340  2DESOPSET ERASE                  DESIRED OPTICS MODES.
R0341  2         THE FOLLOWING REGISTERS ARE USED BY THE MODE SWITCHING AND MARK
 0342  9 PROGRAMS.
 0343   IMUCADR  ERASE                  USED BY IMUSTALL.
 0344   MODECADR EQUALS IMUCADR         FOR INDEXING PURPOSES.
 0345  2OPTCADR  ERASE                  USED BY OPTSTALL.
 0346   MARKSTAT ERASE                  MARK BUTTON STATUS REGISTER.
P0347  2         THE FOLLOWING STORAGE IS RESERVED FOR IMU COMPENSATION PARAMETE
 0348  9RS.
 0349   PBIASX   ERASE                  PIPA BIAS AND SCALE FACTOR TERMS
 0350   PIPABIAS EQUALS PBIASX          INTERMIXED.
 0351   PIPASCFX ERASE
 0352   PIPASCF  EQUALS PIPASCFX
 0353   PBIASY   ERASE
 0354   PIPASCFY ERASE
 0355   PBIASZ   ERASE
 0356  2PIPASCFZ ERASE
 0357   GBIASX   ERASE                  GYRO BIAS DRIFTS.
 0358   GBIASY   ERASE
 0359  2GBIASZ   ERASE
 0360   ADIAX    ERASE                  ACCELERATION SENSITIVE DRIFT ALONG THE
 0361   ADIAY    ERASE                  INPUT AXIS.
 0362  2ADIAZ    ERASE
 0363   ADSRAX   ERASE                  ACCELERATION SENSITIVE DRIFT
 0364   ADSRAY   ERASE                  ALONG THE SPIN-REFERENCE AXIS.
 0365  2ADSRAZ   ERASE
 0366  21/PIPADT ERASE                  DELTA TIME FOR 1/PIPA.
 0367  2OLDBT1   EQUALS   1/PIPADT      TIME1 STORAGE DURING FREE-FALL COMP.
 0368  2GCOMP    ERASE    +5            CONTAINS COMPENSATING GYRO TORQUES.
R0369  2         THE FOLLOWING INTERLOCK REGISTER IS USED BY THE GYRO ROUTINES.
 0370   LGYRO    ERASE                  ZERO IF GYROS AVAILABLE - ADDRESS OF
A0371                                   COMMANDS IF IN USE
P0372            THE FOLLOWING STORAGE CONTAINS REFERENCE VARIABLES FOR SEVERAL
 0373  9MISSION PROGRAMS. INCLUDED HERE ARE
R0374  4POSITION, VELOCITY, THEIR ASSOCIATED TIME, AND IMU STABLE MEMBER ORIENTA
 0375  9TION (WHEN THE IMU IS ALIGNED).
 0376   REFRRECT ERASE  +5              REFERENCE RECTIFICATION VECTORS.
 0377   REFVRECT ERASE  +5
 0378   DELTAV   ERASE  +5              REFERENCE DEVIATION VECTORS.
 0379   NUV      ERASE  +5
 0380  2REFRCV   ERASE  +5              REFERENCE CONIC POSITION VECTOR.
 0381   REFVCV   ERASE  +5              REFERENCE CONIC VELOCITY VECTOR.
 0382   REFTC    ERASE  +1              REFERENCE TIME SINCE RECTIFICATION.
 0383  2TE       ERASE  +1              TIME CORRESPONDING TO POSITION AND VEL.
 0384   REFXKEP  ERASE  +1              REFERENCE CONIC VARIABLE X.
 0385  2PBODY    ERASE
 0386   NSHIFT   ERASE                  AVERAGE G INTEGRATOR PARAMETERS REQUIR-
 0387   XSHIFT   ERASE                  ING PERMANENT STORAGE
 0388   CALCG    ERASE
 0389  2UNITW    ERASE  +5
 0390   RN       EQUALS REFRRECT        SYMBOLS FOR POSITION AND VELOCITY
 0391   RPIP     EQUALS REFRRECT        DURING ACCELERATED PHASES.
 0392   VN       EQUALS REFVRECT
 0393  2VPIP     EQUALS REFVRECT
 0394   DELV     EQUALS DELTAV          PIPA DATA DURING ACCELERATED PHASES.
 0395   DELVX    EQUALS DELV
 0396   DELVY    EQUALS DELV +2
 0397   DELVZ    EQUALS DELV +4
 0398   GRAVITY  EQUALS NUV             AVERAGE G INTEGRATOR VARIABLES
 0399   UNITR    EQUALS REFRCV
 0400   RMAG     EQUALS REFVCV
 0401   RMAGSQ   EQUALS REFVCV +2
 0402  2DELTAT   EQUALS REFVCV +4
 0403   TEMX     EQUALS REFTC
 0404   TEMY     EQUALS REFTC + 1
 0405   TEMZ     EQUALS TE
 0406   TEMXY    EQUALS TE + 1
 0407  2PIPAGE   EQUALS REFXKEP
 0408   REFSMMAT ERASE  +17D            REFERENCE TO SM MATRIX
 0409  2DTEPOCH  ERASE  +1
 04092  REDOCNTR ERASE                  RESTART DATA SAVED IN THESE REGISTERS
 04094  REDOTIME ERASE  +1
P0410            THE FOLLOWING STORAGE IS TIME-SHARED BY MISSION PROGRAMS UNDER
 0411  9THE SUPERVISION OF MASTER COMTROL. IT IS
R0412   ORGANIZED INTO THREE PARTS REFERRED TO AS A MEMORY, B MEMORY, AND C MEMO
 0413  9RY. A PARTICULAR MISSION PHASE IS
R0414   ASSIGNED TO ONE OF THE SEGMENTS IN SUCH A WAY THAT NO OTHER MISSION PHAS
 0415  9E USING THE SAME SEGMENT WILL EVER RUN
R0416   CONCURRENTLY; E.G., RE-ENTRY WILL NEVER RUN CONCURRENT WITH TVC. THE NUM
 0417  9BER OF AREAS (3) IS DETERMINED BY THE
R0418  2MAXIMUM NUMBER OF DISTINCT MISSION PROGRAMS WHICH RUN SIMULTANEOUSLY.
R0419            A MEMORY IS USED BY NAVIGATION PROGRAMS; MID-COURSE DURING FREE
 0420  9-FALL PORTIONS OF THE MISSION AND
R0421   AVERAGE G INTEGRATION DURING ACCELERATED PHASES. GUIDANCE PROGRAMS SUCH
 0422  9AS TVC USE B MEMORY TOGETHER WITH THEIR
R0423   ASSOCIATED ALIGNMENTS. THE C MEMORY PORTION IS USED THROUGHOUT MOST OF T
 0424  9HE MISSION FOR THE MIDCOURSE ERROR
R0425   TRANSITION MATRIX W, AND LATER BY RE-ENTRY AFTER THE LAST MEASUREMENT HA
 0426  9S BEEN INCORPORATED. THE EXCEPTION IS
R0427  4SYSTEM TEST, ASSIGNED TO A MEMORY, WHICH NEVER RUNS CONCURRENTLY WITH MI
 0428  9SSION PROGRAMS.
 0429   AMEMORY  ERASE  +139D
 0430   BMEMORY  ERASE  +164D
 0431  4CMEMORY  ERASE  +71D
R0432  2         STORAGE USED TO SAVE T1,2 DURING STANDBY.
 0433   TIME2SAV EQUALS AMEMORY +000D
 0434   TIME1SAV EQUALS AMEMORY +001D
 0435   IN1HISAV EQUALS AMEMORY +002D
 0436   IN1LOSAV EQUALS AMEMORY +003D
 0437   IN1HIDIF EQUALS AMEMORY +004D
 0438   IN1LODIF EQUALS AMEMORY +005D
R0439  2         THE FOLLOWING A MEMORY LOCATIONS ARE USED BY MID-COURSE NAVIGAT
 0440  9ION:
 0441   RRECT    EQUALS AMEMORY +000D
 0443   RIGNTION EQUALS AMEMORY +000D
 0444   VRECT    EQUALS AMEMORY +006D
 0445   VIGNTION EQUALS AMEMORY +006D
 0446   TDELTAV  EQUALS AMEMORY +012D
 0447   NEWDLTAV EQUALS AMEMORY +012D
 0448   YV       EQUALS AMEMORY +012D
 0449   TNUV     EQUALS AMEMORY +018D
 0450   -UPADR   EQUALS TNUV
 0451   STCNTR   EQUALS TNUV +1
 0452   NEWNUV   EQUALS AMEMORY +018D
 0453   ZV       EQUALS AMEMORY +018D
 0454   RCV      EQUALS AMEMORY +024D
 0455   FOUNDR   EQUALS AMEMORY +024D
 0456   VCV      EQUALS AMEMORY +030D
 0457   FOUNDV   EQUALS AMEMORY +030D
 0458   TC       EQUALS AMEMORY +036D
 0459   TET      EQUALS AMEMORY +038D
 0460   XKEP     EQUALS AMEMORY +040D
 0461   ALPHAV   EQUALS AMEMORY +042D
 0462   DELR     EQUALS AMEMORY +042D
 0463   BETAV    EQUALS AMEMORY +048D
 0464   DELVEL   EQUALS AMEMORY +048D
 0465   UVL      EQUALS AMEMORY +048D
 0466   PHIV     EQUALS AMEMORY +054D
 0467   STARMEAS EQUALS AMEMORY +054D
 0468   LNDMRKV  EQUALS AMEMORY +060D
 0469   PSIV     EQUALS AMEMORY +060D
 0470   ROTLMV   EQUALS AMEMORY +066D
 0471  2FV       EQUALS AMEMORY +066D
 0472  2VECTAB   EQUALS AMEMORY +072D
 0473   TAVEGON  EQUALS AMEMORY +072D
 0474   TRESUME  EQUALS AMEMORY +074D
 0475   RAVEGON  EQUALS AMEMORY +076D
 0476   BVECTOR  EQUALS AMEMORY +080D
 0477   UNE      EQUALS AMEMORY +080D
 0478   VAVEGON  EQUALS AMEMORY +082D
 0479   UNP      EQUALS AMEMORY +088D
 0480   RIG-4SEC EQUALS AMEMORY +088D
 0481   ERADSQ/4 EQUALS AMEMORY +094D
 0482   ERAD/2   EQUALS AMEMORY +096D
 0483   ALPHAM   EQUALS AMEMORY +108D
 0484   BETAM    EQUALS AMEMORY +110D
 0485   LONGDES  EQUALS AMEMORY +110D
 0486   TAU      EQUALS AMEMORY +112D
 0487   GIVENT   EQUALS AMEMORY +112D
 0488   DLONG    EQUALS AMEMORY +112D
 0489   DT/2     EQUALS AMEMORY +114D
 0490   LAT      EQUALS AMEMORY +114D
 0491   H        EQUALS AMEMORY +116D
 0492   LONG     EQUALS AMEMORY +116D
 0493   TDEC     EQUALS AMEMORY +118D
 0494   AZ       EQUALS AMEMORY +120D
 0495   FBRANCH  EQUALS AMEMORY +120D
 0496   HBRANCH  EQUALS AMEMORY +121D
 0497   GMODE    EQUALS AMEMORY +122D
 0498   NUMBTEMP EQUALS AMEMORY +122D
 0499   NUMBOPT  EQUALS AMEMORY +123D
 0500   VARIANCE EQUALS AMEMORY +124D
 0501   HMAG     EQUALS AMEMORY +124D
 0502   MEASQ    EQUALS AMEMORY +126D
 0503   COTGAM   EQUALS AMEMORY +126D
 0504  2DELTAQ   EQUALS AMEMORY +126D
 0505   MEASMODE EQUALS AMEMORY +128D
 0506   SITENUMB EQUALS AMEMORY +128D
 0507   NVCODE   EQUALS AMEMORY +129D
 0508   MIDEXIT  EQUALS AMEMORY +130D
 0509   DSPRTRN  EQUALS AMEMORY +130D
 0510   WMATFLAG EQUALS AMEMORY +131D
 0511   INCORPEX EQUALS AMEMORY +131D
 0512   STEPEXIT EQUALS AMEMORY +132D
 0513   DIFEQCNT EQUALS AMEMORY +133D
 0514   NORMGAM  EQUALS AMEMORY +133D
 0515   SCALEA   EQUALS AMEMORY +134D
 0516   SCALEB   EQUALS AMEMORY +135D
 0517   SCALEDT  EQUALS AMEMORY +136D
 0518   SCALDELT EQUALS AMEMORY +137D
 0519  2SCALER   EQUALS AMEMORY +138D
 0520  4FFFLAGS  EQUALS AMEMORY +139D
R0520012         A MEMORY ASSIGNMENTS FOR UPDATE ROUTINE
 052002 STBUFF   EQUALS AMEMORY +000D
 052003 UPOLDMD  EQUALS AMEMORY +014D
 0520044COMPNUMB EQUALS AMEMORY +015D
R0521  2         ENTRY ITEMS IN AMEMORY TO BE INCLUDED IN DOWN-LINK.
 0522   FX       EQUALS AMEMORY + 0     SHARES THIS LOC WITH RRECT.
 0523   PREDANG  EQUALS AMEMORY + 06D   SHARES THIS LOC WITH VRECT.
 0524   JJ       EQUALS AMEMORY + 07D   SHARES THIS LOC WITH VRECT.
 0525   THETAH   EQUALS AMEMORY + 08D   SHARES THIS LOC WITH VRECT.
 0526   LATANG   EQUALS AMEMORY + 010D  SHARES THIS LOC WITH VRECT.
 0527   L/D      EQUALS AMEMORY + 082D  SHARES THIS LOC WITH VAVEGON.
 0528   DIFF     EQUALS AMEMORY + 084D  SHARES THIS LOC WITH VAVEGON.
R0529  4 END OF ENTRY ITEMS.
R0530  2         A MEMORY ASSIGNMENTS FOR ROTATING EARTH ROUTINE.
 0531   RTINIT   EQUALS AMEMORY +012D
 0532   RTEAST   EQUALS AMEMORY +018D
 0533   RTNORM   EQUALS AMEMORY +024D
 0534   RT       EQUALS AMEMORY + 076D  SHARES THIS LOCATION WITH RAVEGON
 0535  4DTEAROT  EQUALS AMEMORY +036D
R05352 2         A MEMORY TEMPORARIES USED BY PRELAUNCH
 05354 4PTEMP    EQUALS AMEMORY + 99D
R0536  2   A MEMORY  USAGE AS TEMPORARIES BY AVERAGE G ROUTINE.
 0537   RN1      EQUALS AMEMORY +127D
 0538   VN1      EQUALS AMEMORY +133D
 0539  4AVGRETRN EQUALS AMEMORY +139D
R05391 2         A MEMORY TEMPORARIES USED BY SERVICER
 053911 VGCNT1   EQUALS AMEMORY +113D
 053912 DVCNT1   EQUALS AMEMORY +114D
 05392 4VR1      EQUALS AMEMORY +115D   12 LOCATIONS FOR VR, DIFFVECT
R0540  2         SYSTEM TEST A MEMORY USAGE:
 0541   GENPL    EQUALS AMEMORY +000D
 0542   TAR1POS  EQUALS GENPL
 0543   FILDELX  EQUALS AMEMORY +012D
 0544   TMARK    EQUALS AMEMORY +060D
 0545   VMARK    EQUALS AMEMORY +062D
 0546   COARSAGN EQUALS AMEMORY +075D
 0547   TESTTIME EQUALS AMEMORY +077D
 0548   LTSTNDX  EQUALS AMEMORY +078D
 0549   COUNTPL  EQUALS AMEMORY +080D
 0550   PIPINDEX EQUALS AMEMORY +081D
 0551   PIPANO   EQUALS AMEMORY +082D
 0552   POSITON  EQUALS AMEMORY +083D
 0553   RESULTCT EQUALS AMEMORY +084D
 0554   NDXCTR   EQUALS RESULTCT
 0555  2QPLACE   EQUALS AMEMORY +085D
 0556   PIPNDX   EQUALS AMEMORY +086D
 0557   STOREPL  EQUALS AMEMORY +088D
 0558   NBPOS    EQUALS AMEMORY +89D
 0559   TESTNDX  EQUALS AMEMORY +90D
 0560   CDUNDX   EQUALS AMEMORY +91D
 0561   GYROD    EQUALS AMEMORY +92D
 0562  2DATAPL   EQUALS AMEMORY +98D
 0563   VACADR   EQUALS AMEMORY +130D
 0564   MKSTAT1  EQUALS AMEMORY +132D
 0565   COAROFIN EQUALS AMEMORY +133D
 0566   MAXPTS2  EQUALS AMEMORY +135D
 0567   QPLAC    EQUALS AMEMORY +136D
 0568   PTS      EQUALS AMEMORY +137D
 0569   RUN      EQUALS AMEMORY +138D
 0570   EROPTN   EQUALS AMEMORY +139D
 0571   TESTNO   EQUALS CMEMORY +000D
 0572   SAVE     EQUALS CMEMORY +001D
 0573   PLOW     EQUALS CMEMORY +002D
 0574   CUSSANG  EQUALS CMEMORY +003D
 0575   NEGCDU1  EQUALS CMEMORY +004D
 0576   NEGCDU2  EQUALS CMEMORY +005D
 0577   LOCNO    EQUALS CMEMORY +006D
 0578   CALCDIR  EQUALS CMEMORY +007D
 0579   BUBBLE   EQUALS CMEMORY +008D
 0580   TEMDELV  EQUALS CMEMORY +009D
 0581   RETAA    EQUALS CMEMORY +010D
 0582   RETBB    EQUALS CMEMORY +011D
 0583  4STARNUMB EQUALS DSPTEM2
R0584  2B MEMORY USED BY POWERED FLIGHT AND ATTITUDE MANEUVERS
 0585   CDUTEMP  EQUALS BMEMORY +000D
 0586   CDUBUF   EQUALS BMEMORY +006D
 0587   WC       EQUALS BMEMORY +006D
 0588   UNITN    EQUALS BMEMORY +006D
 0589   RTRNSLUN EQUALS BMEMORY +006D
 0590   VF       EQUALS BMEMORY +006D
 0591   SINCDU   EQUALS BMEMORY +012D
 0592   COSCDU   EQUALS BMEMORY +018D
 0593   DCDU     EQUALS BMEMORY +024D
 0594   DUPCDU   EQUALS BMEMORY +024D
 0595   STEERROR EQUALS BMEMORY +024D
 0596   DNB      EQUALS BMEMORY +030D
 0597   VG       EQUALS BMEMORY +030D
 0598   UNITVG   EQUALS BMEMORY +030D
 0599   ERRORSUM EQUALS BMEMORY +036D
 0600   XSC      EQUALS BMEMORY +042D
 0601   UNITRXV  EQUALS BMEMORY +042D
 0602   UNITF    EQUALS BMEMORY +042D
 0603   UNITD    EQUALS BMEMORY +042D
 0606   YSC      EQUALS BMEMORY +048D
 0607   UNITHORZ EQUALS BMEMORY +048D
 0608   UNITS    EQUALS BMEMORY +048D
 0609   ZSC      EQUALS BMEMORY +054D
 0610   UNITMDT  EQUALS BMEMORY +054D
 0611   XSCD     EQUALS BMEMORY +060D
 0612   CBDT     EQUALS BMEMORY +060D
 0613   YSCD     EQUALS BMEMORY +066D
 0614   VR       EQUALS BMEMORY +066D
 0615   ZSCD     EQUALS BMEMORY +072D
 06155  SGNTHETA EQUALS BMEMORY +072D
 0616   DIFFVECT EQUALS BMEMORY +072D
 0617   RTARG    EQUALS BMEMORY +078D
 06175  DTEMP1   EQUALS BMEMORY +078D
 0618   S        EQUALS BMEMORY +078D
 0619   DN       EQUALS BMEMORY +080D
 0620   SMA      EQUALS BMEMORY +082D
 0621   ANORMAL  EQUALS BMEMORY +084D
 0622   LOOKANG  EQUALS BMEMORY +086D
 06225  DISPCNTR EQUALS BMEMORY +087D
 0623   MDT      EQUALS BMEMORY +088D
 0624   VGCNTR   EQUALS BMEMORY +090D
 0625   DVCNTR   EQUALS BMEMORY +091D
A0626   K1ROLL   EQUALS BMEMORY +092D   N.B. THIS LOCATION SHARED WITH ENTRY
 0627   DTHETA   EQUALS BMEMORY +094D
 0628   THETAMAN EQUALS BMEMORY +096D
 0629   TFF      EQUALS BMEMORY +098D
 0630   LONGTIME EQUALS BMEMORY +100D
 0631   TLIFTOFF EQUALS BMEMORY +102D
 0632   TENGON   EQUALS BMEMORY +102D
 0633   TCUTOFF  EQUALS BMEMORY +102D
 0634   PIPTIME  EQUALS BMEMORY +104D
 0635   LONGEXIT EQUALS BMEMORY +106D
 0636   CALLCADR EQUALS BMEMORY +107D
 0637   VRCADR   EQUALS BMEMORY +108D
 0638   EXITCADR EQUALS BMEMORY +109D
 0639   ROLLC    EQUALS BMEMORY +110D   N.B. THIS LOCATION SHARED WITH ENTRY
 0640  2EXITCAD1 EQUALS BMEMORY +112D
R0650  4B, C MEMORY USED FOR ERASABLE 501 LAUNCH, AIMPOINT, VEHICLE DATA.
 06545  TATLAN1  EQUALS CMEMORY +030D
 0655   TATLANT  EQUALS BMEMORY +138D
 06555  RTATLAN1 EQUALS CMEMORY +032D
 0656   RTATLANT EQUALS BMEMORY +140D
 06565  TPACIF1  EQUALS CMEMORY +038D
 0657   TPACIFC  EQUALS BMEMORY +146D
 06575  RTPACIF1 EQUALS CMEMORY +040D
 0658   RTPACIFC EQUALS BMEMORY +148D
 0659   ESQ(VR)  EQUALS BMEMORY +154D
 0660   SEMILAT  EQUALS BMEMORY +158D
 0661   TCOAST   EQUALS BMEMORY +162D
 06615 4TDECAY   EQUALS BMEMORY +164D
R0662  2         THE FOLLOWING ARE RE-ENTRY AND PRE-RE-ENTRY ASSIGNMENTS:
 0663   (V)      EQUALS BMEMORY +000D
 0664   DIFFOLD  EQUALS BMEMORY + 008D
 0665   Q7       EQUALS BMEMORY + 010D
 0666   FACT2    EQUALS BMEMORY +012D
 0667   ESQ      EQUALS BMEMORY +014D
 0670   LEWD     EQUALS BMEMORY +020D
 0671   VSQUARE  EQUALS BMEMORY +022D
 0672   DADV1    EQUALS BMEMORY + 24D
 0673   RDOT     EQUALS BMEMORY +026D
 0674   TENTRY   EQUALS BMEMORY +028D
 0675   ROLLBIAS EQUALS BMEMORY +30D
R0676     A HOLE.
 0677   ETA      EQUALS BMEMORY +034D
 0678   D        EQUALS BMEMORY +038D
 0679   V1       EQUALS BMEMORY +040D
 0680   NEGTHET  EQUALS BMEMORY +042D
 0681   V1OLD    EQUALS BMEMORY + 044D
 0682   K2ROLL   EQUALS BMEMORY +046D
 0683   GOTOADDR EQUALS BMEMORY +048D
 0684   XPIPSUM  EQUALS BMEMORY +049D
 0685   YPIPSUM  EQUALS BMEMORY +050D
 0686   ZPIPSUM  EQUALS BMEMORY +051D
 0687   XPIPBUF  EQUALS BMEMORY +052D
 0688   YPIPBUF  EQUALS BMEMORY +056D
 0689   ZPIPBUF  EQUALS BMEMORY +060D
 0690   PIPCTR   EQUALS BMEMORY + 64D
 0691   DOLD     EQUALS BMEMORY + 65D
R0692     A HOLE.
 0693   TEM1B    EQUALS BMEMORY + 68D
 0694   M1       EQUALS BMEMORY + 69D
 0695   GRAD     EQUALS BMEMORY + 70D
R0696     A HOLE.
 0697   LEQ      EQUALS BMEMORY + 77D
 0698   DHOOK    EQUALS BMEMORY + 79D
 0699   AHOOKDV  EQUALS BMEMORY + 81D
 0700   DVL      EQUALS BMEMORY + 83D
 0701   K1ROLL   EQUALS BMEMORY +092D   N.B. THIS LOCATION SHARED WITH POW. FL.
R0704  2  UNB,X,Y,Z ARE DEFINED LATER.
R0705  4                                         END OF  RE-ENTRY STUFF
R0706  2         B MEMORY ASSIGNMENTS FOR PRE-LAUNCH ALIGNMENT.
 0707   LATITUDE EQUALS BMEMORY +000D
 0708   AZIMUTH  EQUALS BMEMORY +002D
 0709   GYROCSW  EQUALS BMEMORY +004D
 0710   PRELTEMP EQUALS BMEMORY +005D
 0711   PRELXGA  EQUALS BMEMORY +006D
 0712   PRELYGA  EQUALS BMEMORY +007D
 0713   PRELZGA  EQUALS BMEMORY +008D
 0715   INFLANG  EQUALS BMEMORY +014D
 0716   GYROANG  EQUALS BMEMORY +020D
 0717   TAZ      EQUALS BMEMORY +26D
 0718   TEL      EQUALS BMEMORY +28D
 0719   VAZ      EQUALS BMEMORY +30D
 0720   CHKNVTEM EQUALS BMEMORY +32D
 0721   FILTER   EQUALS BMEMORY +34D
 0722   DELE     EQUALS BMEMORY +36D
 0723   FILDELZ  EQUALS DELE
 0724   DELS     EQUALS BMEMORY +38D
 0725   FILDELY  EQUALS DELS
 0726   INT      EQUALS BMEMORY +40D
 0727   PREVTIME EQUALS BMEMORY +44D
 0728   THETAY   EQUALS BMEMORY +90D
 0729   THETAZ   EQUALS BMEMORY +92D
 0730   THETAX   EQUALS BMEMORY +94D
 0731   THETASTH EQUALS BMEMORY +96D
 0732   THETAE   EQUALS BMEMORY +98D
 0733   VECTEM   EQUALS BMEMORY +48D
 0735   TIME2GR  EQUALS BMEMORY +106D
 0736   TIME1GR  EQUALS BMEMORY +107D
 0737  4TARGET1  EQUALS BMEMORY +054D
R0738  2         THE FOLLOWING LOCATIONS ARE USED BY IN-FLIGHT ALIGNMENT:
 0739   STARS    EQUALS BMEMORY +052D
 0740   STARAD   EQUALS TARGET1
 0741   STAR     EQUALS BMEMORY +066D
 0742   XSM      EQUALS BMEMORY +072D
 0743   YSM      EQUALS BMEMORY +078D
 0744   ZSM      EQUALS BMEMORY +084D
 0745   XNB      EQUALS BMEMORY +114D
 0746   XDC      EQUALS BMEMORY +114D
 0747   XDSMPR   EQUALS BMEMORY +114D
 0748   YNB      EQUALS BMEMORY +120D
 0749   YDC      EQUALS BMEMORY +120D
 0750   YDSMPR   EQUALS BMEMORY +120D
 0751   ZNB      EQUALS BMEMORY +126D
 0752   ZDC      EQUALS BMEMORY +126D
 0753   ZDSMPR   EQUALS BMEMORY +126D
 0754   OGC      EQUALS BMEMORY +132D
 0755   SAC      EQUALS BMEMORY +132D
 0756   IGC      EQUALS BMEMORY +134D
 0757   PAC      EQUALS BMEMORY +134D
 0758  4MGC      EQUALS BMEMORY +136D
R07582 2   RE-ENTRY ATTITUDE CONTROL UNIT VECTORS ALONG NAV BASE.
 07583  UXNB     EQUALS XNB             USED IN RE-ENTRY CONTROL.
 07584  UYNB     EQUALS YNB             USED IN RE-ENTRY CONTROL.
 07585 4UZNB     EQUALS ZNB             USED IN RE-ENTRY CONTROL.
R0759  2THE FOLLOWING IS USED FOR ATTITUDE CONTROL
 0760   ROLL     EQUALS BMEMORY +000D
 0761   PITCH    EQUALS BMEMORY +001D
 0762  4YAW      EQUALS BMEMORY +002D
R0763  2         CMEMORY USED FOR STORAGE OF 501 BOOST ATTITUDE MONITOR PARAMETE
 0764  9RS
 0766   TROLL    EQUALS CMEMORY +001D
 0767   TPITCH   EQUALS CMEMORY +003D
 0768   TENDPTCH EQUALS CMEMORY +005D
 0769   TMONITOR EQUALS CMEMORY +007D
 0770   TTUMON   EQUALS CMEMORY +009D
 0771   POLYENTR EQUALS CMEMORY +010D
 0772   POLYORDR EQUALS CMEMORY +011D
 0773   POLYCOEF EQUALS CMEMORY +012D
 0774   POLYEND  EQUALS CMEMORY +026D
 0775  4ROLLDTH  EQUALS CMEMORY +027D
R0776  2         THE FOLLOWING IS THE MIDCOURSE 6X6 ERROR TRANSITION MATRIX:
 0777  4W        EQUALS CMEMORY +000D
R0778  2         C MEMORY ASSIGNMENTS FOR RE-ENTRY:
 0779   UNI      EQUALS CMEMORY +000D
 0780   UNITV    EQUALS CMEMORY +006D
 0781   INITL/D  EQUALS CMEMORY +12D
 0782   VCORR    EQUALS CMEMORY +014D
 0783   A0       EQUALS CMEMORY +016D
 0784   VBARS    EQUALS CMEMORY +018D
 0785   COSG/2   EQUALS CMEMORY +020D
 0786   GAMMAL   EQUALS CMEMORY +022D
 0787   VS       EQUALS CMEMORY + 024D
 0788   D0       EQUALS CMEMORY +026D
 0789   VL       EQUALS CMEMORY + 28D
 0790   V        EQUALS CMEMORY +030D
 0791   FACTOR   EQUALS CMEMORY +032D
 0792   VREF     EQUALS CMEMORY +034D
 0793   RDOTREF  EQUALS CMEMORY +036D
 0794   ALP      EQUALS CMEMORY +038D
 0795  8FACT1    EQUALS CMEMORY +040D
R07951 4
R07953 2    SAVE RRECT AND VRECT IN CMEMORY TO RESTART ORBITAL INTEGRATION.
 07954  RRECCMEM EQUALS CMEMORY + 60D
 07955 4VRECCMEM EQUALS CMEMORY + 66D
R0796  2         ERASABLE ADDED TO THE END OF 202 ASSIGNMENTS FOR FLIGHTS 501 &
 0797  92.
 0799   UPTIME   ERASE  +1              SHOULD BE SET TO 37777, 37777 DURING
A0800                                   PRELAUNCH ERASABLE LOAD.
 080102 ANGLEX   ERASE                  COLDSOAK -  X GIMBAL ANGLE
 080104 ANGLEY   ERASE                  COLDSOAK -  Y GIMBAL ANGLE
 080106 ANGLEZ   ERASE                  COLDSOAK -  Z GIMBAL ANGLE
 080108 TFFMIN   ERASE  +1              TIME TO START SPS2 BURN SEQUENCE
 08011  1/RLLRTE ERASE  +1              ROLL RATE DURING BOOST MONITOR
 080112 MAXROLL  ERASE  +1              MAX DELTA ROLL ANGLE DURING ROLL MONITOR
 080113 CGY      ERASE  +3              C.G. ROTATION ABOUT Y S/C AXIS
 080114 CGZ      ERASE  +3              C.G. ROTATION ABOUT Z S/C AXIS
 080115 ATDT     ERASE  +3              INTEGRATED INITIAL THRUST ACC. MAGNITUDE
 080116 TFFNOM   ERASE  +1              NOMINAL TIME FROM NOMCASE TO 400,000 FT.
 080117 S2SWITCH ERASE                  SET NEGATIVE TO RECOMPUTE SPS2 ATTITUDE
 080118 REFSWTCH ERASE                  SET NEGATIVE FOR UNCOND. 280K FT FF REF
 080119 REDOSPS1 ERASE                  SET NEGATIVE TO REDO SPS1 AT AVGON
 08012  ECC      ERASE  +1              FOR SIMULATION EDITING
P0801252THE FOLLOWING STORAGE IS RESERVED EXCLUSIVELY FOR SELF-CHECK
 0802  2SELFERAS ERASE  1760 - 1777
 08021  ERESTORE =      1760
 0803   QADRS    EQUALS MPAC            RESERVED
 0804   2OPTIONS =      1761
 0805   SMODE    =      1762
 0806   FAILREG  =      1763
 0807   SFAIL    =      1764
 0808   ERCOUNT  =      1765
 0809   SCOUNT   =      1766
 0810   SKEEP1   =      1771
 0811   SKEEP2   =      1772
 0812   SKEEP3   =      1773
 0813   SKEEP4   =      1774
 0814   SKEEP5   =      1775
 0815   SKEEP6   =      1776
 0816   SKEEP7   EQUALS 1777
L 001  2INTERRUPT TRANSFER ROUTINES
 0001  2         SETLOC 2000
 0002            TS     ARUPT
 0003            XCH    Q
 0004            XCH    QRUPT
 0005  2         TC     T3RUPT
 0006            TS     ARUPT
 0007            XCH    Q
 0008            XCH    QRUPT
 0009  2         TC     ERRUPT
 0010            TS     ARUPT
 0011            XCH    Q
 0012            XCH    QRUPT
 0013  2         TC     T4RUPT          OUTPUT CONTROL.
 0014            TS     ARUPT
 0015            XCH    Q
 0016            XCH    QRUPT
 0017  2         TC     KEYRUPT
 0018            TS     ARUPT
 0019            XCH    Q
 0020            XCH    QRUPT
 0021  2         TC     UPRUPT
 0022            TS     ARUPT
 0023            XCH    Q
 0024            XCH    QRUPT
 0025  2         TC     DOWNRUPT        DOWNLINK.
 0026            INHINT                 GOJAM - PARITY ALARM, POWER FAIL, ETC.
 0027  2         CAF    EXECBANK
 0028            TS     BANKREG
 0029  8         TC     GOPROG
 0030   ERRUPT   TC     ALARM           ***NO ERRUPTS IN SYSTEM 5***
 0031            OCT    01101
 0032  2         TC     NBRESUME
 0033   UPRUPT   CAF    UPBANK          CALL IN BANK WITH UPRUPT PROGRAM.
 0034            XCH    BANKREG
 0035  2         TC     UPRUPTB
 0036   KEYRUPT  CAF    MODEBANK
 0037            XCH    BANKREG
 0038  2         TC     KEYRUPTA
 0039   MODEBANK CADR   KEYRUPTA
L 001  2FIXED-FIXED INTERPRETER SECTION
 0001  2         SETLOC 4000            SECOND HALF OF FIXED-FIXED.
 0002   INTPRET  CCS    Q               ENTRY TO INTERPRETER
 0003  2         TS     ADRLOC
 0004            CS     BANKREG         GET BANKBITS
 0005            TS     BANKSET
 0006  2         TC     +3
 0007   NEWEQUN  CS     BANKSET         HERE FOR NEW EQUATIONS
 0008            TS     BANKREG
 0009            CAF    ONE             SET NEWEQIND TO CALL LOAD
 0010            TS     NEWEQIND
 0011            AD     ADRLOC          C(ADRLOC) = LOCATION LAST ADDRESS USED
 0012            TS     LOC             FOR OPERATORS
 0013            INDEX  A               GET FIRST OP  AND NO. OF OPERATOR WORDS
 0014            CS     0
 0015            AD     MINUS1
 0016            TS     ORDER
 0017            MASK   LOW7            NUMBER OF ADDITIONAL OPERATOR WORDS
 0018            AD     LOC
 0019            TS     ADRLOC          AND SET ADRLOC
 0020            CAF    ZERO            TO SET ORDER TO ZERO
 0021  8         TC     IPROC2
 0022   DANZIG   CCS    NEWJOB          INTERPRETIVE INTERRUPT
 0023  2         TC     CHANG2          CALL IN BANK0 AND SWITCH JOBS
 0024            CS     BANKSET         RESET BANK BITS OF OBJECT PROGRAM
 0025  2         TS     BANKREG
 0026            CCS    ORDER           HAS NEXT OP CODE BEEN PROCESSED
 0027  2         TC     LOWWD           NEXT INSTRUCTION WAS RIGHT-HAND
 0028            INDEX  LOC             PICK UP POSSIBLE NEXT INSTRUCTION
 0029            CS     1
 0030            CCS    A
 0031            TC     IPROC           IT IS - GO PROCESS IT
 0032  2         TC     +1              IN CASE THE FIRST ADDRESS WAS INACTIVE
 0033            INDEX  ADRLOC          END OF EQUATION
 0034            CS     1
 0035            CCS    A               IS THERE ANOTHER ADDRESS
 0036            TC     PUSHDOWN        NO - INSERT IN PUSH-DOWN LIST
 0037  2D34      DEC    34              USED TO DISPATCH STORE OPERATIONS
 0038   STORADR  TS     POLISH          PROCESS STORE ADDRESSES
 0039            TC     INCADR          TO SHOW WE PICKED UP ANOTHER ADDRESS
 0040            CAF    D34             FORM CODES 32 - 34
 0041            AD     MODE
 0042            DOUBLE                 BECAUSE WE HAVE TO PUT IT INTO CYR
 0043            TS     CYR
 0044            CAF    LOW11
 0045            MASK   POLISH          SAVE ERASABLE PART PLUS POSSIBLE TAG
 0046            XCH    POLISH
 0047            AD     NEGIDEX         DIRECT OR INDEXED
 0048            CCS    A
 0049            TC     INDEX           IT IS INDEXED - PRESENT POLISH  OK
 0050   NEGIDEX  OCT    -33777          NEGATIVE OF STORE ADDRESS PREFIX +1
 0051            CS     BIT11
 0052            AD     POLISH
 0053            TS     POLISH
 0054  8         TC     NONINDEX
 0055   IPROC    TS     ORDER           OP CODE WORD WAS PICKED UP BY CCS
 0056            XCH    LOC
 0057            AD     ONE
 0058            XCH    LOC
 0059            MASK   LOW7            SAVE LOW ORDER CODE
 0060   IPROC2   XCH    ORDER           ENTRY FROM NEWEQUN
 0061            INDEX  OPOVF
 0062            MP     BIT8            SHIFT IT RIGHT SEVEN PLACES
 0063  2         TS     CYR             GETTING RID OF THE RIGHT-HAND OP
 0064   JUMPIT   CCS    CYR             LOOK AT LOW-ORDER PREFIX BIT
 0065            TC     ADDRESS         INDEXABLE - DECODE ADDRESS IMMEDIATELY
 0066  2LOADOP   OCT    43              USED BY UNARY LOAD
 0067            CCS    CYR             LOOK AT SECOND ONE HERE
 0068            TC     INCADR          PROCESS MISCELLANEOUS
 0069  2         TC     MISCPROC
 0070   UNAPROC  CCS    NEWEQIND        PROCESS UNARY REQUESTS
 0071  2         TC     UNALOAD         LOAD AN ACCUMULATOR AND RETURN
 0072            CAF    LOW7
 0073            TS     BANKREG         CALL IN BANK 0 WHERE UNARIES ARE
 0074            MASK   CYR             WITHOUT CLOBBERING
 0075            INDEX  A
 0076            TC     UNAJUMP
P0077  2         PROCESS MISCELLANOUS OP CODES.
 0078   MISCPROC INDEX  A
 0079            CS     0               WE KNOW ITS AN ADDRESS
 0080            AD     ONE             TO FIT IN WITH THE POLISH ADDRESS SCHEME
 0081  2         TS     POLISH          SAVE ENTIRE ADDRESS
 0082            CCS    A
 0083            TC     ENDMISC
 0084   42K      OCT    42000
 0085            TC     +2
 0086            TC     MISCREL
 0087            AD     BANKMASK
 0088            CCS    A
 0089            AD     ONE
 0090            TC     +2
 0091  2         TC     MISC2
 0092            AD     42K
 0093            COM
 0094            TS     POLISH
 0095  2         TC     ENDMISC
 0096   MISC2    AD     RELTEST
 0097            CCS    A
 0098            CS     POLISH
 0099            TC     +3
 0100            CS     POLISH
 0101            TC     +2
 0102   MISCREL  AD     FIXLOC
 0103  2         TS     ADDRWD
 0104   ENDMISC  CAF    LOW7
 0105            TS     BANKREG         CALL IN BANK 0
 0106            MASK   CYR
 0107            INDEX  A
 0108  8         TC     NONJUMP
 0109   UNALOAD  CAF    LOW7            PROCESS LOADING REQUESTS FOR UNARY
 0110            MASK   CYR             OPERATIONS. START BY FINDING APPROPRIATE
 0111            CCS    A               MODE
 0112            TC     +3              TMOVE HAS CODE 0
 0113            CS     TWO
 0114            TC     MODESET
 0115            CS     A
 0116            AD     OCT40003
 0117            TS     MODE            SKIP IF SO AND SET A TO -1
 0118            CS     ZERO            IF WE DIDNT SKIP
 0119  2MODESET  TS     MODE
 0120            CAF    NEGSIGN         GET INDEXING BIT FROM UNARY OP CODE IN
 0121            MASK   CYR             CYR
 0122            AD     LOADOP          AD LOAD OPCODE = OCT 43
 0123   60K      DOUBLE                 DOUBLE OP CODE AND DUPLICATE SIGN IN
 0124            XCH    CYR             BIT 1 WHERE IT GOES INTO SIGN OF CYR
 0125            TS     SL              RE-EDIT, NOT BOTHERING ABOUT BITS 8-14
 0126  2         TC     ADDRESS         STANDARD ADDRESS ROUTINE
 0127   ULRET    TS     NEWEQIND        RETURN HERE AFTER LOADING
 0128            XCH    SL
 0129            TS     CYR             RESTORE ORIGINAL OP CODE
 0130  2         TC     UNAPROC +2      AND DISPATCH AS USUAL
 0131   LOWWD    CAF    ZERO            RIGHT HAND OP CODE HAS ALREADY BEEN SET
 0132            XCH    ORDER
 0133  8         TC     JUMPIT -1
 0134   LOAD     TS     NEWEQIND        LOADS FIRST ADDRESS OF NEW EQUATIONS
 0135            INDEX  MODE            TRIGGERS TYPE OF CLEAR-AND-ADD
 0136            TC     +3
 0137            TC     TCA1
 0138            TC     DCA1
 0139  2         TC     VCA1
 0140   LOADRET  CCS    NEWEQIND        IF A UNARY LOAD, THIS IS STILL ONE
 0141  2         TC     ULRET           NO SECOND ADDRESS FOR UNARY LOADS
 0142            CS     BANKSET
 0143  2         TS     BANKREG
 0144   ADDRESS  INDEX  ADRLOC          INDEXABLE ADDRESS ROUTINE
 0145            CS     1               PICK UP WHAT SHOULD BE THE NEXT ADDRESS
 0146            CCS    A
 0147            TC     PUSHUP          NO ADDRESS MEANS TAKE OFF TOP OF STACK
 0148            TC     PUSHUP2         INACTIVE ADDRESS MEANS JUST PUSHUP
 0149            XCH    ADRLOC          SAVE ADDRESS WHILE WE INCREMENT ADRLOC
 0150            AD     ONE
 0151            XCH    ADRLOC          NOW BRING IT BACK
 0152            TS     POLISH
 0153            CAF    NEGSIGN
 0154            MASK   CYR
 0155            CCS    A               INDEXED OR NOT
 0156   BUGMPAC  XCADR  MPAC
 0157            TC     NONINDEX
P0158  2         PROCEDURE FOR INDXED ADDRESSES.
 0159   INDEX    XCH    POLISH
 0160            TS     SR              SR NOW CONTAINS SUB-ADDRESS
 0161            XCH    CYR             SAVE ORDER CODE
 0162            TS     CYL             TO PREPARE FOR RESTORING
 0163            TC     TAG
 0164            INDEX  TAG1
 0165            CS     X1              INDEX REGISTERS ARE SUBTRACTIVE, ALA 70X
 0166            AD     SR
 0167  2         XCH    POLISH          TS WOULD SKIP ON OVERFLOW
 0168            XCH    CYL             RESTORE OP CODE BITS IN CYR
 0169  2         TS     CYR
 0170            CCS    POLISH          SEE IF BIT 15 SHOULD BE ZERO.  IT SHOULD
 0171            TC     NONINDEX        IF THE ADDRESS IS LESS THAN ROUGHLY
 0172            TC     RELTOVAC +1     -1000D.
 0173            TC     +2
 0174  2         TC     RELTOVAC +1     QUICK ACTION ON THESE ZERO CASES.
 0175            AD     RELTEST         (-976D).
 0176            CCS    A
 0177            XCH    POLISH          LESS THAN -1000. GO DIRECTLY TO
 0178  8         TC     SWADDR          SWITCHED-BANK ADDRESS ROUTINE.
 0179   NONINDEX CS     POLISH          GET 14 BIT ADDRESS
 0180            AD     ERASTEST        SEE IF ERASABLE OR NOT
 0181            CCS    A
 0182            AD     RELTEST         YES - SEE IF IN TEMPORARY BLOCK
 0183            TC     TEST2
 0184            AD     STORTEST        NO - SEE IF STORE ADDRESS
 0185            CCS    A
 0186            TC     PUSHUP3         YES - PUSHUP
 0187            TC     +1              IN CASE THE STORED ADDRESS WAS 2000.
 0188            CAF    BIT15
 0189            AD     POLISH
 0190   SWADDR   TS     BANKREG
 0191            TS     POLISH
 0192            MASK   LOW10
 0193            AD     6K
 0194            TS     ADDRWD
 0195  2         TC     JUMP
 0196   TEST2    CCS    A               DOES THIS REFER TO THE TEMPORARY BLOCK
 0197            TC     RELTOVAC        ADDRESS IS RELATIVE TO VAC AREA.
 0198   LOW11    OCT    3777
 0199            XCH    POLISH          YES - FORM ADDRESS
 0200  2         TS     ADDRWD
 0201   JUMP     CAF    THREE           LOOK AT LOW-ORDER 2 BITS IN 5 BIT CODE
 0202            MASK   CYR
 0203            CCS    A               IF ZERO, LOAD NOW AND CALL IN BANK 0
 0204            TC     +3              NON-ZERO - GO ON.
 0205            TC     DPSET           LOAD DP IF NECESSARY
 0206            TS     BANKREG         CALL IN BANK 0
 0207            CAF    LOW7            BITS 6-13 ARE GUARANTEED TO BE ZERO
 0208            MASK   CYR
 0209            INDEX  A
 0210  8         TC     INDJUMP
 0211   PUSHDOWN XCH    PUSHLOC         NO STORE ADDRESS GIVEN - PUSH DOWN
 0212            TS     ADDRWD          STORED IN THE NEXT ENTRY
 0213            INDEX  MODE
 0214            AD     NO.WDS          2 FOR DP, 6 FOR VECTORS, 3 FOR TP
 0215            TS     PUSHLOC
 0216            INDEX  MODE
 0217  2         TC     INDJUMP +34D    DISPATCH TO CORRECT STORE INSTRUCTION
 0218   PUSHUP1  XCH    Q               THE PUSH-UP ROUTINE IS CALLED UNDER THE
 0219            TS     COMPON          FOLLOWING CIRCUMSTANCES:
 0220            CAF    LOW7               1. NO ADDRESS WORD IS FOUND.
 0221            MASK   CYR                2. A STORE ADDRESS IS FOUND.
 0222            AD     -VXSC           OR 3. AN INACTIVE ADDRESS IS FOUND.
 0223            CCS    A               IF THE REQUESTING OPERATION CODE IS VXSC
 0224            TC     PUSHUPOK        THE MODE MUST BE SWITCHED BEFORE PUSHING
 0225   MINUS1   OCT    -1              UP, SINCE VXSC DEMANDS AN ARGUMENT OF
 0226  2         TC     PUSHUPOK        THE OPPOSITE MODE (SCALAR NEEDS VECTOR,
 0227            CCS    MODE            ETC.)
 0228   MINUS2   OCT    -2              UNUSED CCS BRANCHES.
 0229   NEG3     OCT    -3
 0230            CS     FOUR
 0231            AD     NEG2
 0232            TC     +3
 0233   PUSHUPOK INDEX  MODE            DO PUSH-UP OPERATION.
 0234            CS     NO.WDS          2, 3, OR 6.
 0235            AD     PUSHLOC
 0236            TS     PUSHLOC
 0237            TS     ADDRWD          SET ADDRWD AND LEAVE ADDRESS IN A.
 0238  2         TC     COMPON
 0239  2-VXSC    EQUALS MINUS2
 0240  2PUSHUP2  TC     INCADR          SENT HERE ON INACTIVE ADDRESS
 0241   PUSHUP   TC     PUSHUP1         NO ADDRESS GIVEN SENDS US HERE
 0242  2         TC     JUMP            AND JUMP
 0243   PUSHUP3  CCS    ADRLOC          AN UNEXPECTED STORE ADDRESS SENDS US
 0244            TS     ADRLOC          HERE.
 0245  2         TC     PUSHUP
 0246   RELTOVAC XCH    POLISH          ADDRESS WAS LESS THAN 42, SO ADD
 0247            AD     FIXLOC          ADDRESS OF VAC AREA.
 0248  2         TC     JUMP -1
 0249   INCADR   CAF    ONE
 0250            AD     ADRLOC
 0251            TS     ADRLOC
 0252  8         TC     Q
 0253   IJUMP    TC     ITCF            INTERPRETIVE TRANSFER CONTROL
 0254            TC     VXSC1           VECTOR TIMES SCALAR
 0255            TC     VSU1            VECTOR SUBTRACT
 0256            TC     BMN1            BRANCH MINUS
 0257            TC     STZ1            STORE ZERO
 0258            TC     BOVF            BRANCH ON OVERFLOW
 0259            TC     DAD2            DOUBLE PRECISION ADD
 0260            TC     BHIZ1           BRANCH IF MAJOR PART ZERO
 0261            TC     DSU2            DP SUBTRACT
 0262            TC     DBSU            DP BACKWARDS SUBTRACT
 0263            TC     DMP2            DP MULTIPLY
 0264            TC     SHIFTL          TP LEFT SHIFT
 0265            TC     DDV             DP DIVIDE
 0266            TC     BDDV            DP BACKWARDS DIVIDE
 0267            TC     TRAD            TRIPLE PRECISION ADD
 0268            TC     TSLC            TP SHIFT LEFT AND COUNT
 0269            TC     SHIFTR1         TP SHIFT RIGHT
 0270            TC     DMP2            DP MULTIPLY AND THEN ROUND
 0271            TC     TSU1            TP SUBTRACT
 0272            TC     SIGN            AFFIX SIGN OF X TO MPAC
 0273            TC     MXV1            MATRIX TIMES VECTOR
 0274            TC     VXM1            VECTOR TIMES MATRIX
 0275            TC     VAD1            VECTOR ADD
 0276            TC     BZE1            BRANCH ON ZERO
 0277            TC     BVSU1           BACKWARDS VECTOR SUBTRACT
 0278            TC     VSRT1           VECTOR SHIFT RIGHT
 0279            TC     VSLT1           VECTOR SHIFT LEFT
 0280            TC     BPL1            BRANCH POSITIVE
 0281            TC     DOT1            VECTOR DOT PRODUCT
 0282            TC     CROSS1          VECTOR CROSS PRODUCT
 0283  2         TC     VPROJ1          VECTOR PROJECTION
 0284            TC     TTS1
 0285            TC     DTS1            DP TRANSFER TO STORAGE
 0286            TC     VTS1            VECTOR TS
 0287  2         TC     LOAD +1         LOADING
 0288  26K       EQUALS IJUMP +3        BMN STARTS AT LOCATION 6000
 0289  8INDJUMP  EQUALS IJUMP -1
 0290   NONJUMP  TC     EXIT
 0291            TC     AXT             ADDRESS TO INDEX TRUE
 0292            TC     LXA             LOAD INDEX FROM THE ADDRESS
 0293            TC     LXC             LOAD INDEX FROM ADDRESS COMPLEMENTED
 0294            TC     SXA             STORE INDEX IN THE ADDRESS
 0295            TC     XCHX            INDEX REGISTER EXCHANGE
 0296            TC     INCR            INDEX REGISTER INCREMENT
 0297            TC     XAD             INDEX REGISTER ADD FROM ERASABLE
 0298            TC     XSU             INDEX REGISTER SUBTRACT FROM ERASABLE
 0299            TC     AST             ADDRESS TO STEP TRUE
 0300            TC     AXC             ADDRESS TO INDEX COMPLEMENTED
 0301            TC     TIX             TRANSFER ON INDEX
 0302            TC     NOLOAD          LEAVE MPAC (OR VAC) LOADED
 0303            TC     ITA1            TRANSFER ADDRESS
 0304            TC     SWITCHEM        SWITCH AND TEST INSTRUCTIONS
 0305  2         TC     NEXT            LODON AND ITCQ
 0306   UNAJUMP  TC     TMOVE           FOR TP AS WELL
 0307            TC     VMOVE
 0308            TC     UNIT
 0309            TC     ABVAL1          ABVAL
 0310            TC     VSQ             SQUARE OF VECTOR LENGTH
 0311            TC     SSP             ABSOLUTE VALUE OF SCALAR
 0312            TC     ARCSIN1
 0313            TC     ARCCOS1
 0314            TC     SIN1
 0315            TC     COS1
 0316            TC     SQRTS
 0317            TC     SQUARE
 0318            TC     COMP            COMPLEMENT
 0319            TC     DMOVE
 0320            TC     SMOVE
 0321  8         TC     VDEF            VECTOR DEFINE
 0322   THREE    OCT    3
 0323            OCT    2
 0324  2NO.WDS   OCT    6               3, 2, 6 ORDER IMPORTANT FOR PUSH-DOWN.
 0325   POSMAX   OCT    37777           MUST BE 2 LOCATIONS BEFORE NEGMAX
 0326   FIVE     OCT    5
 0327  2LIMITS   EQUALS POSMAX +1       USED BY CDU COUNTER ARITHMETIC PROGRAMS.
 0328   BIT15    OCT    40000
 0329   BIT14    OCT    20000
 0330   BIT13    OCT    10000
 0331   BIT12    OCT    04000
 0332   BIT11    OCT    02000
 0333   BIT10    OCT    01000
 0334   BIT9     OCT    00400
 0335   BIT8     OCT    00200
 0336   BIT7     OCT    00100
 0337   BIT6     OCT    00040
 0338   BIT5     OCT    00020
 0339   BIT4     OCT    00010
 0340   BIT3     OCT    00004
 0341   BIT2     OCT    00002
 0342  2BIT1     OCT    00001
 0343   QUARTER  EQUALS BIT13
 0344   EIGHT    EQUALS BIT4
 0345   ONE      EQUALS BIT1
 0346   ERASTEST EQUALS BIT11
 0347   BUGBITS  EQUALS 5777
 0348   ATSBITS  EQUALS 5777
 0349   NEG2     EQUALS MINUS2
 0350   SIX      EQUALS NO.WDS
 0351   NEG1     EQUALS MINUS1
 0352  2NEGSIGN  EQUALS BIT15
 0353   RELTEST  DEC    -976
 0354   NEG1/2   2DEC   -.5
 0355   POS1/2   2DEC   .5
 0356  8HALF     EQUALS POS1/2
 0357   TCS1     CS     BUF +2          USED BY DMP, ETC
 0358            TS     MPAC +2
 0359            CS     BUF +1
 0360            TS     MPAC +1
 0361            CS     BUF
 0362            TS     MPAC
 0363  2         TC     Q
 0364   TCA1     INDEX  ADDRWD          TRIPLE PRECISION CLEAR AND ADD
 0365            CS     2
 0366            CS     A
 0367  2         TC     +2
 0368   DCA1     XCH    ZERO            DOUBLE PRECISION CLEAR AND ADD
 0369            TS     MPAC +2           (CLEARS MPAC +2)
 0370            INDEX  ADDRWD
 0371            CS     1
 0372            CS     A
 0373            TS     MPAC +1
 0374            INDEX  ADDRWD
 0375            CS     0
 0376            CS     A
 0377            TS     MPAC
 0378  2         TC     LOADRET         PREPARE TO DECODE NEXT ADDRESS
 0379   STORE3   CS     MPAC +2         TRIPLE PRECISION TRANSFER TO STORAGE
 0380            CS     A
 0381            INDEX  ADDRWD
 0382            TS     2
 0383   DTS1     CS     MPAC +1         DOUBLE PRECISION TRANSFER TO STORAGE
 0384            CS     A
 0385            INDEX  ADDRWD
 0386   TSQ      TS     1
 0387            CS     MPAC
 0388   MSIGN    CS     A
 0389            INDEX  ADDRWD
 0390            TS     0
 0391  2NEQRET   TC     NEWEQUN         START NEW EQUATION
 0392  8TTS1     EQUALS STORE3
 0393  9                35W
 0394   DOBR     XCH    POLISH          DOES BRANCHES
 0395  2         TC     DOBR2
 0396   EXIT2    CS     BANKSET         COMPLETE EXIT EXECUTION BY CALLING IN
 0397            TS     BANKREG         BANK OF OBJECT INTERPRETIVE PROGRAM.
 0398  2         TC     ADRLOC
 0399   SWF/F    CS     BANKSET         BRANCHING TEST INSTRUCTION
 0400            TS     BANKREG         RETURNS HERE TO PICK UP BRANCHING ADDRES
 0401            INDEX  ADRLOC
 0402            CAF    0               BRANCH IS ALWAYS TO FIXED.
 0403            AD     NEG1            UNDO YULISH INCREMENT.
 0404  2         AD     BIT15
 0405   DOBR2    TS     BANKREG
 0406            MASK   LOW10
 0407            AD     6K-1
 0408  2         TC     INTPRET +1
 0409   LOW10    OCT    1777
 0410   LOW9     OCT    777
 0411  26K-1     OCT    5777
 0412   VCA1     XCH    Q               VECTOR CLEAR-AND-ADD ROUTINE
 0413            TS     TEM5
 0414            CAF    NEGSIGN
 0415            TC     VECMOVE
 0416  2         TC     TEM5
 0417   VCS1     XCH    Q               DP VECTOR CLEAR-AND-SUBTRACT
 0418            TS     TEM5
 0419            CAF    NOOP
 0420  2         TC     VCA1 +3
 0421   VTS1     XCH    ADDRWD          TRANSFER TO STORAGE
 0422            XCH    VACLOC          EXCHANGE VACLOC AND ADDRWD AND DO AN
 0423            TS     ADDRWD          EFFECTIVE *CLEAR-AND-ADD*.
 0424            CAF    NEGSIGN
 0425            TC     VECMOVE
 0426            XCH    ADDRWD          RESTORE VACLOC
 0427            TS     VACLOC
 0428  8         TC     NEWEQUN         THIS ONLY HAPPENS AT END OF EQUATION
 0429   VECMOVE  TS     TEM2            MOVES A DP VECTOR IN THE FASTEST WAY
 0430            INDEX  ADDRWD          AVAILABLE. USED BY VCA, VCS, AND VTS.
 0431            CS     5
 0432            INDEX  TEM2
 0433            0      0               COM FOR VCA, VTS. NOOP FOR VCS.
 0434            INDEX  VACLOC
 0435  2         TS     5
 0436            INDEX  ADDRWD
 0437            CS     4
 0438            INDEX  TEM2
 0439            0      0
 0440            INDEX  VACLOC
 0441  2         TS     4
 0442            INDEX  ADDRWD
 0443   OCT40003 CS     3               CONSTANT USED BY UNARY LOAD ROUTINE.
 0444            INDEX  TEM2
 0445            0      0
 0446            INDEX  VACLOC
 0447  2         TS     3
 0448            INDEX  ADDRWD
 0449   OCT40002 CS     2
 0450            INDEX  TEM2
 0451            0      0
 0452            INDEX  VACLOC
 0453  2         TS     2
 0454            INDEX  ADDRWD
 0455   CSQ      CS     1               CONSTANT USED BY WAITLIST.
 0456            INDEX  TEM2
 0457            0      0
 0458            INDEX  VACLOC
 0459  2         TS     1
 0460            INDEX  ADDRWD
 0461            CS     0
 0462            INDEX  TEM2
 0463            0      0
 0464            INDEX  VACLOC
 0465  2         TS     0
 0466  8         TC     Q               DONE
 0467   STZ1     CAF    ZERO
 0468            INDEX  ADDRWD
 0469  2         TS     0
 0470   RE-ENTER CS     BANKSET         ROUTINE  SIMILAR TO *DANZIG* EXCEPT THAT
 0471  2         TS     BANKREG         NO PUSHING DOWN IS DONE AT END OF EQUN.
 0472            CCS    ORDER           IT IS USED BY MISCELLANEOUS INSTRUCTIONS
 0473  2         TC     LOWWD           AND BRANCHES WHICH FAILED
 0474            INDEX  LOC             IF WE HAD RETURNED DIRECTLY TO THE MAIN
 0475            CS     1
 0476            CCS    A
 0477            TC     IPROC           IT IS USED BY BRANCH INSTRUCTIONS WHICH
 0478  2NOOP     NOOP                   IN CASE THE FIRST ADDRESS WAS INACTIVE
 0479            INDEX  ADRLOC          SEE IF A LEFT-OVER ADDRESS
 0480            CS     1
 0481            CCS    A
 0482            TC     NEWEQUN         NO - START NEW EQUATION
 0483   LOW7     OCT    177
 0484  2         TC     STORADR         YES - MUST BE STORE ADDRESS
 0485  8STOR1    EQUALS STZ1 +1
 0486   TAG      CCS    CYR             SETS TAG1 ACCORDING TO SIGN BIT IN CYR
 0487            CAF    ZERO
 0488            CCS    A               SKIP NEXT INS WITHOUT CHANGING Q
 0489            CAF    ONE
 0490            AD     FIXLOC          INDEXES AND STEPS IN VAC AREA
 0491            TS     TAG1
 0492  2         TC     Q
 0493  2TCBUF    ADRES  BUF
 0494   DSU2     TC     DPSET           DP SUBTRACT
 0495            TC     ADDTOSUB
 0496  2         TC     DAD2 +1
 0497   DBSU     TC     DPSET
 0498            TC     DACCOM          COMPLEMENT DP ACCUM
 0499  2         TC     DAD2 +1         AND ADD
 0500   MPACCOM  CS     MPAC +2         COMPLEMENT MPAC
 0501            TS     MPAC +2
 0502   DACCOM   CS     MPAC +1
 0503            TS     MPAC +1
 0504            CS     MPAC
 0505            TS     MPAC
 0506  2         TC     Q
 0507   DPSET    CS     ONE             SET UP DP MODE AND LOAD IF NECESSARY
 0508            TS     MODE
 0509            CCS    NEWEQIND
 0510            TC     LOAD
 0511  2         TC     Q
 0512   VECSET   CS     ZERO            SIMILARLY FOR VECTORS
 0513            TS     MODE
 0514            CCS    NEWEQIND
 0515            TC     LOAD
 0516  2         TC     Q
 0517   TPSET    CS     TWO             AND FOR TP
 0518            TS     MODE
 0519            CCS    NEWEQIND
 0520            TC     LOAD
 0521  8         TC     Q
 0522   DAD2     TC     DPSET           DOUBLE PRECISION ADD INSTRUCTION
 0523            CAF    DAD2 +4
 0524            TC     DAD1            PROGRAM USES CLOSED SUBROUTINE DAD1,
 0525  2         TC     INT1            WITH ADDRESSES SET UP IN ADDRWD, TEM2
 0526  2+4       ADRES  MPAC
 0527   TSU1     TC     TPSET           TRIPLE PRECISION SUBTRACT INSTRUCTION
 0528            TC     ADDTOSUB
 0529  2         TC     TRAD +1
 0530   TRAD     TC     TPSET           TRIPLE PRECISION ADD INSTRUCTION
 0531            TC     +2
 0532  2         TC     INT1
 0533   +3       XCH    Q
 0534            TS     TEM5
 0535            CAF    DAD2 +4
 0536            TS     TEM2
 0537            INDEX  A
 0538            XCH    2
 0539            INDEX  ADDRWD
 0540            AD     2
 0541            INDEX  TEM2
 0542            TS     2               AGAIN SKIPPING, AS IN DAD1
 0543            CAF    ZERO
 0544            INDEX  TEM2
 0545            AD     1
 0546  2         TC     DAD1 +3         FINISH IN DAD1
 0547  8         TC     TEM5            AND RETURN
 0548   DAD1     TS     TEM2            DOUBLE PRECISION ADD ROUTINE
 0549            INDEX  TEM2            POLYNOMIAL EVALUATOR ENTERS HERE.
 0550            XCH    1
 0551   +3       INDEX  ADDRWD
 0552            AD     1
 0553            INDEX  TEM2
 0554            TS     1               SKIPS IF OVERFLOW WITH COUNT IN A
 0555            CAF    ZERO            NO OVERFLOW IF HERE
 0556            INDEX  TEM2            ARRIVE HERE WITH 1 OR -1 IN A IF OVERFLO
 0557            AD     0
 0558            INDEX  ADDRWD
 0559            AD     0
 0560            INDEX  TEM2
 0561            TS     0               AND AGAIN SKIP IF OVERFLOW
 0562            TC     Q               EXIT IF NONE
 0563            TS     OVFIND          SAVE ANY OVERFLOW FOR BOV TESTING
 0564  2         TC     Q
 0565   8TO2     TS     TEM8            MOVES THE DP WORD LOCATED AT THE ADDRESS
 0566            INDEX  A               IN A TO THE ADDRESS IN TEM2
 0567            CS     0
 0568            CS     A
 0569            INDEX  TEM2
 0570            TS     0
 0571            INDEX  TEM8
 0572            CS     1
 0573            CS     A
 0574            INDEX  TEM2
 0575            TS     1
 0576  2         TC     Q
 0577   ADDTOSUB XCH    ADDRWD          BY PUTTING THE APPROPRIATE BITS IN
 0578            AD     ATSBITS         ADDRWD, DAD1 DOES A DOUBLE SUBTRACT IN-
 0579            TS     ADDRWD          STEAD OF A DOUBLE ADD.
 0580  8         TC     Q
 0581   DMP2     TC     DPSET           DP MULTIPLY (AND ROUND) ROUTINE
 0582            XCH    ADDRWD
 0583            AD     BUGBITS         MAKE EXENDED CODE ADDRESS.
 0584   DSQ2     TS     TEM4            ENTRY FROM DSQ ROUTINE.
 0585            XCH    DAD2 +4         C(DAD2 +4) = TC MPAC
 0586            TC     DMP1            EXECUTE MULTIPLY AT DMP1, THEN EXIT
 0587            TC     TCS1            VIA TCS1 TO MOVE (BUF TO BUF+2)
A0588  2                                INTO (MPAC TO MPAC+2).
 0589   OCT40020 CS     CYR
 0590            CCS    CYR
 0591   MPACRND  CAF    DAD2 +4         SET UP ROUND SUBROUTINE TO ROUND MPAC.
 0592            TC     PREROUND +1
 0593  2         TC     DANZIG
 0594   SHIFTR1  TC     DPSET           TSRT INSTRUCTION.
 0595            TS     BANKREG         SUBROUTINE IN BANK 0
 0596            TC     TRUE2           GET INTEGER ADDRESS BACK
 0597            TC     SHIFTR -1       WITH DECREMENTED COUNT IN A.
 0598  8         TC     DANZIG
 0599   DMP1     TS     TEM2            GENERAL PURPOSE DP MULTIPLICATION
 0600            INDEX  TEM2            POLYNOMIAL ENTERS HERE.
 0601            CS     1
 0602            TS     OVCTR           -N1 TO OVCTR
 0603            INDEX  TEM4
 0604            MP     1               -M1N1
 0605            XCH    OVCTR           -U(M1N1) TO OVCTR, -N1 TO A
 0606            INDEX  TEM4
 0607            MP     0               -M0N1
 0608            XCH    OVCTR           -U(M0N1) TO OVCTR, -U(M1N1) TO A
 0609            AD     LP              MAYBE INCREMENT -U(M0N1) IN OVCTR
 0610            XCH    BUF +1          -L(M0N1)-U(M1N1) TO BUF+1
 0611            INDEX  TEM2
 0612            CS     0
 0613            TS     BUF +2          -N0 TO BUF+2
 0614            INDEX  TEM4
 0615            MP     1               -M1N0
 0616            XCH    OVCTR           -U(M1N0) TO OVCTR, -U(M0N1) TO A
 0617            XCH    BUF +1          -U(M0N1) TO BUF+1, -L(M0N1)-U(M1N1) TO A
 0618            AD     LP              MAYBE INCREMENT -U(M1N0) IN OVCTR
 0619            XCH    BUF +2          -L(M1N0)-L(M0N1)-U(M1N1) TO BUF+2, -N0 T
 0620  9O A
 0621            INDEX  TEM4
 0622            MP     0               -M0N0
 0623            XCH    OVCTR           -U(M0N0) TO OVCTR, -U(M1N0) TO A
 0624            AD     LP
 0625            XCH    BUF +1
 0626            AD     BUF +1
 0627            XCH    BUF +1
 0628            XCH    OVCTR
 0629            TS     BUF
 0630  2         TC     Q
R0631  8           TIMING:  86 MC +-2  OR 1.032 MS +-0.024
 0632  9                          30 WORDS
 0633   BDDV     TC     DPSET           BACKWARDS DP DIVIDE
 0634            CAF    ONE             SET SWITCH
 0635  2         TC     +2              AND GO ON AS USUAL
 0636   DDV      TC     DPSET           REGULAR DP DIVIDE
 0637            TS     DVSW            DPSET RETURNS WITH 0 IN A
 0638            CAF    LDANZIG         RETURN TO DANZIG
 0639            TS     TEMQ3
 0640            CAF    TCBUF
 0641            TS     TEM2
 0642            XCH    ADDRWD
 0643  2         TC     8TO2            X,X+1 INTO BUF, BUF+1
 0644            CAF    ZERO
 0645            TS     BANKREG         CALL IN BANK 0
 0646  2         TC     DDV0            TO BANK 0 PORTION
 0647   DMP      XCH    Q               DP MULTIPLY ROUTINE WHICH CAN BE CALLED
 0648            TS     TEM5            BY TC DMP, FOLLOWED BY A WORD CONTAINING
 0649            INDEX  A               THE ADDRESS OF THE MULTIPLIER WITH
 0650            CAF    0               BITS IN THE ORDER CODE TO CALL IN MP
 0651            TS     TEM4            IN THE EXTENDED CODE (UNKNOWN AS YET)
 0652            CAF    DAD2 +4
 0653            TC     DMP1
 0654            TC     TCS1
 0655            INDEX  TEM5            TIME IS 120 MC+-2, OR ABOUT 1.44 MS
 0656  2         TC     1               RETURN TO INSTRUCTION AFTER ADDRESS WORD
 0657   DAD      XCH    Q               DP ADD ROUTINE WORKING JUST AS MP ABOVE
 0658            TS     TEM5            HERE, HOWEVER, ONLY *ADRES X* IS NEEDED
 0659            INDEX  A               SINCE AD IS PART OF THE REGULAR CODE
 0660            CAF    0
 0661            TS     ADDRWD
 0662            CAF    DAD2 +4
 0663            TC     DAD1
 0664            INDEX  TEM5
 0665  8         TC     1               TIME IS 48+-2 MC OR 576 MICRO-SEC.
 0666   VACCOM   XCH    Q               COMPLEMENT THE APPROPRIATE VAC
 0667            TS     TEM5
 0668            CS     VACLOC
 0669            COM
 0670            XCH    ADDRWD
 0671            TS     TEM4
 0672  2         TC     VCS1 +2
 0673   VSU1     TC     VECSET          DP VECTOR SUBTRACT
 0674            TC     ADDTOSUB
 0675  2         TC     VAD1 +1         USES VAD ROUTINE WITH SUBS
 0676   BVSU1    TC     VECSET          DP VECTOR BACKWARDS SUBTRACT
 0677            TC     VACCOM          JUST COMPLEMENT VAC
 0678            XCH    TEM4
 0679            TS     ADDRWD
 0680  2         TC     VAD1 +1         AND ADD
 0681   VAD1     TC     VECSET
 0682            XCH    VACLOC          DP VECTOR ADD
 0683            TS     VACLOC
 0684            TC     DAD1
 0685            TC     AD2
 0686            TC     INCRT2
 0687            TC     DAD1
 0688            TC     AD2
 0689            TC     INCRT2
 0690            TC     DAD1
 0691  8         TC     INT1
 0692   DOT1     TC     VECSET          DP DOT PRODUCT ROUTINE
 0693            TC     DOT2
 0694            TC     MPACCOM
 0695   DPEXIT   CS     ONE             CHANGE MODE TO DOUBLE-PRECISION
 0696            TS     MODE
 0697  2         TC     DANZIG
 0698   AD2      XCH    ADDRWD
 0699            AD     TWO
 0700            TS     ADDRWD
 0701  2         TC     Q
 0702   DOT2     XCH    TWO             SUBROUTINE DOT2 COMPUTES THE TRIPLE-
 0703            TS     TEM11
 0704            XCH    TCBUF           SIGN, IN MPAC TO MPAC+2.
 0705            XCH    ADDRWD
 0706            AD     BUGBITS
 0707            TS     TEM4
 0708            XCH    Q
 0709            TS     TEM8
 0710            XCH    VACLOC
 0711            TS     VACLOC
 0712            TC     DMP1
 0713            XCH    BUF
 0714            TS     MPAC
 0715            XCH    BUF +1
 0716            TS     MPAC +1
 0717            XCH    BUF +2
 0718            TS     MPAC +2
 0719            TC     INCRT4
 0720            TC     INCRT2
 0721            TC     DMP1
 0722            TC     TRAD +3
 0723            TC     INCRT4
 0724            XCH    VACLOC
 0725            TS     VACLOC
 0726            AD     FOUR
 0727            TC     DMP1
 0728            TC     TRAD +3
 0729  8         TC     TEM8
 0730   INCRT4   XCH    TEM4
 0731            AD     TEM11
 0732            TS     TEM4
 0733  2         TC     Q
 0734   VXM1     TC     VECSET          DP VECTOR TIMES MATRIX
 0735            CS     ADDRWD
 0736            TS     TEM10
 0737            XCH    TWO
 0738            TS     TEM9
 0739            XCH    SIX
 0740            TC     DOT2 +1
 0741  2         TC     MXV2            REST OF OPERATION USES MXV ROUTINE
 0742   MXV1     TC     VECSET          MATRIX TIMES DP VECTOR
 0743            CS     ADDRWD
 0744            TS     TEM10
 0745            XCH    SIX             PROGRAM USES DOT PRODUCT ROUTINES TO
 0746            TS     TEM9
 0747  2         TC     DOT2
 0748   MXV2     CAF    K2              USES VBUF
 0749            TC     STORDAC
 0750            CS     TEM10
 0751            AD     TEM9
 0752            TS     TEM10
 0753            TS     ADDRWD
 0754  2         TC     DOT2 +2
 0755            CAF    K2 +1
 0756            TC     STORDAC
 0757            XCH    TEM10
 0758            AD     TEM9
 0759            TS     ADDRWD
 0760  8         TC     DOT2 +2
 0761            CAF    K2
 0762            TS     ADDRWD
 0763            AD     FOUR
 0764            TC     STORDAC
 0765            TC     VCA1
 0766  2         TC     DANZIG
 0767   STORDAC  TS     TEM4            SUBROUTINE TO STORE MPAC, MPAC+1 IN
 0768            CS     MPAC            ADDRESSES INDICATED BY C(A) AT ENTRY.
 0769            INDEX  TEM4
 0770            TS     0
 0771            CS     MPAC +1
 0772            INDEX  TEM4
 0773            TS     1
 0774  2         TC     Q
 0775   VXSC1    CCS    NEWEQIND        DP VECTOR TIMES SCALAR
 0776            TC     VECSET          LOAD INSTRUCTION
 0777            CCS    MODE            IF NOT, WHICH MODE ARE WE IN
 0778   SEVEN    OCT    7
 0779  2MINUS13  DEC    -13
 0780  2         TC     VECCHECK
 0781            XCH    ADDRWD
 0782            AD     BUGBITS         TO CALL IN MP
 0783  2         TC     VXSC2
 0784   VECCHECK TC     VCA1            USE ADDRWD TO LOAD VECTOR
 0785  8         CAF    BUGMPAC
 0786   VXSC2    TS     TEM4
 0787            CS     VACLOC
 0788            COM
 0789            TC     DMP1
 0790            TC     PREROUND
 0791            TC     STB
 0792            TC     INCRT2
 0793            TC     DMP1
 0794            TC     ROUND
 0795            TC     STB
 0796            TC     INCRT2
 0797            TC     DMP1
 0798            TC     ROUND
 0799            TC     STB
 0800   ZEROEXIT CS     ZERO            CHANGE MODE TO VECTOR
 0801  2         TC     DPEXIT +1
 0802  2INT1     EQUALS DANZIG
 0803   INCRT2   XCH    TEM2
 0804            AD     TWO
 0805            TS     TEM2
 0806  8         TC     Q
 0807   SHORTMP  XCH    MPAC +2         MULTIPLY THE CONTENTS OF MPAC,MPAC+1,
 0808            EXTEND                 MPAC+2 BY THE SINGLE PRECISION NUMBER
 0809            MP     MPAC +2         ARRIVING IN A.
 0810  2         XCH    MPAC +2
 0811   SHORTMP2 XCH    MPAC +1         FASTER BUT SLOPPIER VERSION FOR DP
 0812            EXTEND
 0813            MP     MPAC +1
 0814            TS     OVCTR
 0815            XCH    LP
 0816            AD     MPAC +2         THE SHORTMP2 RESULT WILL BE OFF IN THE
 0817            XCH    MPAC +2           LAST BIT IF THIS AD OVERFLOWS.
 0818            XCH    MPAC
 0819            EXTEND
 0820            MP     MPAC +1
 0821            XCH    OVCTR
 0822            AD     LP
 0823            XCH    MPAC +1
 0824            XCH    OVCTR           ARGUMENT IN OVCTR UPON EXIT
 0825            TS     MPAC
 0826  2         TC     Q
 0827   PREROUND CAF    TCBUF
 0828  2         TS     TEM8
 0829   ROUND    CAF    ZERO            ROUND THE TRIPLE-PRECISION NUMBER WHOSE
 0830            INDEX  TEM8            ADDRESS IS IN TEM8 TO DOUBLE-PRECISION,
 0831            XCH    2               SETING THE LOWEST ORDER OF THE THREE
 0832            DOUBLE                 WORDS TO ZERO IN THE PROCESS
 0833            TS     OVCTR
 0834  2         TC     Q               DONE IF DOESNT SKIP
 0835            INDEX  TEM8
 0836            AD     1
 0837            INDEX  TEM8
 0838            TS     1
 0839  2         TC     Q
 0840            INDEX  TEM8
 0841            AD     0
 0842            INDEX  TEM8
 0843            TS     0               ANY CARRIES BEYOND THIS POINT ARE
 0844  2         TC     Q               OVERFLOW
 0845            TS     OVFIND
 0846  8         TC     Q
 0847   STB      CS     BUF
 0848            INDEX  TEM2
 0849            TS     0
 0850            CS     BUF +1
 0851            INDEX  TEM2
 0852            TS     1
 0853  2         TC     Q
 0854   K2       0      VBUF
 0855            0      VBUF +2
 0856  2         0      VBUF +4
 0857  2STORTEST EQUALS K2 -2
 0858   SEQ      OCT    2
 0859   ZERO     OCT    0
 0860   FOUR     OCT    4
 0861   TWO      OCT    2
 0862  2NEG0     OCT    -0
 0863   VPROJ1   TC     VECSET          VECTOR PROJECT
 0864            TC     DOT2            LEAVES (VAC.X)VAC IN VAC
 0865            TC     DACCOM
 0866  2         TC     VXSC2 -1        FINISH IN VXSC (USING MPAC)
 0867   CROSS1   TC     VECSET          DP VECTOR CROSS PRODUCT (BOTH WAYS)
 0868            XCH    TCBUF
 0869            XCH    ADDRWD
 0870            AD     BUGBITS         AGAIN FOR MP
 0871            TS     BASE
 0872            AD     TWO             WHERE THE VECTOR X IS THAT ADDRESSED
 0873            TS     TEM4            BY THE ORDER, AND V IS C(VAC).
 0874  8         XCH    TWO
 0875   LUP      TS     IND
 0876            INDEX  IND
 0877            XCH    SEQ
 0878            AD     VACLOC
 0879            TC     DMP1
 0880            INDEX  IND
 0881            XCH    SEQ +2
 0882            AD     K2
 0883            TS     TEM6
 0884            TS     TEM2
 0885            TC     STB
 0886            INDEX  IND
 0887            XCH    SEQ
 0888            AD     BASE
 0889            TS     TEM4
 0890            INDEX  IND
 0891            XCH    SEQ +1
 0892            AD     VACLOC
 0893            TC     DMP1
 0894            XCH    TEM6
 0895            TC     DAD1
 0896            CCS    IND
 0897  2         TC     LUP
 0898   CREXIT   XCH    K2
 0899            TS     ADDRWD
 0900            TC     VCS1            VXV
 0901  8LDANZIG  TC     DANZIG
R0902  2DOUBLE-PRECISION POLYNOMIAL EVALUATION ROUTINE.
R0903  2PROGRAM ENTRY
R0904   L        TC     POLY
R0905                                                                N
R0906   L+1      OCT    -2N             COMPUTES A  + A X + ... + A X , WHERE
R0907                                             0    1           N
R0908   L+2      D.P.   - A             X = C(MPAC).
R0909  2                   0
R0910  2-   -   -   -   -   -   -   -
R0911   L+2+2N   D.P.   - A
R0912  2                   N
R0913  2L+4+2N   NEXT OPERATION
 0914   POLY     CAF    BUGBITS2        CONTAINS XCADR VBUF
 0915            TS     TEM4
 0916            CAF    ZERO            ZERO INTO BUF, BUF+1 TO START POLYLUP
 0917            TS     BUF
 0918  2         TS     BUF +1
 0919            XCH    MPAC            ARGUMENT  X  INTO 6T, 7T
 0920            TS     VBUF            TEMPORARY STORAGE
 0921            XCH    MPAC +1
 0922  2         TS     VBUF +1
 0923            CAF    DAD2 +4         ADDRESS OF MPAC
 0924  2         TS     TEM2
 0925            INDEX  Q               2N  INTO 10T
 0926            CAF    0
 0927            TS     TEM10
 0928            AD     Q               EXIT ADDRESS INTO 11T
 0929            AD     THREE
 0930            TS     TEM9
 0931  8         TC     POLYLUP +3
 0932   POLYLUP  TS     TEM10
 0933  2         TC     DMP1 +1
 0934            XCH    ADDRWD
 0935    +3      AD     NEG2            REDUCE COEFFICIENT INDEX BY 1
 0936            TS     ADDRWD          COEFFICIENT LOC IN ADDRWD FOR USE BY
 0937            TC     TCS1 +2         -BUF,BUF+1 INTO MPAC,MPAC+1
 0938  2         TC     DAD1 +1         - COEFF + (BUF) INTO BUF
 0939            CCS    TEM10
 0940            AD     NEG1            THE AD NEG1 ORDER, -0 WILL BE THE END
 0941  2         TC     POLYLUP
 0942  2BUGBITS2 XCADR  VBUF            USED BY POLY
 0943  8         TC     TEM9            RETURN
 0944   ITCF     CS     BANKSET         ITC - UNCONDITIONAL TRANSFER
 0945            XCH    ADRLOC          PLACE IN QPRET THE POLISH ADDRESS OF
 0946            MASK   LOW10           THE NEXT EQUATION. ITC MUST BE THE LAST
 0947            AD     ADRLOC          NON-BLANK OPERATOR IN AN EQUATION
 0948            AD     ONE
 0949            INDEX  FIXLOC
 0950            TS     QPRET
 0951            CCS    ADDRWD
 0952  2         TC     INTPRET +1      BANKREG IS ALREADY SET
 0953   BOVF     CCS    OVFIND          BRANCH IF OVERFLOW INDICATOR IS ON
 0954            TC     +2              OVFIND CAN BE EITHER -1, 0, OR +1
 0955            TC     DANZIG          IT WAS OFF - DISPATCH NEXT OPERATOR.
 0956            TS     OVFIND          IT WAS ON - SET TO 0 (OFF)
 0957  2         TC     DOBR            AND DO THE BRANCH
 0958   VSLT1    TC     VECSET          DP VECTOR SHIFT LEFT
 0959            TS     BANKREG
 0960  2         TC     VSLT2
 0961   VSRT1    TC     VECSET          DP VECTOR SHIFT RIGHT
 0962            TS     MPAC +1         SET SHIFTING BIT IN MPAC,MPAC+1
 0963            TS     BANKREG         CALL IN BANK ZERO.
 0964            TC     TRUE2           GET INTEGER ADDRESS
 0965            AD     NEG13
 0966            CCS    A
 0967            TC     VSRT3
 0968   NEG14    DEC    -14
 0969            TC     +1
 0970            INDEX  ADDRWD
 0971            CAF    BIT15
 0972            TS     MPAC
 0973  2         TC     VECCHECK +1     FINISH IN VXSC ROUTINE.
 0974   VSRT3    INDEX  A
 0975            CAF    BIT14
 0976            XCH    MPAC +1         WHICH PREVIOUSLY CONTAINED A ZERO
 0977  2         TC     VSRT3 -2
 0979  2         SETLOC 5777            STANDARD LOCATION FOR EXTENDING BITS
 0980   OPOVF    XCADR  0
L 001  2BANK 03 INTERPRETER SECTION
 0001  2         SETLOC 6000
 0002   BMN1     TC     BRANCH          BRANCH MINUS
 0003            TC     RE-ENTER
 0004            TC     RE-ENTER
 0005  2         TC     DOBR
 0006   BPL1     TC     BRANCH          BRANCH PLUS
 0007            TC     DOBR
 0008            TC     DOBR
 0009  2         TC     RE-ENTER
 0010   BZE1     TC     BRANCH          BRANCH ZERO
 0011            TC     RE-ENTER
 0012            TC     DOBR
 0013  2         TC     RE-ENTER
 0014   BHIZ1    CCS    MPAC            BRANCH ON HIGH ORDER ZERO
 0015            TC     RE-ENTER        PNZ
 0016            TC     DOBR
 0017            TC     RE-ENTER
 0018  2         TC     DOBR
 0019   BRANCH   XCH    Q
 0020            TS     BRANCHQ
 0021            CCS    MPAC
 0022            TC     BRANCHQ
 0023            TC     +2
 0024  2         TC     MINUS
 0025            CCS    MPAC +1
 0026            TC     BRANCHQ
 0027            TC     +2
 0028  2         TC     MINUS
 0029            CCS    MPAC +2
 0030            TC     BRANCHQ
 0031            TC     +2
 0032   MINUS    CAF    ONE
 0033            AD     ONE
 0034            AD     BRANCHQ
 0035  8         XAQ
 0036   TRUE2    CS     FIXLOC          RESTORES INTEGER ADDRESSES
 0037            AD     ADDRWD
 0038            TS     ADDRWD
 0039            CCS    A               WE MUST ELIMINATE THE MINUS ZERO CASE
 0040            TC     Q               OK HERE
 0041            TC     CCSHOLE
 0042            TC     +2              IF ADDRESS WAS NEGATIVE
 0043            TC     DANZIG          FAST EXIT FOR ZERO SHIFT COUNTS
 0044            INDEX  MODE            RIGHT SHIFT INSTEAD OF A LEFT ONE
 0045            TC     +3              CCS  FOLLOWED BY ADD LEFT THE COUNT POS.
 0046            TC     SHIFTR1 +3      SO WE NEED ONLY CALL THE APPROPRIATE
 0047            TC     SHIFTR1 +3      SHIFT RIGHT INSTRUCTION.
 0048            CS     ADDRWD          PUT POSITIVE COUNT IN ADDRWD.
 0049            TS     ADDRWD
 0050            AD     NEG1            DECREMENT LIKE CCS BEFORE RETURNING.
 0051  2         TC     VSRT1 +4
 0052   AST      TC     TAG
 0053            CS     POLISH
 0054   SSTORE   INDEX  TAG1
 0055            XCH    40D             STEP REGISTER
 0056  2         TC     RE-ENTER
 0057   AXC      TC     TAG             ADDRESS TO INDEX COMPLEMENTED
 0058            XCH    POLISH
 0059  2         TC     XSTORE
 0060   AXT      TC     TAG
 0061            CS     POLISH
 0062   XSTORE   INDEX  TAG1
 0063            XCH    38D             MAY HAVE OVERFLOWED
 0064  2         TC     RE-ENTER
 0065   LXA      TC     TAG
 0066            INDEX  ADDRWD          MUST BE ERASABLE - NOT NEEDED OTHERWISE
 0067            CS     0
 0068   +3       CS     A
 0069  2         TC     XSTORE
 0070   LXC      TC     TAG             LOAD INDEX FROM ADDRESS COMPLEMENTED
 0071            INDEX  ADDRWD
 0072            CS     0
 0073  2         TC     XSTORE
 0074   SXA      TC     TAG
 0075            INDEX  TAG1
 0076            CS     38D             GET INDEX
 0077            CS     A
 0078  8         TC     STOR1
 0079   TIX      TC     TAG
 0080            INDEX  TAG1            GET APPROPRIATE STEP REGISTER
 0081            CS     40D             STEP REGISTER
 0082            INDEX  TAG1
 0083            AD     38D
 0084            TS     TEM2            TO TEMPORARY
 0085            CCS    A
 0086            XCH    TEM2            DECREMENT INDEX AND BRANCH
 0087            TC     TIXBR
 0088            TC     RE-ENTER        INDEX LEFT ALONE AND NO BRANCH
 0089  2LNOBR    TC     RE-ENTER
 0090   TIXBR    INDEX  TAG1
 0091            TS     38D
 0092            CS     POLISH
 0093  2         TC     DOBR2
 0094   INCR     TC     TAG
 0095            CS     POLISH
 0096            INDEX  TAG1
 0097            AD     38D
 0098  2         TC     XSTORE
 0099   XCHX     TC     TAG
 0100            INDEX  ADDRWD
 0101            XCH    0
 0102            INDEX  TAG1
 0103            XCH    38D
 0104  2         TC     STOR1
 0105   XSU      TC     TAG             INDEX REGISTER SUBTRACT FROM ERASABLE
 0106            INDEX  ADDRWD
 0107            CS     0
 0108  2         TC     INCR +2
 0109   XAD      TC     TAG             INDEX REGISTER ADD FROM ERASABLE
 0110            INDEX  ADDRWD
 0111            CS     0
 0112            COM
 0113  8         TC     INCR +2
 0114   VDEF     CAF    ZERO
 0115            AD     VACLOC          USES MPAC AS V0, PUSHES UP FOR V1, AND
 0116            TS     TEM2            PUSHES UP AGAIN FOR V2. THE RESULTING
 0117            CAF    DAD2 +4         VECTOR IS LEFT IN VAC
 0118            TC     8TO2
 0119            TC     INCRT2
 0120            TC     PUSHUP1
 0121            TC     8TO2
 0122            TC     INCRT2
 0123            TC     PUSHUP1
 0124            TC     8TO2
 0125  2         TC     ZEROEXIT        T0 DECLAIN MO45 IS VECTOR
 0126   ITA1     CCS    CYR
 0127            TC     +6              FOR ITA
 0128            TC     CCSHOLE
 0129            INDEX  ADDRWD          PICK UP ADDRESS
 0130            CS     0
 0131            COM
 0132  2         TC     DOBR2           AND DO THE BRANCH
 0133   +6       INDEX  FIXLOC
 0134            CS     QPRET
 0135  2         TC     SXA +3          COMPLEMENT AND DEPOSIT
 0136   EXIT     CCS    CYR             RETURN TO BASIC
 0137  2         TC     EXIT2           EXIT.
 0138  2         TC     CCSHOLE
 0139            CS     POLISH          HERE TO RETURN TO BASIC AT X
 0140  2         TC     SWCALL
 0141   SIGN     INDEX  ADDRWD          AFFIX SIGN OF X TO MPAC OR VAC
 0142            CCS    0               MUST BE NON-ZERO
 0143            TC     DANZIG
 0144            TC     +2              EXAMINE MINOR PART
 0145  2         TC     COMP            COMPLEMENT VECTOR OR SCALAR.
 0146            INDEX  ADDRWD
 0147            CCS    1
 0148            TC     DANZIG
 0149            TC     DANZIG          NO OPERATION IF C(ADDRWD,ADDRWD+1) = 0
 0150            TC     COMP
 0151  8         TC     DANZIG
 0152   VSQ      CS     VACLOC          TAKE SQUARE OF LENGTH OF VECTOR IN VAC.
 0153            COM
 0154            TS     ADDRWD
 0155  2         TC     DOT1 +1         FINISH IN DOT PRODUCT ROUTINE.
 0156  2         AD     ONE             FROM TRUE2
 0157   SHIFTR   XCH    Q
 0158            TS     TEM5            SHIFT TP MPAC RIGHT ACCORDING TO INTEGER
 0159            CCS    Q               PICK UP COUNT, SUBTRACTING ONE
 0160   +3       AD     NEG13           RETURNS HERE FROM SR14
 0161            CCS    A
 0162            AD     ONE             SHIFT COUNT MORE THAN 14 - DECREMENT BY
 0163            TC     SR14            14 AND EXCHANGE
 0164            TC     +2              REMAINING SHIFT COUNT BETWEEN 1 AND 13
 0165            TC     SR14            MULTIPLES OF 14 END UP HERE
 0166            COM
 0167            INDEX  A               PICK UP PROPER SHIFTING BIT
 0168            CAF    BIT2
 0169            TC     SHORTMP         DO SHIFT BY MULTIPLICATION
 0170  2         TC     TEM5            (TEM5 CONTAINS SQRT RETURN IF SQRT CALL)
 0171   SR14     XCH    MPAC            SAVE REDUCED COUNT
 0172            XCH    MPAC +1
 0173            XCH    MPAC +2
 0174            CAF    ZERO
 0175            XCH    MPAC            NOW BRING IT BACK
 0176            CCS    A               SEE IF REMAINING COUNT IS ZERO
 0177            TC     SHIFTR +3       NON-ZERO - BACK TO SHIFT LOOP
 0178  8         TC     TEM5            FINISHED
 0179   ABVAL1   TC     ABVAL
 0180  2         TC     DPEXIT          MODE IS NOW DP
 0181   ABVAL    XCH    Q               TAKES HALF THE LENGTH OF THE VECTOR IN
 0182            TS     TEM10           VAC
 0183            TC     VSR1            SHIFT VECTOR RIGHT ONE
 0184            TC     DOT2            TAKE THE SQUARE OF ITS LENGTH
 0185            CS     FOUR            STORE SQUARE OF LENGTH IN REGISTERS 28
 0186            AD     VACLOC          AND 29 OF VAC AREA.
 0187            TC     STORDAC
 0188            TC     MPACCOM
 0189            TC     SQRT3           TAKE A TRIPLE-PRECISION SQRT (DP ANSWER)
 0190  2         TC     TEM10           AND EXIT
 0191   VSR1     XCH    Q               SUBROUTINE WHICH SHIFTS VECTOR IN VAC
 0192            TS     TEM9            RIGHT ONE PLACE. USED BY ABVAL AND UNIT
 0193            CAF    FOUR
 0194            AD     VACLOC          USED BY ABVAL AND UNIT
 0195            TC     SR1             VECTOR IS SHIFTED RIGHT SO DOT PRODUCT
 0196            XCH    TEM11           WONT OVERFLOW.
 0197            AD     MINUS2
 0198            TC     SR1
 0199            XCH    TEM11
 0200            AD     MINUS2
 0201            TS     ADDRWD          FOR THE DOT ROUTINE.
 0202  2         TC     SR1             VECTOR IS NOW SHIFTED RIGHT
 0203  2         TC     TEM9
 0204   SSM      TC     BRANCH          SET SIGN OF MPAC,MPAC+1 MINUS. USED BY
 0205            TC     MPACCOM         SIGN INSTRUCTION
 0206            TC     DANZIG
 0207  2         TC     DANZIG
 0208   SSP      TC     BRANCH
 0209            TC     DANZIG
 0210            TC     DANZIG
 0211            TC     MPACCOM
 0212  8         TC     DANZIG
 0213   SQUARE   CAF    BUGMPAC         SQUARE MPAC AND LEAVE RESULT IN MPAC, +2
 0214  2         TC     DSQ2            CONTINUE AS IN DMP.
 0215   COMP     CS     MODE
 0216            DOUBLE
 0217            INDEX  A
 0218            TC     +1
 0219            TC     VACCOM
 0220            TC     DANZIG
 0221            TC     MPACCOM         FOR TP
 0222            TC     DANZIG
 0223  2         TC     -2
 0224   SMOVE    CAF    ZERO
 0225            TS     MPAC +1
 0226  2         TC     DANZIG
 0227   NEXT     CCS    CYR             NEXT AND ITCQ OPERATORS
 0228            CCS    ADRLOC          NEXT - KNOCK DOWN ADRLOC BY ONE
 0229            TC     +4              AND BEGIN NEXT EQUN IMMEDIATELY
 0230            INDEX  FIXLOC          ITCQ - PICK UP QPRET AND BRANCH
 0231            XCH    QPRET
 0232  2         TC     DOBR2
 0233   +4       TS     ADRLOC
 0234            CAF    ONE             TURN ON LOAD INDICATOR
 0235  2         TC     SWLODIND
 0236   NOLOAD   CCS    ADRLOC          NOLOD AND ROUND OPERATORS. DECREMENT
 0237            TS     ADRLOC          ADRLOC SINCE WE SHOULDNT HAVE TAKEN AN
 0238            CCS    CYR             ADDRESS. SEE IF NOLOD OR ROUND
 0239            CAF    ZERO            NOLOD - SET NEWEQIND TO ZERO
 0240            TC     +4
 0241            CS     ONE             MODE IS NOW DP
 0242            TS     MODE
 0243  2         TC     MPACRND         GO ROUND MPAC AND RETURN TO DANZIG
 0244   SWLODIND TS     NEWEQIND
 0245  8         TC     DANZIG
 0246   SL1      XCH    MPAC +2         ROUTINE WHICH SHIFTS TRIPLE ACCUMULATOR
 0247            DOUBLE                 LEFT ONE PLACE. IT IS USED BY TSLT AND
 0248            TS     MPAC +2         TSLC
 0249            CAF    ZERO
 0250            AD     MPAC +1
 0251            AD     MPAC +1
 0252            TS     MPAC +1
 0253            CAF    ZERO
 0254            AD     MPAC
 0255            AD     MPAC
 0256            TS     MPAC
 0257            TC     Q
 0258            TS     OVFIND          SET OVFIND IF ENTIRE WORD OVERFLOWS
 0259  2         TC     Q
 0260   SHIFTL   TC     TRUE2           TP LEFT SHIFT - GET INTEGER ADDRESS
 0261            TC     +3
 0262   LEFTLOOP TS     ADDRWD
 0263            TC     SL1
 0264   +3       CCS    ADDRWD
 0265            TC     LEFTLOOP
 0266  2         TC     DANZIG
 0267   TSLC     CAF    ZERO            NORMALIZATION - START BY SETTING COUNT
 0268            TS     TEM2            TO ZERO
 0269            TC     BRANCH
 0270            TC     +2
 0271  2         TC     SLCANS
 0272   RETRN    CS     MPAC            HERE FOR NON-ZERO
 0273            DOUBLE
 0274            OVSK                   SKIP ON OVERFLOW
 0275            TC     +2              NO OVERFLOW - SHIFT AGAIN
 0276            TC     SLCANS          DONE - WE OVERFLOWED
 0277            XCH    TEM2
 0278            AD     ONE
 0279            TS     TEM2
 0280            TC     SL1             DO THE SHIFT
 0281  2         TC     RETRN           AND LOOP
 0282   SLCANS   CS     TEM2            STORE COMPLEMENT OF COUNT
 0283            INDEX  ADDRWD
 0284            TS     0
 0285  8         TC     DANZIG
 0286   SWITCHEM CS     POLISH          SWITCH AND TEST INSTRUCTIONS.
 0287            TS     ADDRWD          DECOMPOSE ADDRESS INTO SWITCH WORD AND
 0288            MASK   SBITMASK        BIT. MULTIPLES OF 16 ARE EXCLUDED.
 0289            XCH    ADDRWD
 0290            EXTEND
 0291            MP     BIT11
 0292  2         TS     TEM8            0, 1, OR 2.
 0293            INDEX  ADDRWD          PICK UP A 1 IN SPECIFIED SWITCH POS.
 0294            CAF    BIT15 -1        SWITCHES ARE NUMBERED 1 - 15 D.
 0295            TS     TEM4
 0296            INHINT
 0297            INDEX  TEM8
 0298            MASK   STATE           GET BS WHERE B IS BIT AND S IS *STATE*
 0299  2         TS     TEM5             - THE WORD CONTAINING THE 15 SWITCHES
 0300            CCS    CYR             DECIDE WHETHER INST. IS *SWITCH* OR TEST
 0301            TC     INCADR          TO PICK UP NEXT ADDRESS
 0302            TC     +3
 0303            CS     TEM4
 0304  2         TC     SWITCHIT        SWITCH BIT.
 0305            RELINT
 0306            CCS    TEM5            TEST SWITCH
 0307            TC     RE-ENTER        IT WAS ON - DONT BRANCH
 0308            TC     SWF/F           OFF - GO TO FIXED-FIXED TO PICK UP ADR.
 0309  2         TC     RE-ENTER        COMES HERE IF BIT 15 WAS ON
 0310   SWITCHIT INDEX  TEM8            WE DESIRE THE LOGICAL EXCLUSIVE OR OF B
 0311            MASK   STATE
 0312            TS     Q               SET THIS BIT TO 0SO AD IS OR.
 0313            INDEX  TEM8
 0314            CS     STATE
 0315            MASK   TEM4            COMPLEMENT OF SWITCH BIT.
 0316            AD     Q               OR
 0317            INDEX  TEM8
 0318            TS     STATE
 0319            RELINT
 0320  8         TC     RE-ENTER        DONT PUSH-DOWN IF AT END.
 0321   VSLT2    TS     MPAC +1         SET TO ZERO IN CASE OF RIGHT SHIFT.
 0322  2         TC     TRUE2           RETURNS TO CALLER IF COUNT PNZ.
 0323            TC     VSLTEST
 0324   VSLTLOOP TS     ADDRWD
 0325            CAF    ZERO
 0326            AD     VACLOC
 0327            TS     TEM2
 0328            TC     VSL1
 0329            TC     INCRT2
 0330            TC     VSL1
 0331            TC     INCRT2
 0332            TC     VSL1
 0333   VSLTEST  CCS    ADDRWD
 0334            TC     VSLTLOOP
 0335  2         TC     DANZIG
 0336   VSL1     INDEX  TEM2
 0337            XCH    1
 0338            DOUBLE
 0339            INDEX  TEM2
 0340            TS     1
 0341            CAF    ZERO
 0342            INDEX  TEM2
 0343            AD     0
 0344            INDEX  TEM2
 0345            AD     0
 0346            INDEX  TEM2
 0347            TS     0
 0348            TC     Q
 0349            TS     OVFIND
 0350  8         TC     Q
R0351  2DOUBLE-PRECISION SINE-COSINE ROUTINES.
R0352   THESE PROGRAMS ARE ENTERED AND EXIT IN THE INTERPRETIVE MODE, WITH
R0353   THE ARGUMENT IN MPAC AT ENTRY AND THE ANSWER IN MPAC AT EXIT.  THEY
R0354   COMPUTE, RESPECTIVELY, (1/2) COS (PI X)  AND  (1/2) SIN (PI X) WHERE
R0355  2X = C(MPAC) RANGES OVER THE INTERVAL (-1, +1).
R0356   PROGRAM USES THE SERIES
R0357                               3       5       7        9
R0358   (1/2) SIN(PI X) = C X + 4C X + 16C X + 64C X + 256C X .
R0359                      1      3       5       7        9
R0360   WHERE THE C COEFFICIENTS ARE FROM HASTINGS SERIES
R0361                          3     5     7     9
R0362   SIN(PI X/2) = C X + C X + C X + C X + C X .
R0363  2               1     3     5     7     9
 0364   COSINE   XCH    Q               CLOSED COSINE ROUTINE
 0365            TS     TEM8
 0366            TC     TSGNABS         FORM 1/2 - (ABS(X)) AND COMPUTE SINE
 0367            TC     DACCOM+
 0368  2         TC     SINE +2
 0369   SINE     XCH    Q               CLOSED SINE ROUTINE
 0370            TS     TEM8
 0371            TC     PARTSL1         DOUBLE ARGUMENT
 0372            TS     MPAC
 0373            TC     +2              IF DIDNT SKIP
 0374  2         TC     DACCOM          IF SO, WE WANT -SIN(X) = SIN(-X)
 0375            CS     MPAC
 0376            TS     VBUF +2         SAVE NEGATIVE OF ARGUMENT
 0377            TS     TEM2
 0378            DOUBLE
 0379            TS     Q
 0380  2         TC     SN1             IF ABS(X) LESS THAN 1/2
 0381            INDEX  A               CONTAINS +-1
 0382            CS     NEG1/2 +1
 0383            XCH    TEM2
 0384            AD     TEM2
 0385            AD     TEM2            (ADD +-1/2 TWICE TO MAKE +-1.0)
 0386            TS     MPAC
 0387            CS     MPAC +1
 0388            TS     MPAC +1
 0389            CS     MPAC
 0390  8         TS     VBUF +2
 0391   SN1      CS     MPAC +1         SAVE REST OF ARGUMENT
 0392            TS     VBUF +3
 0393            CAF    BUGMPAC         ADDRESS OF MPAC WITH MP BITS
 0394            TS     TEM4
 0395            CAF    DAD2 +4         SQUARE MPAC
 0396            TC     DMP1
 0397  2         TC     TCS1 +2
 0398            TC     POLY
 0399            DEC    8
 0400            2DEC   -0.3926990796          (   C /4)
A0401  2                                            1
 0402            2DEC   +0.6459637111          (  4C /4)
A0403  2                                            3
 0404            2DEC   -0.318758717           ( 16C /4)
A0405  2                                            5
 0406            2DEC   +0.074780249           ( 64C /4)
A0407  2                                            7
 0408            2DEC   -0.009694988           (256C /4)
A0409  2                                            9
 0410            TC     DMP             DMP BY X
 0411            XCADR  VBUF +2
 0412            TC     SL1             AND SHIFT LEFT 2
 0413            TC     SL1
 0414  2         TC     TEM8            DONE
 0415   SIN1     TC     SINE            INTERPRETER LINKAGE
 0416  2         TC     DANZIG
 0417   COS1     TC     COSINE
 0418  8         TC     DANZIG
 0419   ARCSIN   CAF    TCTAG+1         PICK UP ARCSIN BRANCH
 0420            AD     POSMAX          TO FORCE OVERFLOW
 0421  2         OVSK                   SKIP AND RESTORE NON-OVERFLOW
 0422   ARCCOS   CAF    TCEX            SET ARCCOS SWITCH
 0423            XCH    ESCAPE          NO SKIP, PLEASE
 0424            XCH    Q               ONLY HAVE TO SAVE Q IN ONE PLACE
 0425            TS     ARETURN
 0426            TC     TPAGREE         FORCE SIGN AGREEMENT SO WE CAN CHECK
 0427            CCS    A               SIZE OF ARGUMENT (SIGNUM RETURNS IN A).
 0428            TC     ACOSST          POSITIVE
 0429            TC     +2              ARCCOS = PI/2
 0430  2         TC     NEGARGU
 0431            CAF    QUARTER         ARCCOS(0) = .25(2PI).
 0432            TS     MPAC             (MPAC +1 IS ALREADY ZERO).
 0433  2         TC     ESCAPE
 0434   ACOSST   TC     PARTSL1         DOUBLE ARGUMENT
 0435            XCH    MPAC            NO SKIP, BUT EXAMINE ORIGINAL MPAC
 0436            AD     NEG1/2          MUST BE LESS THAN OR EQUAL TO 1/2
 0437            CCS    A
 0438            TC     ABORT           MAJOR PART GREATER THAN 1/2. NOTE THAT
 0439  2         OCT    01301           MPAC+1 IS NOT CHECKED SO A MARGIN EXISTS
 0440            TC     +4              NORMAL CASE
 0441            TS     MPAC            ARGUMENT WAS 1 (SCALED). LEAVE ZERO
 0442            TS     MPAC +1         AS RESULT AND EXIT
 0443  8         TC     ESCAPE
 0444   +4       CS     MPAC +1
 0445            TS     MPAC +1
 0446            TS     B +1
 0447            CS     MPAC
 0448            TS     B
 0449            AD     HALF
 0450            AD     HALF
 0451  2         TS     MPAC            SQRT ARGUMENT IS NOW READY
 0452  2         TC     +6              NORMAL PATH.
 0453            CAF    POSMAX          WE HAVE FALSE OVERFLOW PRESENT AND IT
 0454            TS     MPAC             MUST BE CORRECTED. MAJOR PART WAS ZERO
 0455            AD     MPAC +1          AND MINOR PART PNZ, SO FORM 1.0 - MPAC
 0456            AD     ONE              PROPERLY FOR THIS CASE.
 0457  2         TS     MPAC +1         GUARANTEED NO OVERFLOW.
 0458  2 +6      TC     SQRT2           GO TAKE THE SQUARE ROOT.
 0459            CS     B +1
 0460            XCH    MPAC +1
 0461            TS     B +1
 0462            CS     B
 0463            XCH    MPAC
 0464  8         TS     B
 0465            TC     POLY            EVALUATE HASTINGS POLYNOMIAL/2PI
 0466            DEC    14
 0467            2DEC*   .49999 99920   B-1*      HASTINGS COEFFICIENTS/2PI
 0468            2DEC*  -.06830 89201   B-1*
 0469            2DEC*   .02832 28913   B-1*
 0470            2DEC*  -.01597 09772   B-1*
 0471            2DEC*   .00983 31911   B-1*
 0472            2DEC*  -.00543 93193   B-1*
 0473            2DEC*   .00212 31556   B-1*
 0474            2DEC*  -.00040 18634   B-1*
 0475            TC     DMP             INTERPRETER SUBROUTINE ONLY
 0476            XCADR  B
 0477  2         TC     ESCAPE          GO TO ARCSIN/ARCCOS SWITCH (OR NEGARGU)
 0478   TAGIT    TC     DACCOM+
 0479            TC     ARETURN
 0480   PARTSL1  XCH    MPAC +1         DOES A DOUBLE SHIFT LEFT EXCEPT FOR THE
 0481            DOUBLE                 FINAL TS. USED BY SIN, COS, ASIN, AND
 0482            TS     MPAC +1         ACOS.
 0483            CAF    ZERO
 0484            AD     MPAC
 0485            AD     MPAC
 0486  2         TC     Q               POSSIBLY WITH OVERLOW PRESENT
 0487   NEGARGU  TC     DACCOM          ARCCOS(-X)=PI-ARCCOS(X)
 0488            CAF    TCSUBTR         SET SWITCH TO PERFORM ABOVE
 0489            XCH    ESCAPE
 0490            TS     ESCAPE2         ADDITIONAL SWITCH HERE.
 0491  8         TC     ACOSST
 0492   SUBTR    CS     MPAC
 0493            AD     HALF
 0494            TS     MPAC
 0495            CS     MPAC +1
 0496            TS     MPAC +1
 0497  4         TC     ESCAPE2         THIS IS NOW THE ARCSIN/ARCCOS SWITCH
 0498   TCTAG+1  TC     TAGIT +1
 0499   TCEX     EQUALS TCTAG+1
 0500  2TCSUBTR  TC     SUBTR
 0501   ARCSIN1  TC     ARCSIN
 0502  2         TC     DANZIG
 0503   ARCCOS1  TC     ARCCOS
 0504  2         TC     DANZIG
 0505   DACCOM+  CS     MPAC +1         USED BY SIN-COS AND ARCSIN-ARCCOS
 0506            TS     MPAC +1
 0507            CS     MPAC
 0508            AD     QUARTER
 0509            TS     MPAC
 0510  8         TC     Q
 0511   MBXCH    XCH    BUF             TO EXCHANGE MPAC AND BUF
 0512            XCH    MPAC
 0513            TS     BUF
 0514            XCH    BUF +1
 0515            XCH    MPAC +1
 0516            TS     BUF +1
 0517  2         TC     Q
 0518   DDV0     TS     MPAC +2         SET MPAC+2 TO ZERO TO RESUME DDV
 0519            TC     TSGNABS         SIGN AGGREMENT ETC
 0520            TS     TEM2            SAVE SGN
 0521            TC     MBXCH           SWITCH CONTENTS
 0522            TC     TSGNABS         SAME FOR ARGUMENT
 0523            AD     TEM2
 0524            CCS    A               TO GET SIGN OF RESULT
 0525            TC     +3
 0526            TC     DPDOFLO +1      HERE FOR 0/0 CASE
 0527            TC     +1
 0528            TS     TEM2
 0529            CCS    DVSW
 0530  2         TC     MBXCH           INTERCHANGE OLD DIVISOR AND DIVIDEND
 0531            CS     BUF             CHECK TO SEE IF C(BUF,BUF+1) LESS
 0532            AD     MPAC            THAN C(MPAC,MPAC+1). OVERFLOW CONDITION
 0533            CCS    A               IF NOT
 0534            TC     DDVOK           SCALING OK
 0535            TC     CCSHOLE
 0536            TC     DPDOFLO         TROUBLE HERE
 0537            CS     BUF +1          CHECK MINOR PARTS IF MAJORS EQUAL
 0538            AD     MPAC +1
 0539            CCS    A
 0540            TC     DDVOK
 0541            TC     CCSHOLE
 0542            TC     DPDOFLO         TROUBLE HERE
 0543  2         TC     DPDOFLO         AS WELL AS WHEN C(BUF,BUF+1)=C(MPAC,+1)
 0544   DDVOK    CAF    ZERO
 0545            AD     MPAC
 0546  8         TC     DPDNORT         TO NORMALIZE
 0547   SQRTDIV  XCH    Q               ENTRY FROM SQRT ROUTINE
 0548            TS     TEMQ3
 0549  2         TC     DVSTART
 0550   DPDNORM  XCH    BUF +1
 0551            DOUBLE
 0552            TS     BUF +1
 0553            CAF    ZERO
 0554            AD     BUF
 0555            AD     BUF
 0556            TS     BUF
 0557  2         TC     SL1 +3          TO DOUBLE MPAC
 0558   DPDNORT  TS     CYL             TO LOOK AT BIT 14
 0559            CCS    CYL
 0560            TC     DPDNORM
 0561            TC     +2
 0562            TC     DVSTART
 0563            XCH    BUF +1          HIGH ORDER ZERO
 0564            XCH    BUF
 0565            XCH    MPAC +1         SET MPAC +1 TO ZERO
 0566            TS     MPAC
 0567  8         TC     DPDNORT         AND TRY AGAIN
 0568   DVSTART  XCH    BUF             OK
 0569            INDEX  OPOVF
 0570            DV     MPAC
 0571            TS     OVCTR
 0572            INDEX  OPOVF
 0573            MP     MPAC +1
 0574   -1/2+2   AD     Q               COMPLIMENT OF REMAINDER.
 0575            CS     A
 0576            AD     BUF +1
 0577            OVSK
 0578            TC     +3              IF NOT
 0579            INDEX  OPOVF           IF OVERFLEW
 0580            SU     MPAC
 0581   +3       TS     BUF
 0582            CCS    A
 0583            AD     ONE
 0584            TC     +2
 0585            AD     ONE
 0586   +2       EXTEND                 WE NOW HAVE ABS(CORRECT BUF)
 0587            SU     MPAC
 0588            CCS    A
 0589            AD     ONE
 0590            TC     +2
 0591            TC     +4
 0592   +2       XCH    BUF
 0593            DOUBLE
 0594            CCS    A
 0595   +4       XCH    BUF
 0596            TC     +2
 0597            CS     BUF
 0598            INDEX  OPOVF
 0599  8         DV     MPAC
 0600   DPDSGNT  TS     MPAC +1
 0601            CCS    TEM2
 0602            TC     POSQUOT
 0603            CS     MPAC +1
 0604            TS     MPAC +1
 0605            CS     OVCTR
 0606            TS     MPAC
 0607  2         TC     TEMQ3
 0608   POSQUOT  XCH    OVCTR
 0609  2         TC     -3
 0610   DPDOFLO  CCS    TEM2
 0611            CAF    TWO
 0612            AD     NEG1
 0613            TS     OVFIND
 0614            EXTEND                 SET MPAC = +- POSMAX
 0615            MP     POSMAX
 0616            XCH    LP
 0617            TS     MPAC +1
 0618  8         TC     POSQUOT -2
 0619   TSGNABS  XCH    Q               SIGNUM AND ABSOLUTE VALUE
 0620            TS     TEMQ2
 0621  2         TC     TPAGREE
 0622            CCS    A               TEST SIGNUM
 0623            AD     ONE
 0624  2         TC     TEMQ2
 0625            TC     MPACCOM         COMPLEMENT IF NEGATIVE
 0626            CS     ONE
 0627  2         TC     TEMQ2
 0628   TPAGREE  XCH    Q               FORCE SIGN AGREEMENT IN TP WORD IN MPAC
 0629            TS     TEMQ
 0630            TC     BRANCH
 0631            TC     SGN=+
 0632  2         TC     SGN=0
 0633            CS     POSMAX
 0634            TS     SGNDMAX
 0635            CS     ONE
 0636  2         TC     SGFORCE
 0637   SGN=0    CAF    ZERO
 0638            TS     MPAC
 0639            TS     MPAC +1
 0640            TS     MPAC +2
 0641  2         TC     TEMQ
 0642   SGN=+    CAF    POSMAX
 0643            TS     SGNDMAX
 0644  8         CAF    ONE
 0645   SGFORCE  AD     MPAC +2
 0646            AD     SGNDMAX
 0647            TS     MPAC +2
 0648  2         CAF    ZERO
 0649            AD     MPAC +1
 0650            AD     SGNDMAX
 0651            TS     MPAC +1
 0652  2         CAF    ZERO
 0653            AD     MPAC
 0654            AD     SGNDMAX
 0655            TS     MPAC
 0656   SBITMASK OCT    17
 0657  8         TC     TEMQ
 0658   UNIT     TC     ABVAL           UNIT VECTOR ROUTINE - START BY GETTING
A0659                                   LENGTH
 0660  2         TC     VSR1            LEAVES 1/2 UNIT VECTORS
 0661            CCS    NEWJOB          ALLOW FOR INTERRUPTS
 0662  2         TC     UNITRUPT        SO WE CAN RETURN IN BASIC
 0663   UNITRSM  AD     VACLOC          RETURNS HERE FROM BREAKPOINT IF CALLED.
 0664            TS     ADDRWD
 0665            CAF    TWO
 0666            TS     DVSW            NON-ZERO FOR BACKWARDS DIVIDE
 0667   UNITLOOP TS     COMPON
 0668            CS     MPAC
 0669            CS     A
 0670            INDEX  ADDRWD
 0671            XCH    0               LENGTH TO COMPONENT AND COMPONENT TO BUF
 0672            TS     BUF
 0673            CS     MPAC +1
 0674            CS     A
 0675            INDEX  ADDRWD
 0676            XCH    1
 0677  2         TS     BUF +1
 0678            CAF    +4              CALL BACKWARDS DIVIDE
 0679            TS     TEMQ3
 0680            CAF    ZERO
 0681            TC     DDV0
 0682  2         TC     +1
 0683            XCH    MPAC            RESULT BACK TO COMPONENT BRINGING BACK
 0684            INDEX  ADDRWD          LENGTH
 0685            XCH    0
 0686            TS     MPAC
 0687            XCH    MPAC +1
 0688            INDEX  ADDRWD
 0689            XCH    1
 0690  2         TS     MPAC +1
 0691            TC     AD2             INCREMENT ADDRWD
 0692            CCS    COMPON
 0693            TC     UNITLOOP
 0694            CS     TWO             STORE LENGTH OF ARGUMENT IN REGISTERS 30
 0695            AD     VACLOC
 0696            TS     TEM2            AND 31 OF VAC AREA.
 0697            CAF    DAD2 +4
 0698            TC     8TO2
 0699  8         TC     DANZIG
 0700   UNITRUPT CS     BANKSET         REQUESTS FOR INTERPRETIVE INTERRUPT
 0701            TS     MPAC +2         COME HERE DURING THE UNIT OPERATION.
 0702            XCH    LOC             SINCE WE DESIRE TO RETURN IN BASIC BUT
 0703            INDEX  FIXLOC          BUT STILL SAVE THE INTERPRETER CENTRALS
 0704            TS     30D             (BANKSET AND LOC)
 0705  2         TC     CHANG1
 0706            CS     MPAC +2         ON RETURN, RESTORE AS BEFORE
 0707            TS     BANKSET
 0708            INDEX  FIXLOC
 0709            XCH    30D
 0710            TS     LOC
 0711            CAF    ZERO
 0712            TC     UNITRSM         ENTER UNIT DIVIDE LOOP.
 0713  2MPACSR1  CAF    DAD2 +4
 0714   SR1      TS     TEM11           SHIFTS RIGHT ONE USING ADDRESS IN A
 0715            INDEX  A
 0716            XCH    0
 0717            INDEX  OPOVF
 0718            MP     HALF
 0719            INDEX  TEM11
 0720            TS     0
 0721            INDEX  TEM11
 0722            XCH    1
 0723            TS     SR
 0724            XCH    SR
 0725            AD     LP
 0726            INDEX  TEM11
 0727            TS     1
 0728  8         TC     Q
 0729   SQRT2    CAF    ZERO            ENTRY TO IGNORE C(MPAC+2)
 0730  2         TS     MPAC +2
 0731   SQRT3    XCH    Q               HERE TO TREAT TRIPLE-PRECISION CASES
 0732            TS     TEMQ2
 0733            TC     TPAGREE         FORCE SIGN AGREEMENT
 0734            CCS    A               TEST SIGNUM
 0735            TC     SETNORM         PNZ - OK.
 0736            TC     TEMQ2           FAST EXIT FOR ZERO ARGUMENT
 0737  2         CCS    MPAC            IF ARGUMENT WAS NEGATIVE BUT MAJOR PART
 0738            TC     ABORT           (MPAC IS NEGATIVE) IS ZERO, ANSWER IS
 0739            OCT    01302           TAKEN AS ZERO WITH NO FURTHER ACTION.
 0740            TC     -2              IF NON-ZERO, IT IS ASSUMED A TRANSIENT
A0741  2                                ERROR HAS PRODUCED THE BAD DATA.
 0742            TS     MPAC +1         ARGUMENT NEGATIVE BUT MORE THAN -10-4.
 0743  2         TC     TEMQ2           SET MPAC,+1 TO ZERO AND EXIT.
 0744   SETNORM  TS     ADDRWD          SET NORMALIZATION COUNT TO ZERO
 0745            CS     MPAC
 0746            TS     CYL             WE WILL USE A/2, SO MUST CHECK FOR
 0747            CCS    CYL             NORMALIZATION FIRST
 0748            TC     MPACSR1         NORMALIZED - SHIFT RIGHT ONE.
 0749  2         TC     ARGHI
 0750  2         TC     SRTEST          LESS THAN 1/2 - SEE IF AT LEAST 1/8.
 0751  2         TC     A0=0            MAJOR PART (POSSIBLY MINOR PART) = 0.
 0752   SRTEST   AD     -1/2+2          SEE IF ARG GREATER THAN OR EQUAL TO 1/4.
 0753            CCS    A
 0754            TC     MPACSR1         IT IS - SHIFT RIGHT ONE AND GO TO ARGLO.
 0755  2         TC     ARGLO           (+0 WAS IMPOSSIBLE THIS CCS.)
 0756            TC     SQRTNORM +1     LESS THAN 1/4 - PUT IN EFFECTIVE RIGHT
A0757                                   BY SHIFTING LEFT ONLY ONCE WHEN ADDING
A0758  8                                ONE TO THE RIGHT SHIFT COUNT.
 0759   A0=0     XCH    MPAC +2         MOVE ARGUMENT UP
 0760            XCH    MPAC +1
 0761            XCH    MPAC
 0762            AD     ADDRWD
 0763            AD     SEVEN           INCREASE SHIFT COUNT BY 14/2 = 7
 0764  2         TC     SETNORM
 0765   SQRTNORM TC     SL1
 0766            CAF    ONE             ARGUMENT LESS THAN 1/8, SO SHIFT IT LEFT
 0767            AD     ADDRWD          TWO PLACES AND INCREASE SHIFT COUNT FOR
 0768            TS     ADDRWD          RESULT
 0769            TC     SL1
 0770            TS     CYL
 0771  8         CS     CYL
 0772   NORMTEST CCS    CYL
 0773            CCS    CYL
 0774            TC     SQRTNORM        HERE IF LESS THAN 1/8
 0775  2         TC     ARGHI           HERE IF AT LEAST 1/4, LESS THAN 1/2
 0776   ARGLO    CAF    SLOPELO         HERE IF AT LEAST 1/8, LESS THAN 1/4
 0777            INDEX  OPOVF
 0778            MP     MPAC
 0779            AD     BIASLO          X0/2 = .8324(A0/2) + .2974/2
 0780  2         TC     ARGHI +4
 0781   SLOPELO  DEC    .8324
 0782   BIASLO   DEC    .2974 B-1
 0783   SLOPEHI  DEC    .5884
 0784  2BIASHI   DEC    .4192 B-1
 0785   ARGHI    CAF    SLOPEHI
 0786            INDEX  OPOVF
 0787            MP     MPAC
 0788            AD     BIASHI
 0789   +4       XCH    MPAC            X0/2 TO MPAC
 0790            TS     BUF             A0/2 TO BUF
 0791            TS     TEM2            SET UP POSITIVE QUOTIENT SIGNAL AND
 0792            CAF    ZERO
 0793            XCH    MPAC +1         ZERO LOW-ORDER DIVIDEND FOR DP DIVIDE
 0794            TS     BUF +1          A1/2 TO BUF+1. A2 NOW DISCARDED
 0795            CS     BUF
 0796            INDEX  OPOVF
 0797            DV     MPAC            -(A0/2)/(X0/2).
 0798            TS     SR
 0799            CS     SR
 0800            AD     MPAC            X1 IS GOOD TO 14 BITS
 0801            TS     MPAC            X1 = X0/2 + ((A0/2)/(X0/2))/2
 0802            TS     TEM3            SAVE X1 FOR ADDITION
 0803            TC     SQRTDIV         GO TO FORM DP QUOTIENT OF A0/2, A1/2
 0804            XCH    TEM3            OVER X1, 0. RESULT IN MPAC, MPAC +1
 0805            INDEX  OPOVF
 0806            MP     HALF
 0807            AD     MPAC
 0808  8         TS     OVCTR           AND MAYBE SKIP, IF ARG WAS NEAR POSMAX
 0809            TC     +4              IF NO OVERFLOW
 0810            CAF    POSMAX
 0811            TS     MPAC +1
 0812  2         TC     +5
 0813   +4       XCH    LP              FOR NORMAL CASES
 0814            AD     MPAC +1         ABOVE AND X1/2
 0815            XCH    MPAC +1
 0816            XCH    OVCTR
 0817  2+5       TS     MPAC
 0818            CAF    ZERO            ZERO MPAC+2 SO SHIFT LEFT MAKES SENSE.
 0819  2         TS     MPAC +2
 0820            CCS    ADDRWD          RE-NORMALIZE IF COUNT NON-ZERO
 0821            TC     SHIFTR +3       FITS IN WITH MAIN SHIFT LOOP
 0822  2         TC     TEMQ2           NO RE-SCALING REQUIRED
 0823   SQRTS    CS     MODE            INTERPRETER LINKAGE
 0824            DOUBLE                 TAKE APPROPRIATE SQRT
 0825            INDEX  A
 0826  2         TC     -1
 0827            TC     SQRT2           FOR DP
 0828  2         TC     DANZIG
 0829            TC     SQRT3
 0830  2         TC     DANZIG
 0831   NEG13    EQUALS MINUS13
 0832   DMOVE    EQUALS DANZIG          LOADING ONLY
 0833   VMOVE    EQUALS DANZIG
 0834   TMOVE    CS     TWO             SET MODE TO TRIPLE FOR TP OPERATIONS
 0835            TC     DPEXIT +1
L 001  2EXECUTIVE
R0001   EXECUTIVE PROGRAMS
R0002  4--------- --------
 0003            BANK   1
 0004   FINDVAC  TS     NEWPRIO         PROGRAM TO FIND AN AVAILABLE VAC
 0005            XCH    Q
 0006            TC     EXECCOM         COMMON FF EXECUTIVE SUBROUTINE.
 0007  2         TC     FINDVAC2        OFF TO EXECUTIVE BANK.
 0008   NOVAC    TS     NEWPRIO         ENTRY EXCLUSIVELY FOR BASIC JOBS NOT
 0009            XCH    Q               REQUIRING A VAC AREA.
 0010            TC     EXECCOM         COMMON FF EXECUTIVE SUBROUTINE.
 0011            CAF    ZERO            ZERO PD FIELD IN PUSHLOC.
 0012            TS     EXECTEM3
 0013  2         TC     NOVAC2
 0014   JOBWAKE  TS     EXECTEM2        ENTRY HERE TO RE-ACTIVATE A SLEEPING JOB
 0015            CCS    Q               RETURN ADDRESS - 1 TO WTEXIT.
 0016            TS     WTEXIT          SHARES FINAL PORTION OF FINDVAC, NOVAC.
 0017            TC     EXECSW          COMMON EXEC BANK-SWITCH SUBROUTINE.
 0018  2         TC     JOBWAKE2
 0019   EXECCOM  TS     WTEXIT          EXIT ADDRESS
 0020            INDEX  A               PICK UP JOB OR TASK ADDRESS.
 0021            CAF    0                 (USED BY FINDVAC, NOVAC, AND WAITLIST)
 0022  2         TS     EXECTEM2
 0023   EXECSW   CAF    EXECBANK
 0024            XCH    BANKREG         CALL IN EXEC BANK, SAVING RETURN.
 0025            TS     EXECTEM1
 0026  2         TC     Q
 0027  2EXECBANK CADR   FINDVAC2
 0028   FOUNDVAC TS     BANKREG         COMES HERE TO RETURN FROM FINDVAC,
 0029            INDEX  WTEXIT          NOVAC, OR JOBWAKE.
 0030            TC     1
P0031  2         CALLS TO FINDVAC BEGIN HERE, SNATCHING AN AVAILABLE VAC AREA.
 0032  2         SETLOC 10000           EXEC/WAITLIST BANK.
 0033  2SLAPB    TC     SLAP1
 0034  2KEYRUPTC TC     KEYRUPT1        STANDARD LOC. DONT MOVE
 0035  2MODROUTB TC     MODROUT         STANDARD LOC. DONT MOVE
 0036  2SVCT3    TC     SVCT3X          STANDARD LOC.
 0037  2FINDVAC2 CCS    VAC1USE         C(VACIUSE) =  TC VACIUSE  IF VACI IS
 0038            TC     FV1             AVAILABLE, OR +0 IF IT IS IN USE.
 0039            CCS    VAC2USE
 0040            TC     FV1             THE FIRST CCS WITH +0 JUMPS TO THE
 0041            CCS    VAC3USE           CORRESPONDING TC ORDER.
 0042            TC     FV1
 0043            CCS    VAC4USE
 0044            TC     FV1
 0045            CCS    VAC5USE
 0046  2         TC     FV1
 0047            TC     ABORT           NO VAC AREAS AVAILABLE.
 0048  2         OCT    01201
 0049   FV1      AD     TWO             TO FORM ADDRESS OF ASSIGNED VAC AREA.
 0050            TS     EXECTEM3
 0051            AD     NEWPRIO         )  STORE ADDRESS OF VACI IN LOW-ORDER
 0052  2         TS     NEWPRIO         )    9 BITS OF NEWPRIO.
 0053            CAF    ZERO            )
 0054            INDEX  EXECTEM3        )  STORE +0 IN VACIUSE, INDICATING USE.
 0055  2         TS     0  -1           )
 0056   NOVAC2   CAF    LASTADR         RELATIVE ADDRESS OF LAST REGISTER SET.
 0057            TS     LOCCTR
 0058            CCS    A
 0059  2         TC     +5              PNZ AND -0 ONLY.
 0060   12BITSOK CS     EXECTEM2        COMES HERE IF JOB ADDRESS LESS THAN 6K.
 0061  2         TC     LOCSET
 0062            TC     ABORT           NO REGISTER SETS AVAILABLE.
 0063  2         OCT    01202
 0064    +5      INDEX  LOCCTR          THIS LOOP FINDS THE FIRST AVAILABLE
 0065            CCS    PRIORITY          STORAGE AREA FOR CORE REGISTERS FOR
 0066            TC     NOVAC3          THE NEW JOB.
 0067   LASTADR  DEC    56              EIGHT SETS OF EIGHT REGISTERS.
 0068            TC     NOVAC3          NNZ MEANS JOB ASLEEP HERE.
P0069  2          NOW THAT REGISTER SETS HAVE BEEN FOUND FOR THE NEW JOB, INITIA
 0070  9LIZE THEM AND SET NEWJOB IF CALLED FOR.
 0071   CORSW    INDEX  LOCCTR          (COMES HERE WITH C(A) = 0). TURN OFF OVF
 0072  2         TS     OVFIND
 0073            AD     NEWPRIO         SET UP PRIORITY FOR NEW JOB.
 0074   JOBWAKE4 INDEX  LOCCTR          JOB WAKING ENTERS HERE TO FINISH UP.
 0075            TS     PRIORITY        STORE NEW PRIORITY
 0076            CAF    BANKMASK
 0077            MASK   EXECTEM2
 0078            AD     EXECTEM3        PUSHLOC
 0079            INDEX  LOCCTR
 0080  2         TS     PUSHLOC
 0081            CAF    EXEC70K         CREATE PROPER 12 BIT ADDRESS.
 0082            MASK   EXECTEM2        SEE IF HIGH THREE BITS ZERO.
 0083            CCS    A
 0084            TC     +2              NEEDS SPECIAL TREATMENT IF C(A) NOT ZERO
 0085  2         TC     12BITSOK
 0086            XCH    EXECTEM2
 0087            MASK   LOW10
 0088            AD     6K
 0089            COM
 0090   LOCSET   INDEX  LOCCTR
 0091  2         TS     LOC
 0092            INDEX  NEWJOB
 0093            CS     PRIORITY        TEST WHETHER NEW JOB HAS HIGHER
 0094            AD     NEWPRIO         PRIORITY THAN PREVIOUS HIGHEST
 0095            CCS    A
 0096            CS     LOCCTR          NEW JOB HAS HIGHER PRIORITY.
 0097  2         TC     NEWHIGH         SET NEWJOB, LEAVING LOCCTR UNCHANGED.
 0098            TC     +1              -0 IF PRIORITIES = AND BOTH ARE NOVACS.
 0099   NOWAKE2  XCH    EXECTEM1
 0100  2ENDFIND  TC     FOUNDVAC
 0101   NEWHIGH  COM                    SET NEWJOB AND RETURN TO CALLER.
 0102            TS     NEWJOB
 0103  2         TC     ENDFIND -1
 0104   NOVAC3   CS     EIGHT           COMES HERE TO EXAMINE NEXT REGISTER SET.
 0105            AD     LOCCTR
 0106            TC     NOVAC2 +1
P0107  2         THE  JOBWAKE  ROUTINE REACTIVES A SLEEPING JOB, SETTING IT TO B
 0108  9EGIN AT THE GIVEN WAKE ADDRESS.
 0109   JOBWAKE2 CAF    LASTADR         BEGIN SEARCH FOR REGISTER SET CONTAINING
 0110            TS     LOCCTR          SLEEPING JOB. WAKE ADDRESS IS IN  LOC IN
 0111            CCS    A               CADR FORM, AS PLACED THERE BY  JOBSLEEP.
 0112            INDEX  LOCCTR          PNZ AND -0 ONLY. SEE IF THIS JOB ASLEEP.
 0113            CCS    PRIORITY        THIS CCS CANT GO TO  TC NOWAKE  .
 0114  2         TC     JOBWAKE3        PNZ - ACTIVE JOB PRESENT. +0 IMPOSSIBLE.
 0115  2         TC     NOWAKE          ALARM - SLEEPING JOB NOT FOUND.
 0116            TC     +2              INACTIVE JOB FOUND.
 0117  2         TC     JOBWAKE3        -0 - NOT IN USE.
 0118    +2      CS     EXECTEM2        SEE IF THIS IS THE DESIRED SLEEPING JOB.
 0119            INDEX  LOCCTR
 0120            AD     LOC
 0121            CCS    A
 0122            TC     JOBWAKE3        SEARCH NEXT SET IF NOT AT END.
 0123            TC     CCSHOLE
 0124  2         TC     JOBWAKE3
 0125            CAF    LOW10           SET UP EXECTEM3 AND PRIORITY SO WE CAN
 0126            INDEX  LOCCTR          FINISH AT STANDARD  CORSW  .
 0127            MASK   PUSHLOC         PROTECT PD SETTING.
 0128  2         TS     EXECTEM3
 0129            INDEX  LOCCTR          RE-COMPLEMENT PRIORITY AND FINISH UP.
 0130            CS     PRIORITY
 0131            TS     NEWPRIO
 0132  2         TC     JOBWAKE4
 0133   JOBWAKE3 CS     EIGHT           ADVANCE TO NEXT REGISTER SET.
 0134            AD     LOCCTR
 0135  2         TC     JOBWAKE2 +1
 0136   NOWAKE   TS     LOCCTR          SET LOCCTR = +0 TO SHOW NO JOB WAS
 0137            TC     NOWAKE2          AWAKENED.
P0138   A NEW JOB, OF HIGHER PRIORITY THAN THE PRESENT ONE, CAUSES THE RELA-
R0139   TIVE ADDRESS (9, 18, ..., 63) OF THE NEW JOB CORE REGISTERS TO BE
R0140   PLACED IN REGISTER  NEWJOB , WHERE IT IS TESTED BY THE INTERPRETER.
R0141   THE RESULTING BRANCH TO CHANJOB, BELOW, CAUSES A TRADE BETWEEN THE
R0142  2CORE REGISTERS OF THE PRESENT AND NEW JOBS.
 0143  2         SETLOC FOUNDVAC +3
 0144   CHANG1   INHINT                 BASIC JOBS COME HERE WHEN C(NEWJOB)
 0145            CAF    EXECBANK        NON-ZERO. START BY CALLING IN EXECUTIVE
 0146            XCH    BANKREG         BANK AND SAVING RETURN BANK CODE.
 0147            COM
 0148            TS     BANKSET
 0149            XCH    PUSHLOC         BLANK OUT THE HIGH-ORDER 4 BITS IN
 0150            MASK   LOW10           PUSHLOC SO THE BANK BITS CAN BE PACKED
 0151            TS     PUSHLOC         WITH IT
 0152            CS     Q               FOR RETURN, SHOWING THIS WAS A BASIC JOB
 0153  2         TC     CHANJOB         OFF TO BANK 0
 0154   CHANG2   CCS    NEWEQIND        INTERPRETIVE INTERRUPTS START HERE,
 0155  2         TC     Q               PROVIDED THE LOAD INDICATOR ISNT ON
 0156            INHINT
 0157            CAF    EXECBANK        CALL IN EXECUTIVE BANK.
 0158            TS     BANKREG
 0159            XCH    LOC
 0160  8         TC     CHANJOB         WITH C(A) PNZ, SHOWING WE WERE IN INTERP
 0161  9RETER
 0162            SETLOC NOWAKE +2
 0163   CHANJOB  INDEX  NEWJOB          TO BEGIN SWAP OF CORE REGISTERS
 0164            XCH    LOC
 0165  2         TS     LOC             SAVE PROPER 12 BIT ADDRESS
 0166            XCH    PRIORITY
 0167            INDEX  NEWJOB
 0168            XCH    PRIORITY
 0169            TS     PRIORITY
 0170            MASK   LOW9            TO GET FIXLOC
 0171            TS     FIXLOC
 0172            AD     BIT6            SET UP VACLOC ( = FIXLOC + 32D )
 0173  2         TS     VACLOC
 0174            CS     BANKSET         SAVE BANK
 0175            AD     PUSHLOC         AND PUSHLOC IN SAME WORD
 0176            INDEX  NEWJOB
 0177            XCH    PUSHLOC
 0178            TS     PUSHLOC
 0179            MASK   LOW10
 0180            XCH    PUSHLOC
 0181            COM
 0182            AD     PUSHLOC         WE NOW HAVE COMPLEMNT OF BANK BITS
 0183  2         TS     BANKSET
 0184            CS     ADRLOC          SAVE MODE AND COMPLEMENT OF ADRLOC IN
 0185            DOUBLE                 SAME WORD.  ADRLOC MUST BE SHIFTED 2
 0186            DOUBLE                 PLACES TO MAKE ROOM FOR MODE
 0187            AD     MODE            -0, -1, OR -2
 0188            INDEX  NEWJOB
 0189            XCH    ADRLOC
 0190            TS     SR
 0191            MASK   THREE           SAVE LOW 2 BITS
 0192            AD     NEG3            THIS RESULTS IN EITHER -0, -1, OR -2
 0193            TS     MODE
 0194            CS     SR
 0195            CS     SR
 0196  8         TS     ADRLOC
 0197            CCS    OVFIND          SAVE C(ORDER) POSITIVE IF C(OVFIND) = 0
 0198            TC     +2              AND NEGATIVE OTHERWISE
 0199            TC     +3
 0200            CS     ORDER
 0201            TC     +2
 0202            XCH    ORDER
 0203            INDEX  NEWJOB
 0204            XCH    OVFIND
 0205            TS     ORDER
 0206            CCS    A               DETERMINE NEW SETTING OF OVFIND
 0207            CAF    ZERO            TO ZERO
 0208            TC     OVFSET
 0209            CS     ORDER           ORDER WAS NEGATIVE, MAKE IT POSITIVE
 0210            TS     ORDER
 0211            CAF    ONE             TO SET OVFIND
 0212  2OVFSET   TS     OVFIND
 0213            XCH    MPAC            TRADE C(MPAC TO MPAC+2)
 0214            INDEX  NEWJOB
 0215            XCH    MPAC
 0216            TS     MPAC
 0217            XCH    MPAC +1
 0218            INDEX  NEWJOB
 0219            XCH    MPAC +1
 0220            TS     MPAC +1
 0221            XCH    MPAC +2
 0222            INDEX  NEWJOB
 0223            XCH    MPAC +2
 0224  2         TS     MPAC +2
 0225            CAF    ZERO
 0226            TS     NEWEQIND        MAKE SURE LOAD INDICATOR OFF.
 0227   SETNJ    TS     NEWJOB
 0228            RELINT                 ENABLE INTERRUPT
 0229            CCS    LOC             C(LOC) PNZ FOR INTERPRETIVE JOBS,
 0230            CAF    ZERO
 0231            TC     DANZIG +2       RETURN TO INTERPRETER
 0232            AD     ONE             GET ABS(LOC) AND RETURN TO BASIC
 0233            TS     ADDRWD
 0234            CS     BANKSET         GET DESIRED BANKBITS
 0235  2ENDCHANG TC     BASICALL
 0236  2         SETLOC CHANG2 +7D      TAKE UP WHERE WE LEFT OFF IN FIXED-FIXED
 0237   BASICALL TS     BANKREG
 0238  8         TC     ADDRWD
 0239   ENDOFJOB CAF    EXECBANK        NORMAL ENDJOB ENTRY.
 0240            TS     BANKREG
 0241  2         TC     ENDJOB1
 0242   JOBSLEEP TS     LOC             ENTRY HERE TO DE-ACTIVE THIS JOB.
 0243            CAF    EXECBANK        LOC IS SET TO THE AWAKENING ADDRESS
 0244            TS     BANKREG         SO THE SUBSEQUENT JOBWAKE CAN FIND
 0245  2         TC     JOBSLP1         THE PROPER REGISTER SET.
 0246  2         SETLOC ENDCHANG +1
 0247   ENDJOB1  INHINT                 INTERPRETIVE JOBS FINISH WITH RTB
 0248            CS     ZERO            TO ENDJOB1
 0249            TS     BUF +1          ENDJOB USES BUF, BUF +1, AND BUF +2.
 0250            XCH    PRIORITY
 0251            MASK   LOW9            RESTORE AVAILABILITY OF VACI BY SETTING
 0252            CCS    A               C(VACIUSE) NON-ZERO
 0253            INDEX  A
 0254  2         TS     0
 0255  2         TC     EJSCAN          ENDJOB NEED NOT EXAMINE FIRST REG. SET.
 0256   JOBSLP1  INHINT                 FINISH JOB SLEEP AND START ENDJOB-TYPE
 0257            CS     PRIORITY        SCAN. COMPLEMENTED PRIORITY REGISTER
 0258            TS     PRIORITY        SHOWS JOB IS ASLEEP.
 0259            CS     ZERO            INITIALIZE SEARCH FOR HIGHEST PRIORITY.
 0260            TS     BUF +1
P0261  2         SCAN FOR THE ACTIVE JOB OF HIGHEST PRIORITY.
 0262   EJSCAN   CCS    PRIORITY +8D    EACH PRIORITY REGISTER (PRIORITY +8N)
 0263            TC     EJ1             IS SCANNED. ITS CONTENTS ARE EITHER
 0264            TC     CCSHOLE
 0265  2         TC     +1                 2. NNZ - AN INACTIVE PRIORITY NUMBER.
 0266            CCS    PRIORITY +16D   OR 3. -0 - NOT IN USE.
 0267            TC     EJ1             IF PNZ, CONTROL IS TRANSFERRED TO EJ1
 0268            TC     CCSHOLE
 0269  2         TC     +1              PARED WITH THE PREVIOUS HIGHEST
 0270            CCS    PRIORITY +24D   PRIORITY FOUND. THE CONTENTS OF Q
 0271            TC     EJ1             SERVE TO LOCATE THE CCS WHICH WAS
 0272            TC     CCSHOLE
 0273  2         TC     +1              NEWJOB IS SET TO THE RELATIVE ADDRESS
 0274            CCS    PRIORITY +32D   OF THE REGISTER SET WITH THE HIGHTEST
 0275            TC     EJ1             ACTIVE PRIORITY AT THE END OF THE SCAN.
 0276            TC     CCSHOLE
 0277  2         TC     +1
 0278            CCS    PRIORITY +40D
 0279            TC     EJ1
 0280   EXEC70K  OCT    70000
 0281  2         TC     +1
 0282            CCS    PRIORITY +48D
 0283            TC     EJ1
 0284   -CCSPR  -CCS    PRIORITY
 0285  2         TC     +1
 0286            CCS    PRIORITY +56D
 0287            TC     EJ1
 0288            TC     CCSHOLE
 0289  8         TC     +1
 0290            CCS    BUF             IF BUF = 0, THE SCAN WAS PART OF
 0291            TC     +2              A PRIORITY CHANGE IN WHICH THE NEW
 0292  2         TC     SETNJ           PRIORITY IS HIGHEST. GO SET NEWJOB = 0.
 0293            INDEX  A               PICK UP CCS INSTRUCTION TO GET NEWJOB
 0294            CAF    0 -1            SELECT CCS INSTRUCTION.
 0295            AD     -CCSPR
 0296            TS     NEWJOB          RELATIVE ADDRESS ONLY.
 0297            XCH    LOC             (NO MEANING FOR ENDOFJOB).
 0298  4         TC     CHANJOB
 0299   EJ1      TS     BUF +2          STORE NEW PRIORITY
 0300            AD     BUF +1          - OLD PRIORITY
 0301            CCS    A
 0302            XCH    Q               IF NEW PRIORITY IS LARGER
 0303            TC     EJ2
 0304            NOOP                   IF OLD PRIORITY IS LARGER
 0305            INDEX  Q                 OR EQUAL
 0306  2         TC     2
 0307   EJ2      TS     BUF             SAVE C(Q) TO LOCATE HIGHEST PRIORITY
 0308            CS     BUF +2            JOB AT END OF SCAN.
 0309            TS     BUF +1
 0310            INDEX  BUF
 0311            TC     2
P0312            THE FOLLOWING ROUTINE IS AVAILABLE TO CHANGE THE PRIORITY OF A
 0313  9JOB WHILE IT IS RUNNING UNDER EXECUTIVE
R0314  2CONTROL (IE, IN CORE SET 0). CALLING SEQUENCE IS AS FOLLOWS (NO INHINT N
 0315  9ECESSARY):
A0316            CAF    NEWPRIO         PRIORITY IN BITS 10-14 - ZERO ELSEWHERE.
A0317  2L        TC     PRIOCHNG
R0318   RETURN IS TO L+1 IMMEDIATELY UNLESS A JOB OF STILL HIGHER PRIORITY IS PR
 0319  9ESENT, IN WHICH CASE IT GOES TO CHANJOB
R0320  4BEFORE RETURNING.
 0321  2         SETLOC JOBSLEEP +4
 0322   PRIOCHNG INHINT                 PREPARE Q, BANK, AND PUSHLOC (ALA
 0323            TS     NEWPRIO         CHANG1) IN CASE WE HAVE TO CHANGE JOBS.
 0324            CS     Q
 0325            TS     LOC
 0326            CAF    EXECBANK
 0327            XCH    BANKREG
 0328  2         TC     PRIOCH2         OFF TO EXECUTIVE BANK.
 0329  2         SETLOC EJ2 +5
 0330   PRIOCH2  COM
 0331            TS     BANKSET
 0332            XCH    PUSHLOC
 0333            MASK   LOW10
 0334  2         TS     PUSHLOC
 0335            CAF    LOW9            MAKE UP NEW PRIORITY WORD, LEAVING
 0336            MASK   PRIORITY        POSSIBLE VAC ADDRESS INTACT.
 0337            AD     NEWPRIO
 0338            TS     PRIORITY
 0339            COM                    INITIALIZE BUF +1 TO - THIS PRIORITY FOR
 0340  2         TS     BUF +1          SEARCH FOR HIGHEST PRIORITY.
 0341            CAF    ZERO            SET BUF TO ZERO AS A FLAG FOR END OF
 0342            TS     BUF             SCAN.
 0343            TC     EJSCAN          SCAN FOR HIGHEST PRIORITY.
P0345  2LIST OF PROGRAM PRIORITIES
 0346  2         SETLOC PRIOCHNG +7
 0347   PRIO1    EQUALS BIT10
 0348   PRIO2    EQUALS BIT11
 0349   PRIO3    OCT    03000
 0350   PRIO4    EQUALS BIT12
 0351   PRIO5    OCT    05000
 0352   OCT05000 EQUALS PRIO5
 0353   PRIO6    EQUALS 6K
 0354   PRIO7    OCT    07000
 0355   PRIO10   EQUALS BIT13
 0356   PRIO11   OCT    11000
 0357   PRIO12   OCT    12000
 0358   PRIO13   OCT    13000
 0359   PRIO14   OCT    14000
 0360   PRIO15   OCT    15000
 0361   PRIO16   OCT    16000
 0362   PRIO17   OCT    17000
 0363   PRIO20   EQUALS BIT14
 0364   PRIO21   OCT    21000
 0365   PRIO22   OCT    22000
 0366   PRIO23   OCT    23000
 0367   PRIO24   OCT    24000
 0368   PRIO25   OCT    25000
 0369   PRIO26   OCT    26000
 0370   PRIO27   OCT    27000
 0371   PRIO30   OCT    30000
 0372   PRIO31   OCT    31000
 0373   PRIO32   OCT    32000
 0374   PRIO33   OCT    33000
 0375   PRIO34   OCT    34000
 0376   PRIO35   OCT    35000
 0377   PRIO36   OCT    36000
 0378   PRIO37   OCT    37000
L      2WAITLIST
R0001  2CHECK-OUT STATUS - UNIT VERIFICATION COMPLETE MAY, 1965
 0002  9EXCEPT LONGCALL SECTION.
R0003  2DO NOT CHANGE THIS SECTION WITHOUT PRB APPROVAL.
R0004  2GROUNDRULE....DELTA T SHOULD NOT EXCEED 12000 (= 2 MINUTES)
 0005            BANK   1
 0006   WAITLIST TS     DELT            STORE DELTA T = TD - T (TD = DESIRED
 0007            XCH    Q                 TIME FOR FUTURE ACTION).
 0008            TC     EXECCOM         PICK UP TASK ADDRESS AND SAVE BANKREG.
 0009  2         TC     WTLST3
 0010            BANK   4
 0011   WTLST3   CS     TIME3
 0012            AD     +1              CCS  A  = + 1/4
 0013            CCS    A               TEST  1/4 - C(TIME3).  IF POSITIVE,
A0014   IT MEANS THAT TIME3 OVERFLOW HAS OCCURRED PRIOR TO CS  TIME3 AND THAT
A0015   C(TIME3) = T - T1, INSTEAD OF 1.0 - (T1 - T).  THE FOLLOWING FOUR
A0016   ORDERS SET C(A) = TD - T1 + 1 IN EITHER CASE.  C(CSQ) = CS  Q = 40001
A0017  2AND  C(TSQ) = TS  Q = 50001   NOTATION...   1 - 00001,  1.0 = 37777+1
 0018            AD     CSQ             OVERFLOW HAS OCCURRED.  SET C(A) =
 0019  2         CS     A               T - T1 + 3/4 - 1
R0020  2NORMAL CASE (C(A) MINUS) YIELDS SAME C(A)  -(-(1.0-(T1-T))+1/4)-1
 0021            AD     TSQ             TS  Q  = - 3/4 + 2
 0022  8         AD     DELT            RESULT = TD - T1 + 1
 0023  9            10 W
 0024  2         CCS    A               TEST TD - T1 + 1
 0025            AD     LST1            IF TD - T1 POS, GO TO WTLST5 WITH
 0026  2         TC     WTLST5          C(A) = (TD - T1) + C(LST1) = TD-T2+1
 0027            TC     +1
 0028  2         CS     DELT
R0029   NOTE THAT THIS PROGRAM SECTION IS NEVER ENTERED WHEN T-T1 G/E -1,
R0030   SINCE TD-T1+1 = (TD-T) + (T-T1+1), AND DELTA T = TD-T G/E +1 .  (G/E
R0031   SYMBOL MEANS GREATER THAN OR EQUAL TO).  THUS THERE NEED BE NO CON-
R0032  2CERN OVER A PREVIOUS OR IMMINENT OVERFLOW OF TIME3 HERE.
 0033            AD     POS1/2          WHEN TD IS NEXT, FORM QUANTITY
 0034            AD     POS1/2            1.0 - DELTA T = 1.0 - (TD - T)
 0035            XCH    TIME3
 0036            AD     MSIGN
 0037            AD     DELT
 0038            TS     DELT
 0039            CAF    ZERO
 0040            XCH    DELT
 0041   WTLST4   XCH    LST1
 0042            XCH    LST1 +1
 0043            XCH    LST1 +2
 0044            XCH    LST1 +3
 0045            XCH    LST1 +4
 00453           XCH    LST1 +5
 00456           XCH    LST1 +6
 0046            XCH    EXECTEM2        TASK ADDRESS.
 0047            INDEX  NVAL
 0048            TC     +1
 0049            XCH    LST2
 0050            XCH    LST2 +1
 0051            XCH    LST2 +2
 0052            XCH    LST2 +3
 0053            XCH    LST2 +4
 0054            XCH    LST2 +5         AT END, CHECK THAT C(LST2+5) IS STD
 00543           XCH    LST2 +6
 00546           XCH    LST2 +7
 0055            AD     ENDTASK           END ITEM, AS CHECK FOR EXCEEDING
A0056                                     THE LENGTH OF THE LIST.
 0057            CCS    A
 0058            TC     ABORT           WAITLIST OVERFLOW.
 0059            OCT    01203
 0060  2         TC     -2
 0061            XCH    EXECTEM1        RETURN TO CALLER.
 0062  8         TC     LVWTLIST        SAME ROUTINE AS FINDVAC, ETC., EXIT.
 0063   WTLST5   CCS    A               TEST  TD - T2 + 1
 0064            AD     LST1 +1
 0065            TC     +4
 0066            AD     ONE
 0067            TC     WTLST2
 0068  2         OCT    1
 0069   +4       CCS    A               TEST  TD - T3 + 1
 0070            AD     LST1 +2
 0071            TC     +4
 0072            AD     ONE
 0073            TC     WTLST2
 0074  2         OCT    2
 0075   +4       CCS    A               TEST  TD - T4 + 1
 0076            AD     LST1 +3
 0077            TC     +4
 0078            AD     ONE
 0079            TC     WTLST2
 0080  2         OCT    3
 0081   +4       CCS    A               TEST  TD - T5 + 1
 0082            AD     LST1 +4
 0083            TC     +4
 0084            AD     ONE
 0085            TC     WTLST2
 0086  2         OCT    4
 0087   +4       CCS    A               TEST  TD - T6 + 1
 008705          AD     LST1 +5
 00871           TC     +4
 008715          AD     ONE
 00872           TC     WTLST2
 0087258         OCT    5
 00873   +4      CCS    A
 008735          AD     LST1 +6
 00874           TC     +4
 008745          AD     ONE
 00875           TC     WTLST2
 0087552         OCT    6
 00876   +4      CCS    A
 0088            TC     WTALARM
 0089            NOOP
 0090            AD     ONE
 0091            TC     WTLST2
 0092  2         OCT    7
 0093   WTALARM  TC     ABORT
 0094  2         OCT    01204
 0095  2LVWTLIST EQUALS FOUNDVAC
 0096   SVCT3X   CCS    FLAGWRD2        IF DURING FREE-FALL AND AFTER
 0097            TC     TASKOVER        PLATFORM HAS BEEN ALIGNED, COMPENSATE
 0098            TC     TASKOVER        FOR GYRO BIAS DRIFT.
 0099  2         TC     +1
 0100            CAF    PRIO35
 0101            TC     NOVAC
 0102            CADR   BIASONLY
 0103   LTSKOV   TC     TASKOVER        USED BY LONGCALL.
R0104  2C(TIME3) = 1.0 - (T1 - T)
R0105   C(LST1  ) = - (T2 - T1) + 1
R0106   C(LST1+1) = - (T3 - T2) + 1
R0107   C(LST1+2) = - (T4 - T3) + 1
R0108   C(LST1+3) = - (T5 - T4) + 1
R0109  2C(LST1+4) = - (T6 - T5) + 1
R0110   C(LST2  ) = TC  TASK1
R0111   C(LST2+1) = TC  TASK2
R0112   C(LST2+2) = TC  TASK3
R0113   C(LST2+3) = TC  TASK4
R0114   C(LST2+4) = TC  TASK5
R0115  8C(LST2+5) = TC  TASK6
 0116  9            11 W
R0117   THE ENTRY TO WTLST2 JUST PRECEDING OCT  N  IS FOR T  LE TD LE T   -1.
R0118  2                                                   N           N+1
R0119   (LE MEANS LESS THAN OR EQUAL TO).  AT ENTRY, C(A) = -(TD - T   + 1)
R0120  2                                                            N+1
R0121   THE LST1 ENTRY -(T   - T +1) IS TO BE REPLACED BY -(TD - T + 1), AND
R0122  2                  N+1   N                                 N
R0123   THE ENTRY -(T   - TD + 1) IS TO BE INSERTED IMMEDIATELY FOLLOWING.
R0124  2             N+1
 0125   WTLST2   XCH    Q               NEW C(Q) = -(TD - T   + 1)
 0126            INDEX  A                                  N+1
 0127            CAF    0
 0128  2         TS     NVAL            VALUE OF N INTO NVAL
 0129            CAF    ONE
 0130            AD     Q
 0131            INDEX  NVAL            C(A) = -(TD - T ) + 1.
 0132  2         AD     LST1 -1                        N
 0133            INDEX  NVAL
 0134  2         TS     LST1 -1
 0135            CS     Q               -C(Q) = -(T    - TD) + 1
 0136            INDEX  NVAL                       N+1
 0137            TC     WTLST4
P0138   THIS ROUTINE HANDLES TASKS MORE THAN 120 SECS IN THE FUTURE. IT REQUIRES
 0139  9 CALL TIME IN LONGTIME, +1 SCALED SAME
R0140   AS TIME2, 1 AND THE TASK ADDRESS IN CALLCADR. ENTER WITH
R0141                                                              TC IBNKCALL
R0142                                                            CADR LONGCALL
R0143  4THE ROUTINE ONLY HANDLES ONE CALL AT A TIME
 0144   LONGCALL XCH    Q
 0145  2         TS     LONGEXIT
 0146            XCH    LONGTIME +1
 0147            DOUBLE
 0148            TS     LONGTIME +1
 0149            CAF    ZERO
 0150            AD     LONGTIME
 0151            AD     LONGTIME
 0152            TS     LONGTIME
 0153            TC     +2
 0154  2         TC                     ERROR TRAP.   DT TOO BIG
 0155            CAF    ONE
 0156            AD     LONGTIME +1
 0157            AD     POSMAX
 0158            TS     LONGTIME +1
 0159  2         CAF    ZERO
 0160            AD     LONGTIME
 0161            AD     POSMAX
 0162            TS     LONGTIME
 0163  2         TC     CCSHOLE
 0164            CAF    BIT14
 0165            EXTEND
 0166            MP     LONGTIME +1
 0167  2         TS     LONGTIME +1
 0168   LONGCYCL CCS    LONGTIME
 0169  2         TC     LOOPAGIN
 0170            CCS    LONGTIME +1     TEST FOR LOWER ORDER ZERO
 0171            TC     +2
 0172  2         TC     GETCADR
 0173            XCH    LONGTIME +1
 0174            TC     WAITLIST
 0175  2         CADR   GETCADR
 0176            TC     LONGC1
 0177   LOOPAGIN TS     LONGTIME
 0178            CAF    BIT14
 0179            TC     WAITLIST
 0180  2         CADR   LONGCYCL
 0181   LONGC1   CAF    LTSKOV
 0182            XCH    LONGEXIT
 0183  2         XAQ
 0184   GETCADR  XCH    CALLCADR
 0185            TC     BANKJUMP
P0187  2         ENTERS HERE ON T3 RUPT TO DISPATCH WAITLISTED TASK.
 0188  2         SETLOC WAITLIST +4     BACK TO FF.
 0189   T3RUPT   XCH    BANKREG          TIME 3 OVERFLOW INTERRUPT PROGRAM
 0190            TS     BANKRUPT
 0191            XCH    OVCTR           1.  PICK UP CONTENTS OF THE OVERFLOW
 0192  2         TS     OVRUPT             AND SAVE IN OVRUPT FOR ENTIRE T3RUPT.
 0193   T3RUPT2  CS     ZERO            SET RUPTAGN TO -0 INITIALLY, AND SET
 0194            TS     RUPTAGN         T3 TO -0 WHILE WE MAKE UP ITS NEW
 0195            XCH    TIME3           CONTENTS SO WE CAN DETECT AN INCREMENT
 0196  2         TS     Q               OCCURING IN THE PROCESS.
 0197            CAF    NEG1/2
 01973           XCH    LST1 +6
 01976           XCH    LST1 +5
 0198            XCH    LST1 +4         3.  MOVE UP LST1 CONTENTS, ENTERING
 0199            XCH    LST1 +3             A VALUE OF 1/2 +1 AT THE BOTTOM
 0200            XCH    LST1 +2             FOR T6-T5, CORRESPONDING TO THE
 0201            XCH    LST1 +1             INTERVAL 81.93 SEC FOR ENDTASK.
 0202            XCH    LST1
 0203            AD     POSMAX          4. SET T3 = 1.0 - T2 -T USING LIST 1.
 0204            AD     Q               SAMPLED T3.
 0205            TS     A               SEE IF NEW T3 HAS OVERFLOW. IF SO, NEXT
 0206            TC     +4              TASK IS DUE THIS T3 RUPT AND SET RUPTAGN
 0207            XCH    RUPTAGN         ACCORDINGLY.
 0208            CAF    ONE
 0209  2         XCH    RUPTAGN
 0210    +4      XCH    TIME3
 0211            CCS    A               T3 IS ALMOST ALWAYS -0 UNLESS AN
 0212            CAF    ONE             INCREMENT OCCURRED IN WHICH CASE WE MUST
 0213            AD     TIME3           ADD IT TO THE NEW T3.
 0214  8         TC     XTRAINC
 0215   T3DSP    CS     ENDTASK
 02153           XCH    LST2 +7
 02156           XCH    LST2 +6
 0216            XCH    LST2 +5             ENTERING THE ENDTASK AT BOTTOM.
 0217            XCH    LST2 +4
 0218            XCH    LST2 +3
 0219            XCH    LST2 +2
 0220            XCH    LST2 +1
 0221  2         XCH    LST2            9.  PICK UP TOP TASK ON LIST
 0222            TS     BANKREG         SWITCH BANKS IF NECESSARY
 0223            TS     ITEMP1
 0224            MASK   70K
 0225            CCS    A
 0226            TC     +2              IF +
 0227            TC     ITEMP1
 0228            XCH    ITEMP1
 0229            MASK   LOW10
 0230            INDEX  A
 0231  4         TC     6000
R0232  2RETURN, AFTER EXECUTION OF TIME3 OVERFLOW TASK.
 0233   TASKOVER CCS    RUPTAGN         IF +1 RETURN TO T3RUPT, IF -0 RESUME.
 0234  2         TC     T3RUPT2         DISPATCH NEXT TASK IF IT WAS DUE.
 0235   ENDTASK -CADR   SVCT3
 0236  2BANKMASK OCT    76000
 0237   OVRESUME XCH    OVRUPT          OVCTR RESTORE AND BANKREG RESTORE.
 0238  2         TS     OVCTR
 0239   RESUME   XCH    BANKRUPT        STANDARD BANK-SWITCH RESUME.
 0240  2         TS     BANKREG
 0241   NBRESUME XCH    QRUPT           NO-BANK-SWITCH RESUME.
 0242            TS     Q
 0243            XCH    ARUPT
 0244  2         RESUME
R0245  2         FINISH UP RARE EVENT OF EXTRA INCREMENT TO T3.
 0246   XTRAINC  TS     TIME3
 0247            TC     T3DSP           USUAL CASE.
 0248            TS     RUPTAGN         EVEN MORE RARE - THE NEXT TASK IS DUE
 0249            TC     T3DSP           THIS T3RUPT.
L      2RESTART CONTROL
 0001            BANK   1
R0002  2OF THE PHASE TABLE IN ALMOST CONTSTANT AGREEMENT. CALLING SEQUENCES ARE
 0003  9AS FOLLOWS:
A0004            TC     PHASCHNG        CHANGE GROUP G TO PHASE PPP (127 MAX).
A0005  2         OCT    PPP0G           (CALL UNDER EXECUTIVE ONLY)
A0006            CAF    --              CHANGE GROUP G TO THE PHASE ARRIVING IN
A0007            TC     NEWPHASE        A (MAY BE CALLED ANYTIME).
A0008  2         OCT    0000G
R0009            IN EACH CASE THE OLD PHASE IS RETURNED TO THE CALLER IN A. IF T
 0010  9HE OLD PHASE WAS +0, CONTROL IS
R0011  2GIVEN TO A ROUTINE SPECIFIED IN A CADR TABLE. THIS ROUTINE MAY EXIT OR R
 0012  9ETURN TO CALLER VIA SWRETURN.
 0013   PHASCHNG XCH    Q
 0014            INHINT
 0015            TS     RUPTREG4
 0016            INDEX  A
 0017            CAF    0
 0018            TS     PHASDATA
 0019            MASK   LOW5            (MAY WANT MORE GROUPS SOME DAY)
 0020            XCH    PHASDATA
 0021            EXTEND
 0022            MP     -BIT9           NOTE LP NOT SAVED.
 0023  2         TC     PHASCH2
 0024  2-BIT9    OCT    -400
 0025   NEWPHASE INHINT
 0026            XCH    Q
 0027            TS     RUPTREG4
 0028            INDEX  A
 0029            CAF    0
 0030  2         TS     PHASDATA
 0031            CS     Q
 0032   PHASCH2  INDEX  PHASDATA
 0033            TS     -PHASE1 - 1     PHASE1 IS FOR PROG NUM 1.
 0034            COM
 0035            INDEX  PHASDATA
 0036  2         XCH    PHASE1 - 1      INTO PHASE1 FOR PROG 1.
 0037            CCS    A
 0038  2         TC     +3
 0039  2         TC     UPT             ON +0.
 0040            CS     TWO             -1 IS INACTIVE STATE
 0041  2 +3      AD     ONE
 0042   PHASEXIT XCH    RUPTREG4
 0043            AD     ONE
 0044            TS     Q               WE MUST RELINT BEFORE RETURN.
 0045            XCH    RUPTREG4        OLD PHASE BITS.
 0046            RELINT
 0047  2         TC     Q
 0048   UPT      INDEX  PHASDATA
 0048            CAF    UPTCADR -1
 0050  2         TC     SWCALL
 0051            CAF    ZERO            IF RETURN
 0052            TC     PHASEXIT
P0053  2         MAJOR MODE LIGHT MAINTENANCE ROUTINES.
R0054            ROUTINE TO CHECK EQUALITY BETWEEN THE MAJOR MODE DISPLAY AND TH
 0055  9E ARGUMENT AT CALLER +1. RETURNS TO
R0056  2CALLER +2 IF NOT AND CALLER +3 IF SO.
 0057   CHECKMM  CAF    ONE
 0058            AD     Q
 0059            XCH    Q
 0060            INDEX  A
 0061            CS     0
 0062            AD     MODREG
 0063            CCS    A
 0064            TC     Q
 0065   FINEMASK OCT    17
 0066            TC     Q
 0067            INDEX  Q
 0068  2         TC     Q
R0069  2         TO UPDATE THE MAJOR MODE LIGHTS:
 0070   NEWMODE  INDEX  Q
 0071            CAF    0
 0072            TS     MODREG
 0073            CAF    GRABUSY +1      CADR OF BANK CONTAINING DSPMM.
 0074            XCH    BANKREG
 0075            TS     MPAC +1         MPACS NOT USED BY DSPMM.
 0076            XCH    Q
 0077            TS     MPAC
 0078  2         TC     DSPMM
 0079            XCH    MPAC +1
 0080            TS     BANKREG
 0081            INDEX  MPAC
 0082            TC     1
P0084   PROGRAM PRGSTALL IS AN EXECUTIVE INTERLOCK ROUTINE. REQUESTING PROGS DO
R0085            TC     BANKCALL
R0086            CADR   PRGSTALL
R0087  4RETURN IS TO L+2 AFTER TWO PROGS HAVE CALLED.
 0088            BANK   4
 0089   PRGSTALL INHINT
 0090            CS     STATE
 0091            MASK   PRGBIT
 0092            TS     Q
 0093            CS     PRGBIT
 0094            MASK   STATE
 0095            AD     Q
 0096            TS     STATE
 0097            CCS    Q
 0098            TC     PRGSLEEP
 0099            CAF    LPRGRET
 0100            TC     JOBWAKE
 0101            RELINT
 0102  2         TC     SWRETURN
 0103   PRGSLEEP TC     MAKECADR
 0104            XCH    ADDRWD
 0105            TS     MPAC +2
 0106            CAF    LPRGRET
 0107  2         TC     JOBSLEEP
 0108   PRGRET   XCH    MPAC +2
 0109  2         TC     BANKJUMP
 0110   LPRGRET  CADR   PRGRET
 0111  2PRGBIT   EQUALS BIT1
 0112   UPTCADR  CADR
P0113            PINBALL COMES TO MODROUT ON RECEIVING THE NEW MODE REQUESTED BY
 0114  9 VERB 37. THE DESIRED MODE IN IS A
R0115  2ON ARRIVAL.
 0116   MODROUT  INHINT
 0117            AD     NEG3            FOR FLIGHT 501, ONLY MODES 01 AND 03 MAY
 0118            CCS    A               BE INITIATED BY VERB 37.
 0119            TC     V37BAD
 0120            TC     CCSHOLE
 0121  2         TC     1CHECK          SEE IF 01 CALLED FOR.
 0122            TC     CHECKMM         MODE 03 REQUESTED - DEMANDS MODE 02
 0123            OCT    02              PRESENTLY.
 0124  2         TC     V37BAD
 0125            CAF    PRIO14          START OPTICAL CHECK.
 0126            TC     FINDVAC
 0127            CADR   CHKOPT
 0128  2         TC     ENDOFJOB
 0129   1CHECK   AD     MINUS1          SEE IF 01 REQUESTED.
 0130            CCS    A
 0131            TC     V37BAD
 0132            TC     CCSHOLE
 0133  2         TC     V37BAD
 0134            CCS    MODREG          DEMAND IDLE MODE.
 0135  2         TC     V37BAD
 0136            CAF    PRIO20
 0137            TC     FINDVAC
 0138            CADR   TOP1
 0139  2         TC     ENDOFJOB
 0140   V37BAD   TC     FALTON          ILLEGAL REQUEST.
 0141            TC     ENDOFJOB
*       ENDOFJOB
