* 1800A JOB 55-238-50  YUL SYSTEM
*       YUL
Y  YUL  ADD NEW COMPUTER BLK2
Y  YUL  ASSEMBLY PASS 1 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 2 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 3 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLE NEW BLK2 PROGRAM RETRED44 BY NASA 2021100
LINS   8VERB AND NOUN INFORMATION
P0038  4VERB DEFINITIONS
R0039    REGULAR VERBS
R0040   01  DISPLAY OCTAL COMP 1 (R1)
R0041   02  DISPLAY OCTAL COMP 2 (R1)
R0042   03  DISPLAY OCTAL COMP 3 (R1)
R0043   04  DISPLAY OCTAL COMP 1,2 (R1,R2)
R0044   05  DISPLAY OCTAL COMP 1,2,3 (R1,R2,R3)
R0045   06  DECIMAL DISPLAY
R0046   07  DP DECIMAL DISPLAY (R1,R2)
R0047   10  SPARE
R0048   11  MONITOR OCT COMP 1 (R1)
R0049   12  MONITOR OCT COMP 2 (R1)
R0050   13  MONITOR OCT COMP 3 (R1)
R0051   14  MONITOR OCT COMP 1,2 (R1)
R0052   15  MONITOR OCT COMP 1,2,3 (R1,R2,R3)
R0053   16  MONITOR DECIMAL
R0054   17  MONITOR DP DECIMAL (R1,R2)
R0055   20  SPARE
R0056   21  LOAD COMP 1 (R1)
R0057   22  LOAD COMP 2 (R2)
R0058   23  LOAD COMP 3 (R3)
R0059   24  LOAD COMP 1,2 (R1,R2)
R0060   25  LOAD COMP 1,2,3 (R1,R2,R3)
R0061   26  SPARE
R0062   27  FIXED MEMORY DISPLAY
R0063   30  REQUEST EXECUTIVE
R0064   31  REQUEST WAITLIST
R0065   32  C(R2) INTO R3, C(R1) INTO R2
R0066   33  PROCEED WITHOUT DATA
R0067   34  TERMINATE CURRENT TEST OR LOAD REQUEST
R0068   35  TEST LIGHTS
R0069   36  FRESH START
R0070   37  CHANGE MAJOR MODE
R0071   END OF REGULAR VERBS
P0105   NORMAL NOUNS                                       SCALE AND DECIMAL POI
 0106  9NT
R0107   00  NOT IN USE
R0108   01  SPECIFY MACHINE ADDRESS (FRACTIONAL)           (.XXXXX)
R0109   02  SPECIFY MACHINE ADDRESS (WHOLE)                (XXXXX.)
R0110   03  SPECIFY MACHINE ADDRESS (DEGREES)              (XXX.XXDEGREES)
R0111   04  SPECIFY MACHINE ADDRESS (HOURS)                (XXX.XXHOURS)
R0112   05  SPECIFY MACHINE ADDRESS (SECONDS)              (XXX.XXSECONDS)
R0113   06  SPECIFY MACHINE ADDRESS (GYRO DEGREES)         (XX.XXXDEGREES)
R0114   07  SPECIFY MACHINE ADDRESS (Y OPT DEGREES)        (XX.XXXDEGREES)
R0116   10  CHANNEL TO BE SPECIFIED
R0117   11  SPARE
R0118   12  SPARE
R0119   13  SPARE
R0120   14  SPARE
R0121   15  INCREMENT MACHINE ADDRESS                      (OCTAL ONLY)
R0122   16  TIME SECONDS                                   (XXX.XXSECONDS)
R0123   17  TIME HOURS                                     (XXX.XXHOURS)
R0124   20  ICDU                                           (XXX.XXDEGREES)
R0125   21  PIPAS                                          (XXXXX.PULSES)
R0126   22  NEW ANGLES I                                   (XXX.XXDEGREES)
R0127   23  DELTA ANGLES I                                 (XXX.XXDEGREES)
R0128   24  DELTA TIME (SECONDS)                           (XXX.XXSECONDS)
R0129   25  CHECKLIST                                      (XXXXX.)
R0130   26  PRIO/DELAY, ADRES, BBCON                       (OCTAL ONLY)
R0131   27  SELF TEST ON/OFF SWITCH                        (XXXXX.)
R0132   30  STAR NUMBERS                                   (XXXXX.)
R0133   31  FAILREG                                        (OCTAL ONLY)
R0134   32  DECISION TIME (MIDCOURSE)                      (XXX.XXHOURS (INTERNA
 0135  9L UNITS = WEEKS))
R0136   33  EPHEMERIS TIME (MIDCOURSE)                     (XXX.XXHOURS (INTERNA
 0137  9L UNITS = WEEKS))
R0138   34  MEASURED QUANTITY (MIDCOURSE)                  (XXXX.XKILOMETERS)
R0139   35  ROLL, PITCH, YAW                               (XXX.XXDEGREES)
R0140   36  LANDMARK DATA 1                                (OCTAL ONLY)
R0141   37  LANDMARK DATA 2                                (OCTAL ONLY)
R0142   40  SPARE
R0143   41  SPARE
R0144   42  SPARE
R0145   43  SPARE
R0146   44  SPARE
R0147   45  SPARE
R0148   46  SPARE
R0149   47  SPARE
R0150   50  SPARE
R0151   51  SPARE
R0152   52  GYRO BIAS DRIFT                                (.BBXXXXXMILLIRAD/SEC
 0153  9)
R0154   53  GYRO INPUT AXIS ACCELERATION DRIFT             (.BBXXXXX(MILLIRAD/SE
 0155  9C)/(CM/SEC SEC))
R0156   54  GYRO SPIN AXIS ACCELERATION DRIFT              (.BBXXXXX(MILLIRAD/SE
 0157  9C)/(CM/SEC SEC))
R0158  4END OF NORMAL NOUNS
R0159   MIXED NOUNS                                        SCALE AND DECIMAL POI
 0160  9NT
R0161   55  OCDU                                           (XXX.XXDEG, XX.XXXDEG
 0162  9)
R0163   56  UNCALLED MARK DATA (OCDU & TIME(SECONDS))      (XXX.XXDEG, XX.XXXDEG
 0164  9, XXX.XXSEC)
R0165   57  NEW ANGLES OCDU                                (XXX.XXDEG, XX.XXXDEG
 0166  9)
R0167   60  IMU MODE STATUS (IN3, WASKSET, OLDERR)         (OCTAL ONLY)
R0169   61  TARGET AZIMUTH AND ELEVATION                   (XXX.XXDEG, XX.XXXDEG
 0170  9)
R0171   62  ICDUZ AND TIME                                 (XXX.XXDEG, XXX.XXSEC
 0172  9)
R0173   63  OCDUX AND TIME                                 (XXX.XXDEG, XXX.XXSEC
 0174  9)
R0175   64  OCDUY AND TIME                                 (XX.XXXDEG, XXX.XXSEC
 0176  9)
R0177   65  SAMPLED TIME (HOURS AND SECONDS)               (XXX.XXHOURS, XXX.XXS
 0178  9EC)
R01781          (FETCHED IN INTERRUPT)
R0179   66  SYSTEM TEST RESULTS                            (XXXXX., .XXXXX, XXXX
 0180  9X.)
R0181   67  DELTA GYRO ANGLES                              (XX.XXXDEG  FOR EACH)
R0182   70  PIPA BIAS                                      (X.XXXXCM/SEC SEC  FO
 0183  9R EACH)
R0184   71  PIPA SCALE FACTOR ERROR                        (XXXXX.PARTS/MILLION
 0185  9 FOR EACH)
R0186   72  DELTA POSITION                                 (XXXX.XKILOMETERS  FO
 0187  9R EACH)
R0188   73  DELTA VELOCITY                                 (XXXX.XMETERS/SEC  FO
 0189  9R EACH)
R0190   74  MEASUREMENT DATA (MIDCOURSE)                   (XXX.XXHOURS (INTERNA
 0191  9L UNITS=WEEKS), XXXX.XKILOMETERS, XXXXX.
R0192   75  MEASUREMENT DEVIATIONS (MIDCOURSE)             (XXXX.XKILOMETERS, XX
 0193  9XX.XMETERS/SEC, XXXX.XKILOMETERS)
R0194   76  POSITION VECTOR                                (XXXX.XKILOMETERS  FO
 0195  9R EACH)
R0196   77  VELOCITY VECTOR                                (XXXX.XMETERS/SEC  FO
 0197  9R EACH)
L      2ERASABLE ASSIGNMENTS
 0001   A        EQUALS 0
 0002   L        EQUALS 1               L AND Q ARE BOTH CHANNELS AND REGISTERS.
 0003   Q        EQUALS 2
 0004   EBANK    EQUALS 3
 0005   FBANK    EQUALS 4
 0006   Z        EQUALS 5               ADJACENT TO FBANK AND BBANK FOR DXCH Z
 0007   BBANK    EQUALS 6               (DTCB) AND DXCH FBANK (DTCF).
A0008  2                                REGISTER 7 IS A ZERO-SOURCE, USED BY ZL.
 0009   ARUPT    EQUALS 10              INTERRUPT STORAGE.
 0010   LRUPT    EQUALS 11
 0011   QRUPT    EQUALS 12
 0012   ZRUPT    EQUALS 15              (13 AND 14 ARE SPARES.)
 0013   BANKRUPT EQUALS 16              USUALLY HOLDS FBANK OR BBANK.
 0014  2BRUPT    EQUALS 17              RESUME ADDRESS AS WELL.
 0015   CYR      EQUALS 20
 0016   SR       EQUALS 21
 0017   CYL      EQUALS 22
 0018  4EDOP     EQUALS 23              EDITS INTERPRETIVE OPERATION CODE PAIRS.
 0019   TIME2    EQUALS 24
 0020   TIME1    EQUALS 25
 0021   TIME3    EQUALS 26
 0022   TIME4    EQUALS 27
 0023   TIME5    EQUALS 30
 0024   TIME6    EQUALS 31
 0025   CDUX     EQUALS 32
 0026   CDUY     EQUALS 33
 0027   CDUZ     EQUALS 34
 0028   OPTY     EQUALS 35
 0029   OPTX     EQUALS 36
 0030   PIPAX    EQUALS 37
 0031   PIPAY    EQUALS 40
 0032   PIPAZ    EQUALS 41
 0033   BMAGX    EQUALS 42
 0034   BMAGY    EQUALS 43
 0035   BMAGZ    EQUALS 44
 0036   INLINK   EQUALS 45
 0037   RNRAD    EQUALS 46
 0038   GYROCTR  EQUALS 47
 0039   CDUXCMD  EQUALS 50
 0040   CDUYCMD  EQUALS 51
 0041   CDUZCMD  EQUALS 52
 0042   OPTYCMD  EQUALS 53
 0043   OPTXCMD  EQUALS 54
 0044   EMSD     EQUALS 55
 0045   LEMONM   EQUALS 56
 0046   OUTLINK  EQUALS 57
 0047  2ALTM     EQUALS 60
 00472           SETLOC 67              DECODED REGISTER FOR NIGHT-WATCHMAN ALM.
 00474 2NEWJOB   ERASE
 0048   LVSQUARE EQUALS 34D             SQUARE OF VECTOR INPUT TO ABVAL AND UNIT
 0049   LV       EQUALS 36D             LENGTH OF VECTOR INPUT TO UNIT.
 0050   X1       EQUALS 38D             INTERPRETIVE SPECIAL REGISTERS RELATIVE
 0051   X2       EQUALS 39D             TO THE WORK AREA.
 0052   S1       EQUALS 40D
 0053   S2       EQUALS 41D
 0054   QPRET    EQUALS 42D
P0055  2GENERAL ERASABLE ASSIGNMENTS.
R0056  2         THE FOLLOWING ARE EXECUTIVE TEMPORARIES WHICH MAY BE USED BETWE
 0057  9EN CCS NEWJOB INQUIRIES.
 0058  2         SETLOC 100
 0059   INTB15+  ERASE                  REFLECTS 15TH BIT OF INDEXABLE ADDRESSES
 0060   DSEXIT   =      INTB15+         RETURN FOR DSPIN
 0061   EXITEM   =      INTB15+         RETURN FOR SCALE FACTOR ROUTINE SELECT
 0062  2BLANKRET =      INTB15+         RETURN FOR 2BLANK
 0063   INTBIT15 ERASE                  SIMILAR TO ABOVE.
 0064   WRDRET   =      INTBIT15        RETURN FOR 5BLANK
 0065   WDRET    =      INTBIT15        RETURN FOR DSPWD
 0066   DECRET   =      INTBIT15        RETURN FOR PUTCOM(DEC LOAD)
 0067  221/22REG =      INTBIT15        TEMP FOR CHARIN
 0068   ADDRWD   ERASE                  12 BIT INTERPRETIVE OPERAND SUB-ADDRESS.
 0069   POLISH   ERASE                  HOLDS CADR MADE FROM POLISH ADDRESS.
 0070   UPDATRET =      POLISH          RETURN FOR UPDATNN, UPDATVB
 0071   CHAR     =      POLISH          TEMP FOR CHARIN
 0072   ERCNT    =      POLISH          COUNTER FOR ERROR LIGHT RESET
 0073  2DECOUNT  =      POLISH          COUNTER FOR SCALING AND DISPLAY (DEC)
 0074  2FIXLOC   ERASE                  WORK AREA ADDRESS.
 0075  2OVFIND   ERASE                  SET NON-ZERO ON OVERFLOW.
 0076   VBUF     ERASE  +5              TEMPORARY STORAGE USED FOR VECTORS.
 0077   SGNON    =      VBUF            TEMP FOR +,- ON
 0078   NOUNTEM  =      VBUF            COUNTER FOR MIXNOUN FETCH
 0079   DISTEM   =      VBUF            COUNTER FOR OCTAL DISPLAY VERBS
 0080  2DECTEM   =      VBUF            COUNTER FOR FETCH (DEC DISPLAY VERBS)
 0081   SGNOFF   =      VBUF    +1      TEMP FOR +,- ON
 0082   NVTEMP   =      VBUF    +1      TEMP FOR NVSUB
 0083  2SFTEMP1  =      VBUF    +1      STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
 0084   CODE     =      VBUF    +2      FOR DSPIN
 0085  2SFTEMP2  =      VBUF    +2      STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
 0086   MIXTEMP  =      VBUF    +3      FOR MIXNOUN DATA
 0087  2SIGNRET  =      VBUF    +3      RETURN FOR +,- ON
R0088  2ALSO MIXTEMP+1 = VBUF+4, MIXTEMP+2 = VBUF+5.
 0089   BUF      ERASE  +2              TEMPORARY SCALAR STORAGE.
 0090   BUF2     ERASE  +1
 0091   INDEXLOC EQUALS BUF             CONTAINS ADDRESS OF SPECIFIED INDEX.
 0092   SWWORD   EQUALS BUF             ADDRESS OF SWITCH WORD.
 0093   SWBIT    EQUALS BUF +1          SWITCH BIT WITHIN SWITCH WORD.
 0095   MPTEMP   ERASE                  TEMPORARY USED IN MULTIPLY AND SHIFT.
 0096   DOTINC   ERASE                  COMPONENT INCREMENT FOR DOT SUBROUTINE.
 0097   DVSIGN   EQUALS DOTINC          DETERMINES SIGN OF DDV RESULT.
 0098   ESCAPE   EQUALS DOTINC          USED IN ARCSIN/ARCCOS.
 0099  2ENTRET   =      DOTINC          EXIT FROM ENTER
 0100   DOTRET   ERASE                  RETURN FROM DOT SUBROUTINE.
 0101   DVNORMCT EQUALS DOTRET          DIVIDEND NORMALIZATION COUNT IN DDV.
 0102   ESCAPE2  EQUALS DOTRET          ALTERNATE ARCSIN/ARCCOS SWITCH.
 0103   WDCNT    =      DOTRET          CHAR COUNTER FOR DSPWD
 0104  2INREL    =      DOTRET          INPUT BUFFER SELECTOR ( X,Y,Z, REG )
 0105   MATINC   ERASE                  VECTOR INCREMENT IN MXV AND VXM.
 0106   MAXDVSW  EQUALS MATINC          +0 IF DP QUOTIENT IS NEAR ONE - ELSE -1.
 0107   POLYCNT  EQUALS MATINC          POLYNOMIAL LOOP COUNTER
 01071  DSPMMTEM =      MATINC          DSPCOUNT SAVE FOR DSPMM
 0108  2MIXBR    =      MATINC          INDICATOR FOR MIXED OR NORMAL NOUN
 0109   TEM1     ERASE                  EXEC TEMP
 01095  POLYRET  =      TEM1
 0110  2DSREL    =      TEM1            REL ADDRESS FOR DSPIN
 0111   TEM2     ERASE                  EXEC TEMP
 0112   DSMAG    =      TEM2            MAGNITUDE STORE FOR DSPIN
 0113  2IDADDTEM =      TEM2            MIXNOUN INDIRECT ADDRESS STORAGE
 0114   TEM3     ERASE                  EXEC TEMP
 0115  2COUNT    =      TEM3            FOR DSPIN
 0116   TEM4     ERASE                  EXEC TEMP
 0117   LSTPTR   =      TEM4            LIST POINTER FOR GRABUSY
 0118   RELRET   =      TEM4            RETURN FOR RELDSP
 0119  2FREERET  =      TEM4            RETURN FOR FREEDSP
 0120   TEM5     ERASE                  EXEC TEMP
 0121  2NOUNADD  =      TEM5            TEMP STORAGE FOR NOUN ADDRESS
 0122   NNADTEM  ERASE                  TEMP FOR NOUN ADDRESS TABLE ENTRY
 0123   NNTYPTEM ERASE                  TEMP FOR NOUN TYPE TABLE ENTRY
 0124   IDAD1TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0125                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
 0126   IDAD2TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0127                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
 0128   IDAD3TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0129                                   MUST = IDAD1TEM+2, = IDAD2TEM+1.
 0130  2RUTMXTEM ERASE                  TEMP FOR SF ROUT TABLE ENTRY(MIXNN ONLY)
R0131  2         STORAGE USED BY THE EXECUTIVE.
 0133   MPAC     ERASE  +6              MULTI-PURPOSE ACCUMULATOR.
 0134   MODE     ERASE                  +1 FOR TP, +0 FOR DP, OR -1 FOR VECTOR.
 0135   LOC      ERASE                  LOCATION ASSOCIATED WITH JOB.
 0136   BANKSET  ERASE                  USUALLY CONTAINS BBANK SETTING.
 0137   PUSHLOC  ERASE                  WORD OF PACKED INTERPRETIVE PARAMETERS.
 0138  2PRIORITY ERASE                  PRIORITY OF PRESENT JOB AND WORK AREA.
 0139  2         ERASE  +71D            SEVEN SETS OF 12 REGISTERS EACH.
 0140   VAC1USE  ERASE
 0141   VAC1     ERASE  +42D
 0142   VAC2USE  ERASE
 0143   VAC2     ERASE  +42D
 0144   VAC3USE  ERASE
 0145   VAC3     ERASE  +42D
 0146   VAC4USE  ERASE
 0147   VAC4     ERASE  +42D
 0148   VAC5USE  ERASE
 0149  2VAC5     ERASE  +42D
R0150  2         INTERPRETIVE SWITCH RESERVATIONS.
 0151  2STATE    ERASE  +3              60 SWITCHES PRESENTLY.
R0152  2         THE FOLLOWING SET COMPRISES THE INTERRUPT TEMPORARY STORAGE POO
 0153  9L.
 0154   WAITEXIT ERASE
 0155   KEYTEMP1 =      WAITEXIT        TEMP FOR KEYRUPT, UPRUPT
 0156  2DSRUPTEM =      WAITEXIT        TEMP FOR DSPOUT
 0157   WAITBANK ERASE
 0158   EXECTEM1 ERASE
 0159   EXECTEM2 ERASE
 0160   WAITADR  ERASE
 0161  2WAITTEMP ERASE
 0162   NEWPRIO  ERASE                  EXECUTIVE RESERVATIONS (TEMP ONLY).
 0163   NEWLOC   ERASE  +1
 0164  2LOCCTR   ERASE
R0165  2         WAITLIST REPEAT FLAG:
 0166   RUPTAGN  ERASE
 0167  2KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
P0168  4THE FOLLOWING REGISTERS ARE RESERVED FOR PINBALL
R0169  2RESERVED FOR PINBALL EXECUTIVE ACTION
 0170   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
 0171   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
 0172   VERBREG  ERASE                  VERB CODE
 0173   NOUNREG  ERASE                  NOUN CODE
 0174   XREG     ERASE                  R1 INPUT BUFFER
 0175   YREG     ERASE                  R2 INPUT BUFFER
 0176   ZREG     ERASE                  R3 INPUT BUFFER
 0177   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
 0178   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
 0179   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
 0180   MODREG   ERASE                  MODE CODE
 0181   DSPLOCK  ERASE                  KEYBOARD/SUBROUTINE CALL INTERLOCK
 0182   REQRET   ERASE                  RETURN REGISTER FOR LOAD
 0183   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
 0184   CLPASS   ERASE                  PASS INDICATOR CLEAR
 0185   NOUT     ERASE                  ACTIVITY COUNTER FOR DSPTAB
 0186   NOUNCADR ERASE                  MACHINE CADR FOR NOUN
 0187   MONSAVE  ERASE                  N/V CODE FOR MONITOR. (= MONSAVE1-1)
 0188   MONSAVE1 ERASE                  NOUNCADR FOR MONITOR(MATBS) =MONSAVE +1
 0189   DSPTAB   ERASE  +11D            0-10D, DISPLAY PANEL BUFF. 11D, C/S LTS.
 0190   CADRSTOR ERASE                  ENDIDLE STORAGE
 0191   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
 0192   NVQTEM   ERASE                  NVSUB STORAGE FOR CALLING ADDRESS
A0193                                   MUST = NVBNKTEM-1
 0194   NVBNKTEM ERASE                  NVSUB STORAGE FOR CALLING BANK
A0195                                   MUST = NVQTEM+1
 0196   DSPLIST  ERASE          +2      WAITING LIST FOR DSP SYST INTERNAL USE
 0197   EXTVBACT ERASE                  EXTENDED VERB ACTIVITY INTERLOCK
 0198   DSPTEM1  ERASE          +2      BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
 0199   DSPTEM2  ERASE          +2      BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
R0200  4END OF ERASABLES RESERVED FOR PINBALL EXECUTIVE ACTION
R0201  2RESERVED FOR PINBALL INTERRUPT ACTION
 0202   DSPCNT   ERASE                  COUNTER FOR DSPOUT
 0203   UPLOCK   ERASE                  BIT1 = UPLINK INTERLOCK (ACTIVATED BY
A0204                                   RECEPTION OF A BAD MESSAGE IN UPLINK)
R0205  4END OF ERASABLES RESERVED FOR PINBALL INTERRUPT ACTION
P0206  2TEMPORARY PHONY ASSIGNMENTS TO KEEP PINBALL FROM HAVING BAD ASSEMBLIES
 0207   THETAD   ERASE  +2
 0209   FAILREG  ERASE
 0210   TDEC     ERASE  +1
 0211   TET      ERASE  +1
 0212   MEASQ    ERASE  +1
 0213   ROLL     ERASE  +2
 0214   LANDMARK ERASE  +5
 0215   GBIASX   ERASE  +2
 0216   ADIAX    ERASE  +2
 0217   ADSRAX   ERASE  +2
 0218   DESOPTX  ERASE  +1
 0219   SAMPTIME ERASE  +1
 0220   DELVX    ERASE  +5
 0221   PBIASX   ERASE
 02211  PIPASCFX ERASE
 0222   PBIASY   ERASE
 02221  PIPASCFY ERASE
 0223   PBIASZ   ERASE
 02231  PIPASCFZ ERASE
 0226            SETLOC 1000
 0227   DELR     ERASE  +5
 0228   DELVEL   ERASE  +5
 0229   MEASMODE ERASE
 0230   DELTAQ   ERASE  +1
 02301  WASKSET  ERASE
R0231  4END OF PHONY ASSIGNMENTS
P0232  2ASSIGNMENTS FOR T4RUPT PROGRAM
 0233   DSRUPTSW ERASE
 0234   OLDERR   ERASE
 0235   WASOPSET ERASE
R0236  4END OF T4RUPT ASSIGNMENTS
R0237  2ASSIGNMENTS FOR DOWNRUPT
 0238   DISPBUF  ERASE
 0239   TMKEYBUF ERASE
R0240  4END OF DOWNRUPT ASSIGNMENTS
R0241  2ASSIGNMENTS FOR SELF CHECK
R0242   ADDRESSES TO BE USED FOR INDEX INSTRUCTION WITHOUT EXTRACODES
 02421  NDX+0    ERASE
 024211 NDX+MAX  ERASE
 024212 NDXKEEP1 ERASE
 024213 NDXKEEP2 ERASE
 024214 NDXKEEP3 ERASE
 024215 NDXSELF1 ERASE
 0242162NDXSELF2 ERASE
 02422  KEEP1    ERASE
 024221 KEEP2    ERASE
 024222 KEEP3    ERASE
 024223 KEEP4    ERASE
 024224 KEEP5    ERASE
 024225 KEEP6    ERASE
 0242262KEEP7    ERASE
 02423  SELFRET  ERASE
 024231 SFAIL    ERASE
 024232 ERCOUNT  ERASE
 024233 SCOUNT   ERASE
 0242342SMODE    ERASE
R0243  4END OF SELF CHECK ASSIGNMENTS
R0244  2         WAITLIST TASK LISTS:
 0245  2         SETLOC 1400
 0246   LST1     ERASE  +4              DELTA TS.
 0247   LST2     ERASE  +11D            2CADR TASK ADDRESSES.
L      2INPUT/OUTPUT CHANNELS
 0001   OUT0     EQUALS 10
 0002   DSALMOUT EQUALS 11
 00021  CHAN13   EQUALS 13
 0003   MNKEYIN  EQUALS 15
 0004   NAVKEYIN EQUALS 16
R0005   END OF CHANNEL ASSIGNMENTS
LINS   2INTERRUPT LEAD INS
 0001  2         SETLOC 4000
 0002            INHINT                 GO
 0003            CAF    GOBB
 0004            XCH    BBANK
 0005  2         TCF    GOPROG
 0006            DXCH   ARUPT           T6RUPT
 0007            CAF    T6RPTBB
 0008            XCH    BBANK
 0009  2         TCF    RESUME  +3      ***FIX LATER***
 0010            DXCH   ARUPT           T5RUPT
 0011            CAF    T5RPTBB
 0012            XCH    BBANK
 0013  2         TCF    RESUME  +3      ***FIX LATER***
 0014            DXCH   ARUPT           T3RUPT
 0015            CAF    T3RPTBB
 0016            XCH    BBANK
 0017  2         TCF    T3RUPT
 0018            DXCH   ARUPT           T4RUPT
 0019            CAF    T4RPTBB
 0020            XCH    BBANK
 0021  2         TCF    T4RUPT
 0022            DXCH   ARUPT           KEYRUPT1
 0023            CAF    KEYRPTBB
 0024            XCH    BBANK
 0025  2         TCF    KEYRUPT1
 0026            DXCH   ARUPT           KEYRUPT2
 0027            CAF    KEYRPTBB
 0028            XCH    BBANK
 0029  2         TCF    KEYRUPT2
 0030            DXCH   ARUPT           UPRUPT
 0031            CAF    UPRPTBB
 0032            XCH    BBANK
 0033  2         TCF    UPRUPT
 0034            DXCH   ARUPT           DOWNRUPT
 0035            CAF    DWNRPTBB
 0036            XCH    BBANK
 0037  2         TCF    RESUME  +3      ***FIX LATER***
 0038  2         RESUME                 RADAR RUPT    ****FIX LATER******
 0039  2         SETLOC 4050
 0040  4         RESUME                 HAND CONTROL RUPT   ***FIX LATER****
 0041  2         SETLOC 4054
 0042            EBANK= LST1            RESTART USES E0, E3
 0043  2GOBB     BBCON  GOPROG
 0044            EBANK= TIME1
 0045  2T6RPTBB  BBCON  RESUME          ***FIX LATER***
 0046            EBANK= TIME1
 0047  2T5RPTBB  BBCON  RESUME          ***FIX LATER***
 0048            EBANK= LST1
 0049  2T3RPTBB  BBCON  T3RUPT
 0050            EBANK= DSRUPTSW
 0051  2T4RPTBB  BBCON  T4RUPT
 0052            EBANK= KEYTEMP1
 0053  2KEYRPTBB BBCON  KEYRUPT1
 0054  2UPRPTBB  =      KEYRPTBB
 0055            EBANK= TIME1
 0056  2DWNRPTBB BBCON  RESUME          ***FIX LATER ***
 0057   ENDINTFF EQUALS
L      2LIST-PROCESSING INTERPRETER
R0001  2SECTION 1  DISPATCHER
R0002            ENTRY TO THE INTERPRETER. INTPRET SETS LOC TO THE FIRST  INSTRU
 0003  9CTION, BANKSET TO THE FBANK OF THE
R0004   OBJECT INTERPRETIVE PROGRAM, AND INTBIT15 TO THE BIT15 CONTENTS OF FBANK
 0005  9. INTERPRETIVE PROGRAMS MAY BE IN
R0006   VIRTUALLY ALL BANKS PRESENT UNDER ANY SUPER-BANK SETTING, WITH THE RESTR
 0007  9ICTION THAT PROGRAMS IN HIGH BANKS
R0008   (BIT15 OF FBANK = 1) DO NOT REFER TO LOWBANKS, AND VICE-VERSA. THE INTER
 0009  9PRETER DOES NOT SWITCH SUPER-BANK,
R0010  4NOR DOES IT SWITCH EBANKS. MOST EBANK SWITCHING IS DONE BY THE EXECUTIVE
 0011  9 PROGRAM.
 0012  2         SETLOC 6000
 0013   INTPRET  EXTEND                 SET LOC TO THE WORD FOLLOWING THE TC.
 0014  2         QXCH   LOC
 0015    +2      CA     FBANK           INTERPRETIVE BRANCHES FINISH HERE.
 0016            TS     BANKSET
 0017            MASK   BIT15           GET 15TH BIT FOR INDEXABLE ADDRESSES.
 0018            TS     INTBIT15
 0019            AD     LOW10           THIS VERSION IS USED IN PROCESSING
 0020  2         TS     INTB15+         INDEXABLE FIXED-BANK ADDRESSES.
 0021  4         TCF    NEWOPS          PICK UP OP CODE PAIR AND BEGIN.
 0022   INTRSM   LXCH   BBANK           RESUME SUSPENDED INTERPRETIVE JOB
 0023            TCF    DANZIG +3       (ACTUALLY PART OF THE EXECUTIVE).
P0024  2         AT THE END OF MOST INSTRUCTIONS, CONTROL IS GIVEN TO DANZIG TO
 0025  9DISPATCH THE NEXT OPERATION.
 0026  2NEWMODE  TS     MODE            PROLOGUE FOR MODE-CHANGING INSTRUCTIONS.
 0027   DANZIG   CA     BANKSET         SET FBANK BEFORE TESTING NEWJOB SO THAT
 0028  2         TS     FBANK           BBANK MAY BE SAVED DIRECTLY BY CHANJOB.
 0029            CCS    EDOP            SEE IF AN ORDER CODE IS LEFT OVER FROM
 0030            TCF    OPJUMP          THE LAST PAIR RETRIEVED. IF SO, EXECUTE.
A0031  2                                EDOP IS SET TO ZERO ON ITS RE-EDITING.
 0032            CCS    NEWJOB          SEE IF A JOB OF HIGHER PRIORITY IS
 0033  2         TCF    CHANG2          PRESENT, AND IF SO, CHANGE JOBS.
 0034            INCR   LOC             ADVANCE THE LOCATION COUNTER.
 0035   NEWOPS   INDEX  LOC             ENTRY TO BEGIN BY PICKING OP CODE PAIR.
 0036            CA     0               MAY BE AN OPCODE PAIR OR A STORE CODE.
 0037            CCS    A               TEST SIGN AND GET DABS(A).
 0038  2         TCF    DOSTORE         PROCESS STORE CODE.
 0039  2LOW7     OCT    177
 0040            TS     EDOP            OP CODE PAIR. LEAVE THE OTHER IN EDOP
 0041  2         MASK   LOW7            WHERE  CCS EDOP  WILL HONOR IT NEXT.
 0042   OPJUMP   TS     CYR             LOWWD ENTERS HERE IF A RIGHT-HAND OP
 0043            CCS    CYR             CODE IS TO BE PROCESSED. TEST PREFICES.
 0044  2         TCF    OPJUMP2         TEST SECOND PREFIX BIT.
 0045            TCF    EXIT            +0 OP CODE IS EXIT.
P0046  2         PROCESS ADDRESSES WHICH MAY BE DIRECT, INDEXED, OR REFERENCE TH
 0047  9E PUSHDOWN LIST.
 0048   ADDRESS  MASK   BIT1            SEE IF ADDRESS IS INDEXED. CYR CONTAINED
 0049            CCS    A               400XX, SO BIT 1 IS NOW AS IT WAS IN CYR.
 0050  2         TCF    INDEX           FORM INDEXED ADDRESS.
 0051   DIRADRES INDEX  LOC             LOOK AHEAD TO NEXT WORD TO SEE IF
 0052   OCT40001 CS     1               ADDRESS IS GIVEN.
 0053            CCS    A
 0054  2         TCF    PUSHUP          IF NOT.
 0055  2NEG4     DEC    -4
 0056            INCR   LOC             IF SO, TO SHOW WE PICKED UP A WORD.
 0057            TS     ADDRWD
P0058            FINAL DIGESTION OF DIRECT ADDRESSES OF OP CODES WITH 01 PREFIX
 0059  9IS DONE HERE. IN EACH CASE, THE
R0060   REQUIRED 12 BIT SUB-ADDRESS IS LEFT IN ADDRWD, WITH ANY REQUIRED BANK SW
 0061  9ITCHING DONE (F ONLY). ADDRESSES LESS
R0062  4THAN 45D ARE TAKEN TO BE RELATIVE TO THE WORK AREA. THE OP CODE IS NOW I
 0063  9N BITS 1-5 OF CYR WITH BIT 14 = 1.
 0064            AD     -ENDVAC         SEE IF ADDRESS RELATIVE TO WORK AREA.
 0065            CCS    A
 0066            AD     -ENDERAS        IF NOT, SEE IF IN GENERAL ERASABLE.
 0067  2         TCF    IERASTST
 0068   NETZERO  CA     FIXLOC          IF SO, LEAVE THE MODIFIED ADDRESS IN
 0069            ADS    ADDRWD          ADDRWD AND DISPATCH.
 0070    +2      INDEX  CYR             THIS INDEX MAKES THE NEXT INSTRUCTION
 0071  2         7      INDJUMP -1      TCF INDJUMP + OP, EDITING CYR.
 0072   IERASTST EXTEND
 0073  2         BZMF   NETZERO +2      GENERAL ERASABLE - DISPATCH IMMEDIATELY.
 0074   FIXEDADR AD     INTB15+         FIXED BANK ADDRESS. RESTORE AND ADD B15.
 0075    +1      TS     FBANK           SWITCH BANKS AND LEAVE SUB-ADDRESS IN
 0076            MASK   LOW10           ADDRWD FOR OPERAND RETRIEVAL.
 0077            AD     2K
 0078            TS     ADDRWD
 0079            INDEX  CYR
 0080            7      INDJUMP -1
P0081            THE FOLLOWING ROUTINE PROCESSES INTERPRETIVE INDEXED ADDRESSES.
 0082  9 AN INTERPRETER INDEX REGISTER MAY
R0083   CONTAIN THE ADDRESS OF ANY ERASABLE REGISTER (0-42 BEING RELATIVE TO THE
 0084  9 VAC AREA) OR ANY INTERPRETIVE PROGRAM
R0085  2BANK, OR ANY INTEGER IN THAT RANGE.
 0086   DODLOAD* CAF    DLOAD*          STODL* COMES HERE TO PROCESS LOAD ADR.
 0087  2         TS     CYR             (STOVL* ENTERS HERE).
 0088   INDEX    CA     FIXLOC          SET UP INDEX LOCATION.
 0089            TS     INDEXLOC
 0090            INCR   LOC             (ADDRESS ALWAYS GIVEN).
 0091            INDEX  LOC
 0092            CS     0
 0093            CCS    A               INDEX 2 IF ADDRESS STORED COMPLEMENTED.
 0094            INCR   INDEXLOC
 0095  2         NOOP
 0096            TS     ADDRWD          14 BIT ADDRESS TO ADDRWD.
 0097            MASK   BANKMASK        IF ADDRESS GREATER THAN 1K, ADD INTBIT15
 0098            EXTEND
 0099            BZF    INDEX2
 0100            CA     INTBIT15
 0101  2         ADS    ADDRWD
 0102   INDEX2   INDEX  INDEXLOC
 0103            CS     X1
 0104  2         ADS    ADDRWD          DO AUGMENT, IGNORING AND CORRECTING OVF.
 0105            MASK   HIGH9           SEE IF ADDRESS IS IN WORK AREA.
 0106            EXTEND
 0107            BZF    INDWORK
 0108            MASK   BANKMASK        SEE IF IN FIXED BANK.
 0109            EXTEND
 0110  2         BZF    INDERASE
 0111            CA     ADDRWD          IN FIXED - SWITCH BANKS AND CREATE
 0112            TS     FBANK           SUB-ADDRESS.
 0113            MASK   LOW10
 0114            AD     2K
 0115            TS     ADDRWD
 0116            INDEX  CYR
 0117  2         3      INDJUMP -1
 0118   INDWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO WORK AREA.
 0119  2         ADS    ADDRWD
 0120   INDERASE INDEX  CYR
 0121            3      INDJUMP -1
P0122            PUSH-UP ROUTINES. WHEN NO OPERAND ADDRESS IS GIVEN, THE APPROPR
 0123  9IATE OPERAND IS TAKEN FROM THE PUSH-DOWN
R0124   LIST. IN MOST CASES THE MODE OF THE RESULT (VECTOR OR SCALAR) OF THE LAS
 0125  9T ARITHMETIC OPERATION PERFORMED
R0126   IS THE SAME AS THE TYPE OF OPERAND DESIRED (ALL ADD/SUBTRACT ETC.). EXCE
 0127  9PTIONS TO THIS GENERAL RULE ARE LISTED
R0128  2BELOW (NOTE THAT IN EVERY CASE THE MODE REGISTER IS LEFT INTACT):
R0129            1.  VXSC AND V/SC WANT THE OPPOSITE TYPE OF OPERAND, E.G., IF T
 0130  9HE LAST OPERATION YIELDED A VECTOR
R0131  2RESULT, VXSC WANTS A SCALAR.
R0132            2.  THE LOAD CODES SHOULD LOAD THE ACCUMULATOR INDEPENDENT OF T
 0133  9HE RESULT OF THE LAST OPERATION. THIS
R0134  2INCLUDES VLOAD, DLOAD, TLOAD, PDDL, AND PDVL (NO PUSHUP WITH SLOAD).
R0135            3.  SOME ARITHMETIC OPERATIONS REQUIRE A STANDARD TYPE OF OPERA
 0136  9ND REGARDLESS OF THE PREVIOUS OPERATION.
R0137  2THIS INCLUDES SIGN WANTING DP AND TAD REQUIRING TP.
 0138   PUSHUP   CAF    OCT23           IF THE LOW 5 BITS OF CYR ARE LESS THAN
 0139            MASK   CYR             20, THIS OP REQUIRES SPECIAL ATTENTION.
 0140            AD     -OCT10          (NO -0).
 0141            CCS    A
 0142  2         TCF    REGUP           FOR ALL CODES GREATER THAN OCT 7.
 0143  2-OCT10   OCT    -10
 0144            AD     NEG4            WE NOW HAVE 7 - OP CODE(MOD4). SEE IF
 0145            CCS    A               THE OP CODE (MOD4) IS THREE (REVERSE).
 0146            INDEX  A               NO - THE MODE IS DEFINITE. PICK UP THE
 0147            CS     NO.WDS
 0148  2         TCF    REGUP +2
 0149            INDEX  MODE            FOR VXSC AND V/SC WE WANT THE REQUIRED
 0150            CS     REVCNT          PUSHLOC DECREMENT WITHOUT CHANGING THE
 0151  2         TCF    REGUP +2        MODE AT THIS TIME.
 0152   REGUP    INDEX  MODE            MOST ALL OP CODES PUSHUP HERE.
 0153            CS     NO.WDS
 0154    +2      ADS    PUSHLOC
 0155            TS     ADDRWD
 0156            INDEX  CYR
 0157  2         7      INDJUMP -1      (THE INDEX MAKES THIS A TCF.)
 0158            OCT    2               REVERSE PUSHUP DECREMENT. VECTOR TAKES 2
 0159   REVCNT   OCT    6               WORDS, SCALAR TAKES 6.
 0160            OCT    6
 0161   NO.WDS   OCT    2               CONVENTIONAL DECREMENT IS 6 WORDS VECTOR
 0162            OCT    3               2 IN DP, AND 3 IN TP.
 0163            OCT    6
P0164  2         TEST THE SECOND PREFIX BIT TO SEE IF THIS IS A MISCELLANEOUS OR
 0165  9 A UNARY/SHORT SHIFT OPERATION.
 0166   OPJUMP2  CCS    CYR             TEST SECOND PREFIX BIT.
 0167  2         TCF    OPJUMP3         TEST THIRD BIT TO SEE IF UNARY OR SHIFT.
 0168  2-ENDVAC  DEC    -45
R0169            THE FOLLOWING ROUTINE PROCESSES ADDRESSES OF SUFFIX CLASS 10. T
 0170  9HEY ARE BASICALLY WORK AREA ADDRESSES
R0171   IN THE RANGE 0 - 52, ERASABLE ADRES CONSTANTS FROM 100 - 1777, AND FCADR
 0172  9S ABOVE THAT. ALL 15 BITS ARE AVAILABLE
R0173  2IN CONTRAST TO SUFFIX 1, IN WHICH ONLY THE LOW ORDER 14 ARE AVAILABLE.
 0174   15BITADR INCR   LOC             (ENTRY HERE FROM STCALL).
 0175            INDEX  LOC             PICK UP ADDRESS WORD.
 0176            CA     0
 0177            TS     POLISH          THE ABSOLUTE ADDRESS WILL BE LEFT IN
 0178            TS     ADDRWD          POLISH WITH AN ERASABLE SUBADDRESS IN
A0179                                   ADDRWD.
 0180            MASK   HIGH9           SEE IF RELATIVE TO THE WORK AREA.
 0181            CCS    A
 0182            TCF    +2
 0183  2         TCF    RELWORK         ONLY IF ZERO.
 0184            CAF    LOW7+2K         THESE INSTRUCTIONS ARE IN BANK 1.
 0185            TS     FBANK
 0186            MASK   CYR
 0187            INDEX  A
 0188  2         TCF    MISCJUMP
 0189   RELWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO FIXLOC, LEAVING
 0190            ADS    ADDRWD          POLISH ABSOLUTE IN CASE THIS WAS AN
 0191            CAF    LOW7+2K         AXT, ETC.
 0192            TS     FBANK
 0193            MASK   CYR
 0194            INDEX  A
 0195            TCF    MISCJUMP
P0196  2         COMPLETE THE DISPATCHING OF UNARY AND SHORT SHIFT OPERATIONS.
 0197   OPJUMP3  TS     FBANK           CALL IN BANK 0 (BITS 11-15 OF A ARE 0.)
 0198            CCS    CYR             TEST THIRD PREFIX BIT.
 0199            INDEX  A               THE DECREMENTED UNARY CODE IS IN BITS
 0200  2         TCF    UNAJUMP         1-4 OF A (ZERO, EXIT, HAS BEEN DETECTED)
 0201            CCS    MODE            ITS A SHORT SHIFT CODE. SEE IF PRESENT
 0202            TCF    SHORTT          SCALAR OR VECTOR.
 0203            TCF    SHORTT
 0204  4         TCF    SHORTV          CALLS THE APPROPRIATE ROUTINE.
 0205   OCT23    OCT    23              MASK USED BY PUSH-UP ROUTINE.
 0206   LOW7+2K  OCT    2177            OP CODE MASK + BANK 1 FBANK SETTING.
 0207   HIGH9    OCT    77700
 0208   BANKMASK OCT    76000           FBANK MASK.
 0209   FBANKMSK EQUALS BANKMASK
 0210   B11T14   OCT    36000           USED IN PROCESSING STORE CODES.
 0211   -ENDERAS DEC    -977
P0212  2         THE FOLLOWING IS THE JUMP TABLE FOR OP CODES WHICH MAY HAVE IND
 0213  9EXABLE ADDRESSES OR MAY PUSH UP.
 0214   INDJUMP  TCF    VLOAD           00 - LOAD MPAC WITH A VECTOR.
 0215            TCF    TAD             01 - TRIPLE PRECISION ADD TO MPAC.
 0216            TCF    SIGN            02 - COMPLEMENT MPAC (V OR SC) IF X NEG.
 0217            TCF    VXSC            03 - VECTOR TIMES SCALAR.
 0218            TCF    CGOTO           04 - COMPUTED GO TO.
 0219            TCF    TLOAD           05 - LOAD MPAC WITH TRIPLE PRECISION.
 0220            TCF    DLOAD           06 - LOAD MPAC WITH A DP SCALAR.
 0221  2         TCF    V/SC            07 - VECTOR DIVIDED BY SCALAR.
 0222            TCF    SLOAD           10 - LOAD MPAC IN SINGLE PRECISION.
 0223            TCF    SSP             11 - SET SINGLE PRECISION INTO X.
 0224            TCF    PDDL            12 - PUSH DOWN MPAC AND RE-LOAD IN DP.
 0225            TCF    MXV             13 - MATRIX POST-MULTIPLIED BY VECTOR.
 0226            TCF    PDVL            14 - PUSH DOWN AND VECTOR LOAD.
 0227            TCF    CCALL           15 - COMPUTED CALL.
 0228            TCF    VXM             16 - MATRIX PRE-MULTIPLIED BY VECTOR.
 0229  2         TCF    TSLC            17 - NORMALIZE MPAC (SCALAR ONLY).
 0230            TCF    DMPR            20 - DP MULTIPLY AND ROUND.
 0231            TCF    DDV             21 - DP DIVIDE BY.
 0232            TCF    BDDV            22 - DP DIVIDE INTO.
 0233            TCF    GSHIFT          23 - GENERAL SHIFT INSTRUCTION.
 0234            TCF    VAD             24 - VECTOR ADD.
 0235            TCF    VSU             25 - VECTOR SUBTRACT.
 0236            TCF    BVSU            26 - VECTOR SUBTRACT FROM.
 0237  2         TCF    DOT             27 - VECTOR DOT PRODUCT.
 0238            TCF    VXV             30 - VECTOR CROSS PRODUCT.
 0239            TCF    VPROJ           31 - VECTOR PROJECTION.
 0240            TCF    DSU             32 - DP SUBTRACT.
 0241            TCF    BDSU            33 - DP SUBTRACT FROM.
 0242            TCF    DAD             34 - DP ADD.
 0243            TCF                    35 - AVAILABLE
 0244            TCF    DMP1            36 - DP MULTIPLY.
 0245  2         TCF    SETPD           37 - SET PUSH DOWN POINTER (DIRECT ONLY)
R0246   CODES 10 AND 14 MUST NOT PUSH UP. CODE 04 MAY BE USED FOR VECTOR DECLARE
 0247  9 BEFORE PUSHUP IF DESIRED.
P0248  2         THE FOLLOWING JUMP TABLE APPLIES TO INDEX, BRANCH, AND MISCELLA
 0249  9NEOUS INSTRUCTIONS.
 0250   MISCJUMP TCF    AXT             00 - ADDRESS TO INDEX TRUE.
 0251            TCF    AXC             01 - ADDRESS TO INDEX COMPLEMENTED.
 0252            TCF    LXA             02 - LOAD INDEX FROM ERASABLE.
 0253            TCF    LXC             03 - LOAD INDEX FROM COMPLEMENT OF ERAS.
 0254            TCF    SXA             04 - STORE INDEX IN ERASABLE.
 0255            TCF    XCHX            05 - EXCHANGE INDEX WITH ERASABLE.
 0256            TCF    INCR            06 - INCREMENT INDEX REGISTER.
 0257  2         TCF    TIX             07 - TRANSFER ON INDEX.
 0258            TCF    XAD             10 - INDEX REGISTER ADD FROM ERASABLE.
 0259            TCF    XSU             11 - INDEX SUBTRACT FROM ERASABLE.
 0260            TCF    BZE/GOTO        12 - BRANCH ZERO AND GOTO.
 0261            TCF    BPL/BMN         13 - BRANCH PLUS AND BRANCH MINUS.
 0262            TCF    CALL/ITA        14 - CALL AND STORE QPRET.
 0263            TCF    RTB/BHIZ        15 - RETURN TO BASIC AND BRANCH HI ZERO.
 0264            TCF    SW/             16 - SWITCH INSTRUCTIONS AND AVAILABLE.
 0265            TCF    BOV(B)          17 - BRANCH ON OVERFLOW TO BASIC OR INT.
P0266  2         THE FOLLOWING JUMP TABLE APPIES TO UNARY INSTRUCTIONS.
A0267                                   00 - EXIT - DETECTED EARLIER.
 0268   UNAJUMP  TCF    SQRT            01 - SQUARE ROOT.
 0269            TCF    SINE            02 - SIN.
 0270            TCF    COSINE          03 - COS.
 0271            TCF    ARCSIN          04 - ARC SIN.
 0272            TCF    ARCCOS          05 - ARC COS.
 0273            TCF    DSQ             06 - DP SQUARE.
 0274  2         TCF    ROUND           07 - ROUND TO DP.
 0275            TCF    COMP            10 - COMPLEMENT VECTOR OR SCALAR.
 0276            TCF    VDEF            11 - VECTOR DEFINE.
 0277            TCF    UNIT            12 - UNIT VECTOR.
 0278            TCF    ABVALABS        13 - LENGTH OF VECTOR OR MAG OF SCALAR.
 0279            TCF    VSQ             14 - SQUARE OF LENGTH OF VECTOR.
 0280            TCF    STADR           15 - PUSH UP ON STORE CODE.
 0281            TCF    RVQ             16 - RETURN VIA QPRET.
 0282            TCF    PUSH            17 - PUSH MPAC DOWN.
P0283  2SECTION 2  LOAD AND STORE PACKAGE.
R0284            A SET OF SIXTEEN STORE CODES ARE PROVIDED AS THE PRIMARY METHOD
 0285  9 OF STORING THE MULTI-PURPOSE
R0286   ACCUMULATOR (MPAC). IF IN THE DANZIG SECTION LOC REFERS TO AN ALGEBRAICA
 0287  9LLY POSITIVE WORD, IT IS TAKEN AS A
R0288   STORE CODE WITH A CORRESPONDING ERASABLE ADDRESS. MOST OF THESE CODES AR
 0289  9E TWO ADDRESS, SPECIFYING THAT THE WORD
R0290  2FOLLOWING THE STORE CODE IS TO BE USED AS AN ADDRESS FROM WHICH TO RE-LO
 0291  9AD MPAC. FOUR OPTIONS ARE AVAILABLE:
R0292            1. STORE               STORE MPAC. THE E ADDRESS MAY BE INDEXED
 0293  9.
R0294            2. STODL               STORE MPAC AND RE-LOAD IT IN DP WITH THE
 0295  9 NEXT ADDRESS (EITHER MAY BE INDEXED).
R0296            3. STOVL               STORE MPAC AND RE-LOAD A VECTOR (AS ABOV
 0297  9E).
R0298  2         4. STCALL              STORE AND DO A CALL (BOTH ADDRESSES MUST
 0299  9 BE DIRECT HERE).
R0300  4         STODL AND STOVL WILL TAKE FROM THE PUSH-DOWN LIST IF NO LOAD AD
 0301  9DRESS IS GIVEN.
 0302   STADR    CA     BANKSET         THE STADR CODE (PUSHUP UP ON STORE
 0303            TS     FBANK           ADDRESS) ENTERS HERE.
 0304            INCR   LOC
 0305            INDEX  LOC             THE STORE CODE WAS STORE COMPLEMENTED TO
 0306  2         CS     0               MAKE IT LOOK LIKE AN OPCODE PAIR.
 0307   DOSTORE  TS     ADDRWD
 0308            MASK   LOW10           ENTRY FROM DISPATCHER. SAVE THE ERASABLE
 0309            XCH    ADDRWD          ADDRESS AND JUMP ON THE STORE CODE NO.
 0310            MASK   B11T14
 0311            EXTEND
 0312            MP     BIT6            EACH TRANSFER VECTOR ENTRY IS TWO WORDS.
 0313            INDEX  A
 0314            TCF    STORJUMP
P0315            STORE CODE JUMP TABLE. CALLS THE APPROPRIATE STORING ROUTINE AN
 0316  9D EXITS TO DANZIG OR TO ADDRESS WITH
R0317  2A SUPPLIED OPERATION CODE.
 0318   STORJUMP TC     STORE           STORE.
 0319            TCF    NEWOPS -1       PICK UP NEW OP CODE(S).
 0320            TC     STORE,1
 0321            TCF    NEWOPS -1
 0322            TC     STORE,2
 0323  2         TCF    NEWOPS -1
 0324            TC     STORE           STODL.
 0325            TCF    DODLOAD
 0326            TC     STORE,1
 0327            TCF    DODLOAD
 0328            TC     STORE,2
 0329  2         TCF    DODLOAD
 0330            TC     STORE           STODL WITH INDEXED LOAD ADDRESS.
 0331            TCF    DODLOAD*
 0332            TC     STORE,1
 0333            TCF    DODLOAD*
 0334            TC     STORE,2
 0335  2         TCF    DODLOAD*
 0336            TC     STORE           STOVL.
 0337            TCF    DOVLOAD
 0338            TC     STORE,1
 0339            TCF    DOVLOAD
 0340            TC     STORE,2
 0341  2         TCF    DOVLOAD
 0342            TC     STORE           STOVL WITH INDEXED LOAD ADDRESS.
 0343            TCF    DOVLOAD*
 0344            TC     STORE,1
 0345            TCF    DOVLOAD*
 0346            TC     STORE,2
 0347  2         TCF    DOVLOAD*
 0348            TC     STORE           STOTC.
 0349            CAF    CALLCODE
 0350            TS     CYR
 0351            TCF    15BITADR        GET A 15 BIT ADDRESS.
P0352  2         STORE CODE ADDRESS PROCESSOR.
 0353   STORE,1  INDEX  FIXLOC
 0354            CS     X1
 0355  2         TCF    PRESTORE
 0356   STORE,2  INDEX  FIXLOC
 0357            CS     X2
 0358  2PRESTORE ADS    ADDRWD          RESULTANT ADDRESS IS IN ERASABLE.
 0359   STORE    CA     ADDRWD          SEE IF ADDRESS RELATIVE TO WORK AREA.
 0360            AD     -ENDVAC
 0361            CCS    A
 0362  2         TCF    STARTSTO        ADDRESS OK AS IS.
 0363  2LOW10    OCT    1777
 0364            CA     FIXLOC          GIVEN ADDRESS IS RELATIVE TO WORK AREA.
 0365            ADS    ADDRWD
P0366  2         STORING ROUTINES. STORE DP, TP, OR VECTOR AS INDICATED BY MODE.
 0367   STARTSTO EXTEND                 MPAC,+1 MUST BE STORED IN ANY EVENT.
 0368            DCA    MPAC
 0369            INDEX  ADDRWD
 0370  2         DXCH   0
 0371            CCS    MODE
 0372            TCF    TSTORE
 0373  2         TC     Q
 0374   VSTORE   EXTEND
 0375            DCA    MPAC +3
 0376            INDEX  ADDRWD
 0377  2         DXCH   2
 0378            EXTEND
 0379            DCA    MPAC +5
 0380            INDEX  ADDRWD
 0381            DXCH   4
 0382  2         TC     Q
 0383   TSTORE   CA     MPAC +2
 0384            INDEX  ADDRWD
 0385            TS     2
 0386            TC     Q
P0387            ROUTINES TO BEGIN PROCESSING OF THE SECOND ADDRESS ASSOCIATED W
 0388  9ITH ALL STORE-TYPE CODES EXCEPT STORE
R0389  2ITSELF.
 0390   DODLOAD  CAF    DLOADCOD
 0391            TS     CYR
 0392  2         TCF    DIRADRES        GO GET A DIRECT ADDRESS.
 0393   DOVLOAD  CAF    VLOADCOD
 0394            TS     CYR
 0395  2         TCF    DIRADRES
 0396   DOVLOAD* CAF    VLOAD*
 0397            TCF    DODLOAD* +1     PROLOGUE TO INDEX ROUTINE.
P0398  2         THE FOLLOWING LOAD INSTRUCTIONS ARE PROVIDED FOR LOADING THE MU
 0399  9LTI-PURPOSE ACCUMULATOR MPAC.
 0400   DLOAD    EXTEND
 0401            INDEX  ADDRWD
 0402            DCA    0               PICK UP DP ARGUMENT AND LEAVE IT IN
 0403   SLOAD2   DXCH   MPAC            MPAC,+1, SETTING MPAC +2 TO ZERO. THE
 0404            CAF    ZERO            CONTENTS OF THE OTHER FOUR REGISTERS OF
 0405            TS     MPAC +2         MPAC ARE IRRELEVANT.
 0406  2         TCF    NEWMODE         DECLARE DOUBLE PRECISION MODE.
 0407   TLOAD    INDEX  ADDRWD
 0408            CA     2               LOAD A TRIPLE PRECISION ARGUMENT INTO
 0409            TS     MPAC +2         THE FIRST THREE MPAC REGISTERS, WITH THE
 0410            EXTEND                 CONTENTS OF THE OTHER FOUR IRRELEVANT.
 0411            INDEX  ADDRWD
 0412            DCA    0
 0413            DXCH   MPAC
 0414            CAF    ONE
 0415  2         TCF    NEWMODE         DECLARE TRIPLE PRECISION MODE.
 0416   SLOAD    ZL                     LOAD A SINGLE PRECISION NUMBER INTO
 0417            INDEX  ADDRWD          MPAC, SETTING MPAC+1,2 TO ZERO. THE
 0418            CA     0               CONTENTS OF THE REMAINING MPAC REGISTERS
 0419  2         TCF    SLOAD2          ARE IRRELEVANT.
 0420   VLOAD    EXTEND                 LOAD A DOUBLE PRECISION VECTOR INTO
 0421            INDEX  ADDRWD          MPAC,+1, MPAC+3,4, AND MPAC+5,6. THE
 0422            DCA    0               CONTENTS OF MPAC +2 ARE IRRELEVANT.
 0423  2         DXCH   MPAC
 0424   ENDVLOAD EXTEND                 PDVL COMES HERE TO FINISH UP FOR DP, TP.
 0425            INDEX  ADDRWD
 0426            DCA    2
 0427  2         DXCH   MPAC +3
 0428    +4      EXTEND                 TPDVL FINISHES HERE.
 0429            INDEX  ADDRWD
 0430            DCA    4
 0431  2         DXCH   MPAC +5
 0432            CS     ONE             DECLARE VECTOR MODE.
 0433            TCF    NEWMODE
P0434  2         THE FOLLOWING INSTRUCTIONS ARE PROVIDED FOR STORING OPERANDS IN
 0435  9 THE PUSHDOWN LIST:
R0436            1.  PUSH               PUSHDOWN AND NO LOAD.
R0437            2.  PDDL               PUSHDOWN AND DOUBLE PRECISION LOAD.
R0438  2         3.  PDVL               PUSHDOWN AND VECTOR LOAD.
 0439   PDDL     EXTEND
 0440            INDEX  ADDRWD          LOAD MPAC,+1, PUSHING THE FORMER
 0441            DCA    0               CONTENTS DOWN.
 0442            DXCH   MPAC
 0443            INDEX  PUSHLOC
 0444  2         DXCH   0
 0445            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER APPRO-
 0446            CAF    NO.WDS          PRIATELY.
 0447  2         ADS    PUSHLOC
 0448            CCS    MODE
 0449            TCF    ENDTPUSH
 0450  2         TCF    ENDDPUSH
 0451            TS     MODE            NOW DP.
 0452   ENDVPUSH TS     MPAC +2
 0453            DXCH   MPAC +3         PUSH DOWN THE REST OF THE VECTOR HERE.
 0454            INDEX  PUSHLOC
 0455  2         DXCH   0 -4
 0456            DXCH   MPAC +5
 0457            INDEX  PUSHLOC
 0458  2         DXCH   0 -2
 0459  2         TCF    DANZIG
 0460   ENDDPUSH TS     MPAC +2         SET MPAC +2 TO ZERO AND EXIT ON DP.
 0461  2         TCF    DANZIG
 0462   ENDTPUSH TS     MODE
 0463            XCH    MPAC +2         ON TRIPLE, SET MPAC +2 TO ZERO, PUSHING
 0464    +2      INDEX  PUSHLOC         DOWN THE OLD CONTENTS
 0465            TS     0 -1
 0466            TCF    DANZIG
P0467  2         PDVL - PUSHDOWN AND VECTOR LOAD.
 0468   PDVL     EXTEND                 RELOAD MPAC AND PUSH DOWN ITS CONTENTS.
 0469            INDEX  ADDRWD
 0470            DCA    0
 0471            DXCH   MPAC
 0472            INDEX  PUSHLOC
 0473  2         DXCH   0
 0474            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER.
 0475            CAF    NO.WDS
 0476  2         ADS    PUSHLOC
 0477            CCS    MODE            TEST PAST MODE.
 0478            TCF    TPDVL
 0479  2         TCF    ENDVLOAD        JUST LOAD LAST FOUR REGISTERS ON DP.
 0480   VPDVL    EXTEND                 PUSHDOWN AND RE-LOAD LAST TWO COMPONENTS
 0481            INDEX  ADDRWD
 0482            DCA    2
 0483            DXCH   MPAC +3
 0484            INDEX  PUSHLOC
 0485  2         DXCH   0 -4
 0486            EXTEND
 0487            INDEX  ADDRWD
 0488            DCA    4
 0489            DXCH   MPAC +5
 0490            INDEX  PUSHLOC
 0491  2         DXCH   0 -2
 0492  2         TCF    DANZIG
 0493   TPDVL    EXTEND                 ON TP, WE MUST LOAD THE Y COMPONENT
 04931           INDEX  ADDRWD          BEFORE STORING MPAC +2 INCASE THIS IS A
 04932           DCA    2               PUSHUP.
 04933 2         DXCH   MPAC +3
 04934           CA     MPAC +2
 0494            INDEX  PUSHLOC         IN DP.
 0495            TS     0 -1
 0496  2         TCF    ENDVLOAD +4
R0497  2         SSP (STORE SINGLE PRECISION) IS EXECUTED HERE.
 0498   SSP      INCR   LOC             PICK UP THE WORD FOLLOWING THE GIVEN
 0499            INDEX  LOC             ADDRESS AND STORE IT AT X.
 0500            CA     0
 0501   STORE1   INDEX  ADDRWD          SOME INDEX AND MISCELLANEOUS OPS END
 0502            TS     0               HERE.
 0503            TCF    DANZIG
P0504  2SEQUENCE CHANGING AND SUBROUTINE CALLING OPTIONS.
R0505  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR SEQUENCING CHANGING,
 0506  9 BRANCHING, AND CALLING SUBROUTINES:
R0507            1.  GOTO               GO TO.
R0508            2.  CALL               CALL SUBROUTINE SETTING QPRET.
R0509            3.  CGOTO              COMPUTED GO TO.
R0510            4.  CCALL              COMPUTED CALL.
R0511            7.  BPL                BRANCH IF MPAC POSITIVE OR ZERO.
R0512            8.  BZE                BRANCH IF MPAC ZERO.
R0513  2         9.  BMN                BRANCH IF MPAC NEGATIVE NON-ZERO.
 0514   CCALL    INCR   LOC             MAINTAIN LOC FOR QPRET COMPUTATION.
 0515            INDEX  LOC
 0516            CAF    0               GET BASE ADDRESS OF CADR LIST.
 0517            INDEX  ADDRWD
 0518            AD     0               ADD INCREMENT.
 0519            TS     FBANK           SELECT DESIRED CADR.
 0520            MASK   LOW10
 0521            INDEX  A
 0522            CAF    10000
 0523  2 -1      TS     POLISH
 0524   CALL     CS     LOW10           FOR ANY OF THE CALL OPTIONS, MAKE UP THE
 0525            AD     LOC             ADDRESS OF THE NEXT OP-CODE PAIR/STORE
 0526            AD     BANKSET         CODE AND LEAVE IT IN QPRET. NOTE THAT
 0527            INDEX  FIXLOC          LOW10 = 2000 - 1.
 0528  2         TS     QPRET
 0529   GOTO     CA     POLISH          BASIC BRANCHING SEQUENCE.
 0530            TS     FBANK
 0531            MASK   LOW10           MAKE UP 12 BIT SUB-ADDRESS AND FALL INTO
 0532            AD     2K              FALL INTO THE INTPRET ENTRY UNLESS THE
 0533            TS     LOC             GIVEN ADDRESS WAS IN ERASABLE, IN WHICH
 0534            CCS    FBANK           CASE IT IS USED AS THE ADDRESS OF THE
 0535            TCF    INTPRET +2      BRANCH ADDRESS.
 0536            TCF    +2
 0537  8         TCF    INTPRET +2
 0538            CS     LOC             THE GIVEN ADDRESS IS IN ERASABLE - SEE
 0539            AD     EVAC+2K         IF RELATIVE TO THE WORK AREA.
 0540            CCS    A
 0541            CA     FIXLOC          ADD FIXLOC IF SO.
 0542  2         ADS    LOC
 0543            INDEX  LOC
 0544            CA     0 -2000         (ADDRESS HAD BEEN AUGMENTED BY 2000.)
 0545  2         TCF    GOTO +1         ALLOWS ARBITRARY INDIRECTNESS.
 0546   CGOTO    INDEX  LOC             COMPUTED GO TO. PICK UP ADDRESS OF CADR
 0547            CA     1               LIST.
 0548            INDEX  ADDRWD          ADD MODIFIER.
 0549            AD     0
 0550            TS     FBANK           SELECT GOTO ADDRESS.
 0551            MASK   LOW10
 0552            INDEX  A
 0553            CA     10000
 0554  2         TCF    GOTO +1         WITH ADDRESS IN A.
 0555   SWBRANCH CA     BANKSET         SWITCH INSTRUCTIONS WHICH ELECT TO
 0556            TS     FBANK           BRANCH COME HERE TO DO SO.
 0557            INDEX  LOC
 0558            CA     1
 0559  2         TCF    GOTO +1
 0560   EVAC+2K  DEC    1069            =1024+45
P0561  2         TRIPLE PRECISION BRANCHING ROUTINE. IF CALLING TC IS AT L, RETU
 0562  9RN IS AS FOLLOWS:
R0563            L+1  IF MPAC IS GREATER THAN ZERO.
R0564            L+2  IF MPAC IS EQUAL TO +0 OR -0.
R0565  4         L+3  IF MPAC IS LESS THAN ZERO.
 0566   BRANCH   CCS    MPAC
 0567            TC     Q
 0568            TCF    +2              ON ZERO.
 0569  2         TCF    NEG
 0570            CCS    MPAC +1
 0571            TC     Q
 0572            TCF    +2
 0573  2         TCF    NEG
 0574            CCS    MPAC +2
 0575            TC     Q
 0576            TCF    +2
 0577  2         TCF    NEG
 0578            INDEX  Q               IF ALL THREE REGISTERS WERE +-0.
 0579  2         TC     1
 0580   NEG      INDEX  Q               IF FIRST NON-ZERO REGISTER WAS NEGATIVE.
 0581  4         TC     2
 0582   EXIT     INDEX  LOC             LEAVE INTERPRETIVE MODE.
 0583            TCF    1
P0584  2SECTION 3 - ADD/SUBTRACT PACKAGE.
R0585            THE FOLLOWING OPERATIONS ARE PROVIDED FOR ADDING TO AND SUBTRAC
 0586  9TING FROM THE MULTI-PURPOSE ACCUMULATOR
R0587  2MPAC:
R0588            1.  DAD                DOUBLE PRECISION ADD.
R0589            2.  DSU                DOUBLE PRECISION SUBTRACT.
R0590  2         3.  BDSU               DOUBLE PRECISION SUBTRACT FROM.
R0591  2         4.  TAD                TRIPLE PRECISION ADD.
R0592            5.  VAD                VECTOR ADD.
R0593            6.  VSU                VECTOR SUBTRACT.
R0594  2         7.  BVSU               VECTOR SUBTRACT FROM.
R0595  4THE INTERPRETIVE OVERFLOW INDICATOR OVFIND IS SET NON-ZERO IF OVERFLOW O
 0596  9CCURS IN ANY OF THE ABOVE.
 0597   VAD      EXTEND
 0598            INDEX  ADDRWD
 0599            DCA    2
 0600            DAS    MPAC +3
 0601            EXTEND                 CHECK OVERFLOW.
 0602            BZF    +2
 0603  2         TC     OVERFLOW
 0604            EXTEND
 0605            INDEX  ADDRWD
 0606            DCA    4
 0607            DAS    MPAC +5
 0608            EXTEND
 0609            BZF    +2
 0610  2         TC     OVERFLOW
 0611   DAD      EXTEND
 0612            INDEX  ADDRWD
 0613            DCA    0
 0614   ENDVXV   DAS    MPAC            VXV FINISHES HERE.
 0615            EXTEND
 0616            BZF    DANZIG
 0617            TC     OVERFLOW
 0618  8         TCF    DANZIG
 0619   VSU      EXTEND
 0620            INDEX  ADDRWD
 0621            DCS    2
 0622            DAS    MPAC +3
 0623            EXTEND
 0624            BZF    +2
 0625  2         TC     OVERFLOW
 0626            EXTEND
 0627            INDEX  ADDRWD
 0628            DCS    4
 0629            DAS    MPAC +5
 0630            EXTEND
 0631            BZF    +2
 0632  2         TC     OVERFLOW
 0633   DSU      EXTEND
 0634            INDEX  ADDRWD
 0635            DCS    0
 0636            DAS    MPAC
 0637            EXTEND
 0638            BZF    DANZIG
 0639            TC     OVERFLOW
 0640  2         TCF    DANZIG
 0641   OVERFLOW CAF    ONE             SUBROUTINE TO TURN OVFIND ON.
 0642  8         TCF    SETOVF2
 0643   BVSU     EXTEND
 0644            INDEX  ADDRWD
 0645            DCA    2
 0646            DXCH   MPAC +3
 0647            EXTEND
 0648            DCOM
 0649            DAS    MPAC +3
 0650            EXTEND
 0651            BZF    +2
 0652  2         TC     OVERFLOW
 0653            EXTEND
 0654            INDEX  ADDRWD
 0655            DCA    4
 0656            DXCH   MPAC +5
 0657            EXTEND
 0658            DCOM
 0659            DAS    MPAC +5
 0660            EXTEND
 0661            BZF    +2
 0662  2         TC     OVERFLOW
 0663   BDSU     EXTEND
 0664            INDEX  ADDRWD
 0665            DCA    0
 0666            DXCH   MPAC
 0667            EXTEND
 0668            DCOM
 0669            DAS    MPAC
 0670            EXTEND
 0671            BZF    DANZIG
 0672            TC     OVERFLOW
 0673            TCF    DANZIG
P0674  2         TRIPLE PRECISION ADD ROUTINE.
 0675   TAD      EXTEND
 0676            INDEX  ADDRWD
 0677            DCA    1               ADD MINOR PARTS FIRST.
 0678            DAS    MPAC +1
 0679            INDEX  ADDRWD
 0680            AD     0
 0681            AD     MPAC
 0682            TS     MPAC
 0683  2         TCF    DANZIG
 0684   SETOVF   TS     OVFIND          SET OVFIND IF SUCH OCCURS.
 0685            TCF    DANZIG
P0686  2ARITHMETIC SUBROUTINES REQUIRED IN FIXED-FIXED.
R0687            1.  DMPSUB     DOUBLE PRECISION MULTIPLY. MULTIPLY THE CONTENTS
 0688  9 OF MPAC,+1 BY THE DP WORD WHOSE ADDRESS
R0689                           IS IN ADDRWD AND LEAVE A TRIPLE PRECISION RESULT
 0690  9 IN MPAC.
R0691            2.  ROUNDSUB   ROUND THE TRIPLE PRECISON CONTENTS OF MPAC TO DO
 0692  9UBLE PRECISION.
R0693            3.  DOTSUB     TAKE THE DOT PRODUCT OF THE VECTOR IN MPAC AND T
 0694  9HE VECTOR WHOSE ADDRESS IS IN ADDRWD
R0695                           AND LEAVE THE TRIPLE PRECISION RESULT IN MPAC.
R0696            4.  POLY       USING THE CONTENTS OF MPAC AS A DP ARGUMENT, EVA
 0697  9LUATE THE POLYNOMIAL WHOSE DEGREE AND
R0698  4                        COEFFICIENTS IMMEDIATELY FOLLOW THE TC POLY INST
 0699  9RUCTION (SEE ROUTINE FOR DETAILS.)
 0700   DMP      INDEX  Q               BASIC SUBROUTINE FOR USE BY PINBALL, ETC
 0701            CAF    0               ADRES OF ARGUMENT FOLLOWS  TC DMP  .
 0702            INCR   Q
 0703  2 -1      TS     ADDRWD          (PROLOGUE FOR SETTING ADDRWD.)
 0704   DMPSUB   INDEX  ADDRWD          GET MINOR PART OF OPERAND AT C(ADDRWD).
 0705            CA     1
 0706            TS     MPAC +2         THIS WORKS FOR SQUARING MPAC AS WELL.
 0707            CAF    ZERO            SET MPAC +1 TO ZERO SO WE CAN ACCUMULATE
 0708            XCH    MPAC +1         THE PARTIAL PRODUCTS WITH DAS
 0709            TS     MPTEMP          INSTRUCTIONS.
 0710            EXTEND
 0711  2         MP     MPAC +2         MINOR OF MPAC X MINOR OF C(ADDRWD).
 0712            XCH    MPAC +2         DISCARD MINOR PART OF ABOVE RESULT AND
 0713            EXTEND                 FORM MAJOR OF MPAC X MINOR OF C(ADDRWD).
 0714            MP     MPAC
 0715  2         DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 0716            INDEX  ADDRWD          GET MAJOR PART OF ARGUMENT AT C(ADDRWD).
 0717            CA     0
 0718            XCH    MPTEMP          SAVE AND BRING OUT MINOR OF MPAC.
 0719            EXTEND
 0720            MP     MPTEMP          MAJOR OF C(ADDRWD) X MINOR OF MPAC.
 0721  2         DAS    MPAC +1         ACCUMULATE, SETTING A TO NET OVERFLOW.
 0722            XCH    MPAC            SETTING MPAC TO 0 OR +-1.
 0723            EXTEND
 0724            MP     MPTEMP          MAJOR OF MPAC X MAJOR OF C(ADDRWD).
 0725            DAS    MPAC            GUARANTEED NO OVERFLOW.
 0726            TC     Q               49 MCT = .573 MS. INCLUDING RETURN.
P0727  2         ROUND MPAC TO DOUBLE PRECISION, SETTING OVFIND ON THE RARE EVEN
 0728  9T OF OVERFLOW.
 0729  2ROUNDSUB CAF    ZERO            SET MPAC +2 TO ZERO FOR SCALARS.
 0730   VROUND   XCH    MPAC +2         BUT WE NEEDNT TAKE THE TIME FOR VECTORS.
 0731            DOUBLE
 0732            TS     L
 0733  2         TC     Q
 0734            AD     MPAC +1         ADD ROUNDING BIT IF MPAC +2 WAS GREATER
 0735            TS     MPAC +1         THAN .5 IN MAGNITUDE.
 0736  2         TC     Q
 0737            AD     MPAC            PROPAGATE INTERFLOW.
 0738            TS     MPAC
 0739  2         TC     Q
 0740   SETOVF2  TS     OVFIND          (RARE).
 0741            TC     Q
P0742            THE DOT PRODUCT SUBROUTINE USUALLY FORMS THE DOT PRODUCT OF THE
 0743  9 VECTOR IN MPAC WITH A STANDARD SIX
R0744   REGISTER VECTOR WHOSE ADDRESS IS IN ADDRWD. IN THIS CASE C(DOTINC) ARE S
 0745  9ET TO 2. VXM, HOWEVER, SETS C(DOTINC) TO
R0746  46 SO THAT DOTSUB DOTS MPAC WITH A COLUMN VECTOR OF THE MATRIX IN QUESTIO
 0747  9N IN THIS CASE.
 0748   PREDOT   CAF    TWO             PROLOGUE TO SET DOTINC TO 2.
 0749  2         TS     DOTINC
 0750   DOTSUB   EXTEND
 0751            QXCH   DOTRET          SAVE RETURN.
 0752            TC     DMPSUB          DOT X COMPONENTS.
 0753            DXCH   MPAC +3         POSITION Y COMPONENT OF MPAC FOR
 0754            DXCH   MPAC            MULTIPLICATION WHILE SAVING RESULT IN
 0755            DXCH   BUF             THREE WORD BUFFER, BUF.
 0756            CA     MPAC +2
 0757  2         TS     BUF +2
 0758            CA     DOTINC          ADVANCE ADDRWD TO Y COMPONENT OF
 0759            ADS    ADDRWD          OTHER ARGUMENT.
 0760            TC     DMPSUB
 0761            DXCH   MPAC +1         ACCUMULATE PARTIAL PRODUCTS.
 0762            DAS    BUF +1
 0763            AD     MPAC
 0764            AD     BUF
 0765            TS     BUF
 0766            TCF    +2
 0767  2         TS     OVFIND          IF OVERFLOW OCCURS.
 0768            DXCH   MPAC +5         MULTIPLY Z COMPONENTS.
 0769            DXCH   MPAC
 0770            CA     DOTINC
 0771            ADS    ADDRWD
 0772            TC     DMPSUB
 0773   ENDDOT   DXCH   BUF +1          LEAVE FINAL ACCUMULATION IN MPAC.
 0774            DAS    MPAC +1
 0775            AD     MPAC
 0776            AD     BUF
 0777            TS     MPAC
 0778  2         TC     DOTRET
 0779            TS     OVFIND          ON OVERFLOW HERE.
 0780            TC     DOTRET
P0781  2DOUBLE PRECISION POLYNOMIAL EVALUATOR.
R0782                                      N        N-1
R0783            THIS ROUTINE EVALUATES A X  + A   X    + ... + A X + A LEAVING
 0784  9THE DP RESULT IN MPAC ON EXIT.
R0785  2                                 N      N-1              1     0
R0786  2IT IS ASSUMED THAT X ARRIVES IN MPAC AND N AND THE COEFFICIENTS IN THE C
 0787  9ALLING SEQUENCE AS FOLLOWS:
A0788   L        TC     POLY
A0789   L+1      DEC    N-1
A0790   L+2      2DEC   A(0)
A0791            ...
A0792  2L+2N+2   2DEC   A(N)            RETURN IS TO L+2N+4.
 0793   POLY     CAF    LVBUF           INCOMING X WILL BE STORED IN VBUF, SO
 0794  2         TS     ADDRWD          SET ADDRWD SO DMPSUB WILL MPY BY VBUF.
 0795            INDEX  Q
 0796            CAF    0
 0797            TS     POLYCNT         N-1 TO COUNTER.
 0798            DOUBLE
 0799            AD     Q
 0800            TS     POLYRET         SAVE L+2N-1 FOR RETURN
 0801  2         TS     POLISH          AND FOR REFERENCING COEFFICIENTS.
 0802            EXTEND
 0803            INDEX  A               LOAD A(N) INTO MPAC, SAVING MPAC IN
 0804            DCA    3               VBUF.
 0805            DXCH   MPAC
 0806            DXCH   VBUF
 0807  2         TCF    POLY2           NO ZERO-ORDER POLYNOMIALS ALLOWED.
 0808   POLYLOOP TS     POLYCNT         SAVE DECREMENTED LOOP COUNTER.
 0809            CS     TWO             REGRESS COEFFICIENT POINTER.
 0810  2         ADS    POLISH
 0811   POLY2    TC     DMPSUB          MULTIPLY BY X.
 0812            EXTEND
 0813            INDEX  POLISH          ADD IN NEXT COEFFICIENT.
 0814            DCA    1
 0815            DAS    MPAC            NO CHECK FOR OVERFLOW SINCE SIN, ETC.,
A0816                                   SHOULD NOT OVERFLOW.
 0817            CCS    POLYCNT         LOOP ON COUNTER.
 0818            TCF    POLYLOOP
 0819            INDEX  POLYRET         DONE - RETURN TO CALLER AT L+2N+4.
 0820   FIVE     TC     5
P0821  2         MISCELLANEOUS MULTI-PRECISION ROUTINES REQUIRED IN FIXED-FIXED
 0822  9BUT NOT USED BY THE INTERPRETER.
 0823   TPAGREE  EXTEND                 FORCE SIGN AGREEMENT AMONG THE TRIPLE-
 0824            QXCH   BUF             PRECISION CONTENTS OF MPAC, RETURNING
 0825            TC     BRANCH          WITH THE SIGNUM OF THE INPUT IN A.
 0826            TCF    ARG+
 0827  2         TCF    ARGZERO
 0828            CS     POSMAX          IF NEGATIVE.
 0829  2         TCF    +2
 0830   ARG+     CAF    POSMAX
 0831    +2      TS     BUF +1
 0832            EXTEND
 0833            AUG    A               FORMS +-1.0.
 0834            AD     MPAC +2
 0835            TS     MPAC +2
 0836            CAF    ZERO
 0837            AD     BUF +1
 0838            AD     MPAC +1
 0839            TS     MPAC +1
 0840            CAF    ZERO
 0841            AD     BUF +1
 0842            AD     MPAC
 0843   ARGZERO2 TS     MPAC            ALWAYS SKIPPING UNLESS ARGZERO.
 0844            TS     MPAC +1
 0845  2         TC     BUF             RETURN.
 0846   ARGZERO  TS     MPAC +2         SET ALL THREE MPAC REGISTERS TO ZERO.
 0847  2         TCF    ARGZERO2
R0848  2         SHORTMP MULTIPLIES THE TP CONTENTS OF MPAC BY THE SINGLE PRECIS
 0849  9ION NUMBER ARRIVING IN A.
 0850   SHORTMP  TS     MPTEMP
 0851            EXTEND
 0852            MP     MPAC +2
 0853            TS     MPAC +2
 0854            CAF    ZERO            SO SUBSEQUENT DAS WILL WORK.
 0855            XCH    MPAC +1
 0856            EXTEND
 0857            MP     MPTEMP
 0858            DAS    MPAC +1
 0859            XCH    MPAC            SETTING MPAC TO 0.
 0860            EXTEND
 0861            MP     MPTEMP
 0862            DAS    MPAC
 0863            TC     Q
P0864  2MISCELLANEOUS VECTOR OPERATIONS. INCLUDED HERE ARE THE FOLLOWING:
R0865            1.  DOT                DP VECTOR DOT PRODUCT.
R0866            2.  VXV                DP VECTOR CROSS PRODUCT.
R0867            3.  VXSC               DP VECTOR TIMES SCALAR.
R0868            4.  V/SC               DP VECTOR DIVIDED BY SCALAR.
R0869            5.  VPROJ              DP VECTOR PROJECTION. ( (MPAC.X)MPAC ).
R0870            6.  VXM                DP VECTOR POST-MULTIPLIED BY MATRIX.
R0871  4         7.  MXV                DP VECTOR PRE-MULTIPLIED BY MATRIX.
 0872   DOT      TC     PREDOT          DO THE DOT PRODUCT AND EXIT, CHANGING
 0873            CAF    ZERO            THE MODE TO DP SCALAR.
 0874  4         TCF    NEWMODE
 0875   MXV      CAF    TWO             SET UP MATINC AND DOTINC FOR ROW
 0876            TS     MATINC          VECTORS.
 0877  2         TCF    VXM/MXV         GO TO COMMON PORTION.
 0878   VXM      CS     TEN             SET MATINC AND DOTINC TO REFER TO MATRIX
 0879            TS     MATINC          AS THREE COLUMN VECTORS.
 0880            CAF    SIX
P0881  2         COMMON PORTION OF MXV AND VXM.
 0882   VXM/MXV  TS     DOTINC
 0883  2         TC     MPACVBUF        SAVE VECTOR IN MPAC FOR FURTHER USE.
 0884            TC     DOTSUB          GO DOT TO GET X COMPONENT OF ANSWER.
 0885            EXTEND
 0886            DCA    VBUF            MOVE MPAC VECTOR BACK INTO MPAC, SAVING
 0887            DXCH   MPAC            NEW X COMPONENT IN BUF2.
 0888            DXCH   BUF2
 0889            EXTEND
 0890            DCA    VBUF +2
 0891            DXCH   MPAC +3
 0892            EXTEND
 0893            DCA    VBUF +4
 0894            DXCH   MPAC +5
 0895            CA     MATINC          INITIALIZE ADDRWD FOR NEXT DOT PRODUCT.
 0896  2         ADS    ADDRWD          FORMS BASE ADDRESS OF NEXT COLUMN(ROW).
 0897            TC     DOTSUB
 0898            DXCH   VBUF            MOVE GIVEN VECTOR BACK TO MPAC, SAVING Y
 0899            DXCH   MPAC            COMPONENT OF ANSWER IN VBUF +2.
 0900            DXCH   VBUF +2
 0901            DXCH   MPAC +3
 0902            DXCH   VBUF +4
 0903            DXCH   MPAC +5
 0904            CA     MATINC          FORM ADDRESS OF LAST COLUMN OR ROW.
 0905  2         ADS    ADDRWD
 0906            TC     DOTSUB
 0907            DXCH   BUF2            ANSWER NOW COMPLETE. PUT COMPONENTS INTO
 0908            DXCH   MPAC            PROPER MPAC REGISTERS.
 0909            DXCH   MPAC +5
 0910            DXCH   VBUF +2
 0911            DXCH   MPAC +3
 0912            TCF    DANZIG          EXIT.
P0913  2         VXSC - VECTOR TIMES SCALAR.
 0914   VXSC     CCS    MODE            TEST PRESENT MODE.
 0915            TCF    DVXSC           SEPARATE ROUTINE WHEN SCALAR IS IN MPAC.
 0916  2         TCF    DVXSC
 0917   VVXSC    TC     DMPSUB          COMPUTE X COMPONENT
 0918            TC     VROUND          AND ROUND IT.
 0919            DXCH   MPAC +3         PUT Y COMPONENT INTO MPAC SAVING MPAC IN
 0920            DXCH   MPAC            MPAC +3.
 0921  2         DXCH   MPAC +3
 0922            TC     DMPSUB          DO SAME FOR Y AND Z COMPONENTS.
 0923            TC     VROUND
 0924            DXCH   MPAC +5
 0925            DXCH   MPAC
 0926  2         DXCH   MPAC +5
 0927            TC     DMPSUB
 0928            TC     VROUND
 0929   VROTATEX DXCH   MPAC            EXIT USED TO RESTORE MPAC AFTER THIS
 0930            DXCH   MPAC +5         TYPE OF ROTATION. CALLED BY VECTOR SHIFT
 0931            DXCH   MPAC +3         RIGHT, V/SC, ETC.
 0932            DXCH   MPAC
 0933            TCF    DANZIG
P0934  2         DP VECTOR PROJECTION ROUTINE.
 0935   VPROJ    TC     PREDOT          (MPAC.X)MPAC IS COMPUTED AND LEFT IN
A0936  2                                MPAC. DO DOT AND FALL INTO DVXSC.
R0937  2         VXSC WHEN SCALAR ARRIVES IN MPAC AND VECTOR IS AT X.
 0938   DVXSC    EXTEND                 SAVE SCALAR IN MPAC +3 AND GET X
 0939            DCA    MPAC            COMPONENT OF ANSWER.
 0940            DXCH   MPAC +3
 0941            TC     DMPSUB
 0942  2         TC     VROUND
 0943            CAF    TWO             ADVANCE ADDRWD TO Y COMPONENT OF X.
 0944            ADS    ADDRWD
 0945            EXTEND
 0946            DCA    MPAC +3         PUT SCALAR BACK INTO MPAC AND SAVE
 0947            DXCH   MPAC            X RESULT IN MPAC +5.
 0948            DXCH   MPAC +5
 0949            TC     DMPSUB
 0950  2         TC     VROUND
 0951            CAF    TWO
 0952            ADS    ADDRWD          TO Z COMPONENT.
 0953            DXCH   MPAC +3         BRING SCALAR BACK, PUTTING Y RESULT IN
 0954            DXCH   MPAC            THE PROPER PLACE.
 0955            DXCH   MPAC +3
 0956            TC     DMPSUB
 0957  2         TC     VROUND
 0958            DXCH   MPAC            PUT Z COMPONENT IN PROPER PLACE, ALSO
 0959            DXCH   MPAC +5         POSITIONING X.
 0960  2         DXCH   MPAC
 0961            CS     ONE             MODE HAS CHANGED TO VECTOR.
 0962            TCF    NEWMODE
P0963            THE VECTOR CROSS PRODUCT ROUTINE CALCULATES (X M -X M ,X M -X M
 0964  9 ,X M -X M ) WHERE M IS THE VECTOR IN
R0965                                                          3 2  2 3  1 3  3
 0966  91  2 1  1 2
R0967  4MPAC AND X THE VECTOR AT THE GIVEN ADDRESS.
 0968   VXV      EXTEND
 0969            DCA    MPAC +5         FORM UP M3X1, LEAVING M1 IN VBUF.
 0970            DXCH   MPAC
 0971            DXCH   VBUF
 0972  2         TC     DMPSUB          BY X1.
 0973            EXTEND
 0974            DCS    MPAC +3         CALCULATE -X1M2, SAVING X1M3 IN VBUF +2.
 0975            DXCH   MPAC
 0976            DXCH   VBUF +2
 0977  2         TC     DMPSUB
 0978            CAF    TWO             ADVANCE ADDRWD TO X2.
 0979            ADS    ADDRWD
 0980            EXTEND
 0981            DCS    MPAC +5         PREPARE TO GET -X2M3, SAVING -X1M2 IN
 0982            DXCH   MPAC            MPAC +5.
 0983            DXCH   MPAC +5
 0984  2         TC     DMPSUB
 0985            EXTEND
 0986            DCA    VBUF            GET X2M1, SAVING -X2M3 IN VBUF +4.
 0987            DXCH   MPAC
 0988            DXCH   VBUF +4
 0989  2         TC     DMPSUB
 0990            CAF    TWO             ADVANCE ADDRWD TO X3.
 0991            ADS    ADDRWD
 0992            EXTEND
 0993            DCS    VBUF            GET -X3M1, ADDING X2M1 TO MPAC +5 TO
 0994            DXCH   MPAC            COMPLETE THE Z COMPONENT OF THE ANSWER.
 0995  2         DAS    MPAC +5
 0996            EXTEND
 0997            BZF    +2
 0998  8         TC     OVERFLOW
 0999            TC     DMPSUB
 1000            DXCH   VBUF +2         MOVE X1M3 TO MPAC +3 SETTING UP FOR X3M2
 1001            DXCH   MPAC +3         AND ADD -X3M1 TO MPAC +3 TO COMPLETE THE
 1002            DXCH   MPAC            Y COMPONENT OF THE RESULT.
 1003  2         DAS    MPAC +3
 1004            EXTEND
 1005            BZF    +2
 1006  2         TC     OVERFLOW
 1007            TC     DMPSUB
 1008            DXCH   VBUF +4         GO ADD -X2M3 TO X3M2 TO COMPLETE THE X
 1009  2         TCF    ENDVXV          COMPONENT (TAIL END OF DAD).
R1010  2         THE MPACVBUF SUBROUTINE SAVES THE VECTOR IN MPAC IN VBUF WITHOU
 1011  9T CLOBBERING MPAC.
 1012   MPACVBUF EXTEND                 CALLED BY MXV, VXM, AND UNIT.
 1013            DCA    MPAC
 1014            DXCH   VBUF
 1015            EXTEND
 1016            DCA    MPAC +3
 1017            DXCH   VBUF +2
 1018            EXTEND
 1019            DCA    MPAC +5
 1020            DXCH   VBUF +4
 1021            TC     Q               RETURN TO CALLER.
P1022  2         INTERPRETIVE INSTRUCTIONS WHOSE EXECUTION CONSISTS OF PRINCIPAL
 1023  9LY CALLING SUBROUTINES.
 1024   DMP1     TC     DMPSUB          DMP INSTRUCTION.
 1025  2         TCF    DANZIG
 1026   DMPR     TC     DMPSUB
 1027            TC     ROUNDSUB
 1028  2         TCF    DANZIG
 1029   DDV      EXTEND
 1030            INDEX  ADDRWD          MOVE DIVIDEND INTO BUF.
 1031            DCA    0
 1032  2         TCF    BDDV +4
 1033   BDDV     EXTEND                 MOVE DIVISOR INTO MPAC SAVING MPAC, THE
 1034            INDEX  ADDRWD          DIVIDEND, IN BUF.
 1035            DCA    0
 1036            DXCH   MPAC
 1037    +4      DXCH   BUF
 1038            CAF    ZERO            DIVIDE ROUTINES IN BANK 0.
 1039            TS     FBANK
 1040  2         TCF    DDV/BDDV
 1041   SETPD    CA     ADDRWD          ANYWHERE IN ERASABLE IN GENERAL, BUT
 1042            TS     PUSHLOC         ALMOST ALWAYS IN THE WORK AREA.
 1043  2         TCF    DANZIG
 1044   TSLC     CAF    ZERO            SHIFTING ROUTINES LOCATED IN BANK 00.
 1045            TS     FBANK
 1046  2         TCF    TSLC2
 1047   GSHIFT   CAF    LOW7            USED AS MASK AT GENSHIFT. THIS PROCESSES
 1048            TS     FBANK           ANY SHIFT INSTRUCTION (EXCEPT TSLC) WITH
 1049            TCF    GENSHIFT        AN ADDRESS (ROUTINES IN BANK 0).
P1050            THE FOLLOWING IS THE PROLOGUE TO V/SC. IF THE PRESENT MODE IS V
 1051  9ECTOR, IT SAVES THE SCALAR AT X IN BUF
R1052   AND CALLS THE V/SC ROUTINE IN BANK 0. IF THE PRESENT MODE IS SCALAR, IT
 1053  9MOVES THE VECTOR AT X INTO MPAC, SAVING
R1054  4THE SCALAR IN MPAC IN BUF BEFORE CALLING THE V/SC ROUTINE IN BANK 0.
 1055   V/SC     CCS    MODE
 1056            TCF    DV/SC           MOVE VECTOR INTO MPAC.
 1057  2         TCF    DV/SC
 1058   VV/SC    EXTEND
 1059            INDEX  ADDRWD
 1060            DCA    0
 1061   V/SC1    DXCH   BUF             IN BOTH CASES, VECTOR IS NOW IN MPAC AND
 1062            CAF    ZERO            SCALAR IN BUF.
 1063            TS     FBANK
 1064  2         TCF    V/SC2
 1065   DV/SC    EXTEND
 1066            INDEX  ADDRWD
 1067            DCA    2
 1068            DXCH   MPAC +3
 1069            EXTEND
 1070            INDEX  ADDRWD
 1071            DCA    4
 1072  2         DXCH   MPAC +5
 1073            CS     ONE             CHANGE MODE TO VECTOR.
 1074  2         TS     MODE
 1075            EXTEND
 1076            INDEX  ADDRWD
 1077            DCA    0
 1078            DXCH   MPAC
 1079            TCF    V/SC1           FINISH PROLOGUE AT COMMON SECTION.
P1080  2         SIGN AND COMPLEMENT INSTRUCTIONS.
 1081   SIGN     INDEX  ADDRWD          CALL COMP INSTRUCTION IF WORD AT X IS
 1082            CCS    0               NEGATIVE NON-ZERO.
 1083            TCF    DANZIG
 1084            TCF    +2
 1085  2         TCF    COMP            DO THE COMPLEMENT.
 1086            INDEX  ADDRWD
 1087            CCS    1
 1088            TCF    DANZIG
 1089            TCF    DANZIG
 1090            TCF    COMP
 1091  4         TCF    DANZIG
 1092   COMP     EXTEND                 COMPLEMENT DP MPAC IN EVERY CASE.
 1093            DCS    MPAC
 1094  2         DXCH   MPAC
 1095            CCS    MODE            EITHER COMPLEMENT MPAC +3 OR THE REST OF
 1096            TCF    DCOMP           THE VECTOR ACCUMULATOR.
 1097  2         TCF    DCOMP
 1098            EXTEND                 VECTOR COMPLEMENT.
 1099            DCS    MPAC +3
 1100            DXCH   MPAC +3
 1101            EXTEND
 1102            DCS    MPAC +5
 1103            DXCH   MPAC +5
 1104  2         TCF    DANZIG
 1105   DCOMP    CS     MPAC +2
 1106            TS     MPAC +2
 1107            TCF    DANZIG
P1108  2         CONSTANTS REQUIRED IN FIXED-FIXED.
 1109   DPOSMAX  OCT    37777
 1110   POSMAX   OCT    37777
 1111  2NEG1/2   OCT    -20000          MUST BE TWO LOCATIONS AHEAD OF POS1/2.
 1112   BIT15    OCT    40000           BIT TABLE FOLLOWS.
 1113   BIT14    OCT    20000
 1114   BIT13    OCT    10000
 1115   BIT12    OCT    04000
 1116   BIT11    OCT    02000
 1117   BIT10    OCT    01000
 1118   BIT9     OCT    00400
 1119   BIT8     OCT    00200
 1120   BIT7     OCT    00100
 1121   BIT6     OCT    00040
 1122   BIT5     OCT    00020
 1123   BIT4     OCT    00010
 1124   BIT3     OCT    00004
 1125   BIT2     OCT    00002
 1126  2BIT1     OCT    00001
 1127   NEGMAX   EQUALS BIT15
 1128   HALF     EQUALS BIT14
 1129   POS1/2   EQUALS HALF
 1130   QUARTER  EQUALS BIT13
 1131   2K       EQUALS BIT11
 11311  ELEVEN   DEC    11
 11312  NOUTCON  =      ELEVEN
 1132   TEN      DEC    10
 11321  NINE     DEC    9
 1133   EIGHT    EQUALS BIT4
 1134   SEVEN    OCT    7
 1135   SIX      EQUALS REVCNT
 1136   FOUR     EQUALS BIT3
 1137   THREE    EQUALS NO.WDS +1
 1138   TWO      EQUALS BIT2
 1139   ONE      EQUALS BIT1
 1140   ZERO     OCT    0
 1141   NEG0     OCT    77777
 1142  2NEGONE   DEC    -1
 1143   NEG1     =      NEGONE
 1144   NEG2     OCT    77775
 1145   LOW3     EQUALS SEVEN
 1146  2LOW2     EQUALS THREE
 1147   CALLCODE OCT    00031
 1148   DLOADCOD OCT    40014
 1149   VLOADCOD EQUALS BIT15
 1150   DLOAD*   OCT    40015
 1151   VLOAD*   EQUALS OCT40001
 1152   LVBUF    ADRES  VBUF
P1153  2SHIFTING AND ROUNDING PACKAGE.
R1154  2         THE FOLLOWING SHORT SHIFT CODES REQUIRE NO ADDRESS WORD:
R1155            1.  SR1 TO SR4         SCALAR SHIFT RIGHT.
R1156            2.  SR1R TO SR4R       SCALAR SHIFT RIGHT AND ROUND.
R1157            3.  SL1 TO SL4         SCALAR SHIFT LEFT.
R1158  2         4.  SL1R TO SL4R       SCALAR SHIFT LEFT AND ROUND.
R1159            5.  VSR1 TO VSR8       VECTOR SHIFT RIGHT (ALWAYS ROUNDS).
R1160  2         6.  VSL1 TO VSL8       VECTOR SHIFT LEFT (NEVER ROUNDS).
R1161  2         THE FOLLOWING CODES REQUIRE AN ADDRESS WHICH MAY BE INDEXED:*
R1162            1.  SR                 SCALAR SHIFT RIGHT.
R1163            2.  SRR                SCALAR SHIFT RIGHT AND ROUND.
R1164            3.  SL                 SCALAR SHIFT LEFT.
R1165  2         4.  SLR                SCALAR SHIFT LEFT AND ROUND.
R1166            5.  VSR                VECTOR SHIFT RIGHT.
R1167  2         6.  VSL                VECTOR SHIFT LEFT.
R1168   *  IF THE ADDRESS IS INDEXED, AND THE INDEX MODIFICATION RESULTS IN A NE
 1169  9GATIVE SHIFT COUNT, A SHIFT OF THE
R1170  4ABSOLUTE VALUE OF THE COUNT IS DONE IN THE OPPOSITE DIRECTION.
 1171  2         SETLOC 10000           BANK 0 PORTION FOLLOWS.
 1172   SHORTT   CAF    SIX             SCALAR SHORT SHIFTS COME HERE. THE SHIFT
 1173            MASK   CYR             COUNT-1 IS NOW IN BITS 2-3 OF CYR. THE
 1174  2         TS     SR              ROUNDING BIT IS IN BIT1 AT THIS POINT.
 1175            CCS    CYR             SEE IF RIGHT OR LEFT SHIFT DESIRED.
 1176  2         TCF    TSSL            SHIFT LEFT.
 1177  2SRDDV    DEC    20              MPTEMP SETTING FOR SR BEFORE DDV.
 1178   TSSR     INDEX  SR              GET SHIFTING BIT.
 1179            CAF    BIT14
 1180  2         TS     MPTEMP
 1181            CCS    CYR             SEE IF A ROUND IS DESIRED.
 1182   RIGHTR   TC     MPACSRND        YES - SHIFT RIGHT AND ROUND.
 1183  8         TCF    DANZIG
 1184   MPACSHR  CA     MPTEMP          DO A TRIPLE PRECISION SHIFT RIGHT.
 1185            EXTEND
 1186            MP     MPAC +2
 1187    +3      TS     MPAC +2         (EXIT FROM SQRT AND ABVAL).
 1188            CA     MPTEMP
 1189            EXTEND
 1190            MP     MPAC            SHIFT MAJOR PART INTO A,L AND PLACE IN
 1191            DXCH   MPAC            MPAC,+1.
 1192            CA     MPTEMP
 1193            EXTEND
 1194            MP     L               ORIGINAL C(MPAC +1).
 1195            DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 1196  2         TCF    DANZIG
R1197  2         MPAC SHIFT RIGHT AND ROUND SUBROUTINES.
 1198   MPACSRND CA     MPAC +2         WE HAVE TO DO ALL THREE MULTIPLIES SINCE
 1199            EXTEND                 MPAC +1 AND MPAC +2 MIGHT HAVE SIGN
 1200            MP     MPTEMP          DISAGREEMENT WITH A SHIFT RIGHT OF 1.
 1201            XCH    MPAC +1
 1202            EXTEND
 1203            MP     MPTEMP
 1204            XCH    MPAC +1         TRIAL MINOR PART.
 1205  2         AD     L
 1206   VSHR2    DOUBLE                 (FINISH VECTOR COMPONENT SHIFT RIGHT
 1207            TS     MPAC +2         AND ROUND.
 1208            TCF    +2
 1209  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1210            CAF    ZERO
 1211            TS     MPAC +2
 1212            XCH    MPAC            SETTING TO ZERO SO FOLLOWING DAS WORKS.
 1213            EXTEND
 1214            MP     MPTEMP
 1215            DAS    MPAC            AGAIN NO OVERFLOW.
 1216  2         TC     Q
 1217   VSHRRND  CA     MPTEMP          ENTRY TO SHIFT RIGHT AND ROUND MPAC WHEN
 1218            EXTEND                 MPAC CONTAINS A VECTOR COMPONENT.
 1219            MP     MPAC +1
 1220            TS     MPAC +1
 1221            XCH    L
 1222            TCF    VSHR2           GO ADD ONE IF NECESSARY AND FINISH.
P1223  2         ROUTINE FOR SHORT SCALAR SHIFT LEFT (AND MAYBE ROUND).
 1224   TSSL     CA     SR              GET SHIFT COUNT FOR SR.
 1225  2 +1      TS     MPTEMP
 1226    +2      EXTEND                 ENTRY HERE FROM SL FOR SCALARS.
 1227            DCA    MPAC +1         SHIFTING LEFT ONE PLACE AT A TIME IS
 1228            DAS    MPAC +1         FASTER THAN DOING THE WHOLE SHIFT WITH
 1229            AD     MPAC            MULTIPLIES ASSUMING THAT FREQUENCY OF
 1230            AD     MPAC            SHIFT COUNTS GOES DOWN RAPIDLY AS A
 1231            TS     MPAC            FUNCTION OF THEIR MAGNITUDE.
 1232            TCF    +2
 1233            TS     OVFIND          OVERFLOW. (LEAVES OVERFLOW-CORRECTED
A1234                                   RESULT ANYWAY).
 1235            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNT.
 1236  2         TCF    TSSL +1
 1237            CCS    CYR             SEE IF ROUND WANTED.
 1238            TC     ROUNDSUB        YES - ROUND AND EXIT.
 1239            TCF    DANZIG          SL LEAVES A ZERO IN CYR FOR NO ROUND.
 1240            TCF    DANZIG          NO - EXIT IMMEDIATL
P1241  2VECTOR SHIFTING ROUTINES.
 1242   SHORTV   CAF    LOW3            SAVE 3 BIT SHIFT COUNT - 1 WITHOUT
 1243            MASK   CYR             EDITING CYR.
 1244            TS     MPTEMP
 1245            CCS    CYR             SEE IF LEFT OR RIGHT SHIFT.
 1246            TCF    VSSL            VECTOR SHIFT LEFT.
 1247  2OCT176   OCT    176             USED IN PROCESSED SHIFTS WITH - COUNT.
 1248   VSSR     INDEX  MPTEMP          (ENTRY FROM SR). PICK UP SHIFTING BIT.
 1249            CAF    BIT14           MPTEMP CONTAINS THE SHIFT COUNT - 1.
 1250            TS     MPTEMP
 1251  2         TC     VSHRRND         SHIFT X COMPONENT.
 1252            DXCH   MPAC            SWAP X AND Y COMPONENTS.
 1253            DXCH   MPAC +3
 1254            DXCH   MPAC
 1255  2         TC     VSHRRND         SHIFT Y COMPONENT.
 1256            DXCH   MPAC            SWAP Y AND Z COMPONENTS.
 1257            DXCH   MPAC +5
 1258            DXCH   MPAC
 1259  2         TC     VSHRRND         SHIFT Z COMPONENT.
 1260            TCF    VROTATEX        RESTORE COMPONENTS TO PROPER PLACES.
P1261  2VECTOR SHIFT LEFT - DONE ONE PLACE AT A TIME.
 1262  2 -1      TS     MPTEMP          SHIFTING LOOP.
 1263   VSSL     EXTEND
 1264            DCA    MPAC
 1265            DAS    MPAC
 1266            EXTEND
 1267            BZF    +2
 1268  2         TC     OVERFLOW
 1269            EXTEND
 1270            DCA    MPAC +3
 1271            DAS    MPAC +3
 1272            EXTEND
 1273            BZF    +2
 1274  2         TC     OVERFLOW
 1275            EXTEND
 1276            DCA    MPAC +5
 1277            DAS    MPAC +5
 1278            EXTEND
 1279            BZF    +2
 1280  2         TC     OVERFLOW
 1281            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNTER.
 1282            TCF    VSSL -1
 1283            TCF    DANZIG          EXIT.
P1284            TSLC - TRIPLE SHIFT LEFT AND COUNT. SHIFTS MPAC LEFT UNTIL GREA
 1285  9TER THAN .5 IN MAGNITUDE, LEAVING
R1286  2THE COMPLEMENT OF THE NUMBER OF SHIFTS REQUIRED IN X.
 1287   TSLC2    TS     MPTEMP          START BY ZEROING SHIFT COUNT (IN A NOW).
 1288            TC     BRANCH          EXIT WITH NO SHIFTING IF ARGUMENT ZERO.
 1289            TCF    +2
 1290  2         TCF    ENDTSLC         STORES ZERO SHIFT COUNT IN THIS CASE.
 1291            CA     MPAC            BEGIN NORMALIZATION LOOP.
 1292  2         TCF    TSLCTEST
 1293   TSLCLOOP INCR   MPTEMP          INCREMENT SHIFT COUNTER.
 1294            EXTEND
 1295            DCA    MPAC +1
 1296            DAS    MPAC +1
 1297            AD     MPAC
 1298            ADS    MPAC
 1299   TSLCTEST DOUBLE                 SEE IF (ANOTHER) SHIFT IS REQUIRED.
 1300            OVSK
 1301  2         TCF    TSLCLOOP        YES - INCREMENT COUNT AND SHIFT AGAIN.
 1302   ENDTSLC  CS     MPTEMP
 1303            TCF    STORE1          STORE SHIFT COUNT AND RETURN TO DANZIG.
P1304            THE FOLLOWING ROUTINES PROCESSES THE GENERAL SHIFT INSTRUCTIONS
 1305  9 SR, SRR, SL, AND SLR.
R1306  2THE GIVEN ADDRESS IS DECODED AS FOLLOWS:
R1307            BITS 1-7    SHIFT COUNT (SUBADDRESS) LESS THAN 125 DECIMAL.
R1308            BIT 8       PSEUDO SIGN BIT (DETECTS CHANGE IN SIGN IN INDEXED
 1309  9SHIFTS).
R1310            BIT 9       0 FOR LEFT SHIFT, AND 1 FOR RIGHT SHIFT.
R1311            BIT 10      1 FOR TERMINAL ROUND ON SCALAR SHIFTS, 0 OTHERWISE.
R1312  2         BITS 11-15  0.
R1313  4THE ABOVE ENCODING IS DONE BY THE YUL SYSTEM.
 1314   GENSHIFT MASK   ADDRWD          GET SHIFT COUNT, TESTING FOR ZERO.
 1315            CCS    A               (ARRIVES WITH C(A) = LOW7).
 1316  2         TCF    GENSHFT2        IF NON-ZERO, PROCEED WITH DECREMENTED CT
 1317            CAF    BIT10           ZERO SHIFT COUNT. NO SHIFTS NEEDED BUT
 1318            MASK   ADDRWD          WE MIGHT HAVE TO ROUND MPAC ON SLR AND
 1319            CCS    A               SRR (SCALAR ONLY).
 1320            TC     ROUNDSUB
 1321  2         TCF    DANZIG
 1322   GENSHFT2 TS     MPTEMP          DECREMENTED SHIFT COUNT TO MPTEMP.
 1323            CAF    BIT8            TEST MEANING OF LOW SEVEN BIT COUNT IN
 1324            EXTEND                 MPTEMP NOW.
 1325            MP     ADDRWD
 1326            MASK   LOW2            JUMPS ON SHIFT DIRECTION (BIT8) AND
 1327            INDEX  A
 1328            TCF    +1              ORIGINAL SHIFT DIRECTION (BIT 9).
 1329            TCF    RIGHT-          NEGATIVE SHIFT COUNT FOR SL OR SLR.
 1330            TCF    LEFT            SL OR SLR.
 1331            TCF    LEFT-           NEGATIVE SHIFT COUNT WITH SR OR SRR.
P1332  2         GENERAL SHIFT RIGHT.
 1333   RIGHT    CCS    MODE            SEE IF VECTOR OR SCALAR.
 1334            TCF    GENSCR
 1335  2         TCF    GENSCR
 1336            CA     MPTEMP          SEE IF SHIFT COUNT GREATER THAN 13D.
 1337   VRIGHT2  AD     NEG12
 1338            EXTEND
 1339  2         BZMF   VSSR            IF SO, BRANCH AND SHIFT IMMEDIATELY.
 1340            AD     NEGONE          IF NOT, REDUCE MPTEMP BY A TOTAL OF 14,
 1341            TS     MPTEMP          AND DO A SHIFT RIGHT AND ROUND BY 14.
 1342            CAF    ZERO            THE ROUND AT THIS STAGE MAY INTRODUCE A
 1343            TS     L               ONE BIT ERROR IN A SHIFT RIGHT 15D.
 1344            XCH    MPAC
 1345            XCH    MPAC +1
 1346            TC     SETROUND        X COMPONENT NOW SHIFTED, SO MAKE UP THE
 1347            DAS    MPAC            ROUNDING QUANTITY (0 IN A AND 0 OR +-1
A1348                                   IN L).
 1349            XCH    MPAC +3         REPEAT THE ABOVE PROCESS FOR Y AND Z.
 1350            XCH    MPAC +4
 1351            TC     SETROUND
 1352  2         DAS    MPAC +3         NO OVERFLOW ON THESE ADDS.
 1353            XCH    MPAC +5
 1354            XCH    MPAC +6
 1355            TC     SETROUND
 1356  2         DAS    MPAC +5
 1357            CCS    MPTEMP          SEE IF DONE, DOING FINAL DECREMENT.
 1358            TCF    VRIGHT2
 1359   TCSUBTR  TCF    SUBTR
 1360  2BIASLO   DEC    .2974 B-1       SQRT CONSTANT
 1361  4         TCF    DANZIG
 1362   SETROUND DOUBLE                 MAKES UP ROUNDING QUANTITY FROM ARRIVING
 1363            TS     MPAC +2         C(A). L IS ZERO INITIALLY.
 1364            CAF    ZERO
 1365            XCH    L
 1366            TC     Q               RETURN AND DO THE DAS, RESETTING L TO 0.
P1367  2         PROCESS SR AND SRR FOR SCALARS.
 1368   GENSCR   CA     MPTEMP          SEE IF THE ORIGINAL SHIFT COUNT WAS LESS
 1369    +1      AD     NEG12           THAN 14D.
 1370            EXTEND
 1371  2         BZMF   DOSSHFT         DO THE SHIFT IMMEDIATELY IF SO.
 1372    +4      AD     NEGONE          IF NOT, DECREMENT SHIFT COUNT BY 14D AND
 1373            TS     MPTEMP          SHIFT MPAC RIGHT 14 PLACES.
 1374            CAF    ZERO
 1375            XCH    MPAC
 1376            XCH    MPAC +1
 1377            TS     MPAC +2
 1378            CCS    MPTEMP          SEE IF FINISHED, DO FINAL DECREMENT.
 1379            TC     GENSCR +1
 1380   NEG12    DEC    -12
 1381   SLOPEHI  DEC    .5884           SQRT CONSTANT.
 1382            CAF    BIT10           FINISHED WITH SHIFT. SEE IF ROUND
 1383            MASK   ADDRWD          WANTED.
 1384            CCS    A
 1385            TC     ROUNDSUB
 1386  2         TCF    DANZIG          DO SO AND/OR EXIT.
 1387   DOSSHFT  INDEX  MPTEMP          PICK UP SHIFTING BIT.
 1388            CAF    BIT14
 1389            TS     MPTEMP
 1390            CAF    BIT10           SEE IF TERMINAL ROUND DESIRED.
 1391            MASK   ADDRWD
 1392            CCS    A
 1393            TCF    RIGHTR          YES.
 1394            TCF    MPACSHR         JUST SHIFT RIGHT.
P1395  2         PROCESS THE RIGHT- (SL(R) WITH A NEGATIVE COUNT), LEFT-, AND LE
 1396  9FT OPTIONS.
 1397   RIGHT-   CS     MPTEMP          GET ABSOLUTE VALUE - 1 OF SHIFT COUNT
 1398            AD     OCT176          UNDERSTANDING THAT BIT8 (PSEUDO-SIGN)
 1399            TS     MPTEMP          WAS 1 INITIALLY.
 1400  2         TCF    RIGHT           DO NORMAL SHIFT RIGHT.
 1401   LEFT-    CS     MPTEMP          SAME PROLOGUE TO LEFT FOR INDEXED RIGHT
 1402            AD     OCT176          SHIFTS WHOSE NET SHIFT COUNT IS NEGATIVE
 1403  2         TS     MPTEMP
 1404   LEFT     CCS    MODE            SINCE LEFT SHIFTING IS SONE ONE PLACE AT
 1405            TCF    GENSCL          A TIME, NO COMPARISON WITH 14 NEED BE
 1406            TCF    GENSCL          DONE. FOR SCALARS, SEE IF TERMINAL ROUND
 1407  2         TCF    VSSL            DESIRED. FOR VECTORS, SHIFT IMMEDIATELY.
 1408   GENSCL   CAF    BIT6            PUT ROUNDING BIT (BIT10 OF ADDRWD) INTO
 1409            EXTEND                 BIT 15 OF CYR WHERE THE ROUNDING BIT OF
 1410            MP     ADDRWD          A SHORT SHIFT LEFT WOULD BE.
 1411            TS     CYR
 1412            TCF    TSSL +2         DO THE SHIFT.
P1413            SCALAR DIVISION INSTRUCTIONS, DDV AND BDDV, ARE EXECUTED HERE.
 1414  9AT THIS POINT, THE DIVIDEND IS IN MPAC
R1415  2AND THE DIVISOR IN BUF.
 1416   DDV/BDDV CS     ONE             INITIALIZATION.
 1417            TS     DVSIGN          +-1 FOR POSITIVE QUOTIENT - -0 FOR NEG.
 1418            TS     DVNORMCT        DIVIDEND NORMALIZATION COUNT.
 1419  2         TS     MAXDVSW         NEAR-ONE DIVIDE FLAG.
 1420            CCS    BUF             FORCE BUF POSITIVE WITH THE MAJOR PART
 1421            TCF    BUF+            NON-ZERO.
 1422            TCF    +2
 1423  2         TCF    BUF-
 1424            XCH    BUF +1          SHIFT DIVIDEND AND DIVISOR LEFT 14.
 1425            XCH    BUF
 1426            XCH    MPAC +1
 1427            XCH    MPAC
 1428            EXTEND                 CHECK FOR OVERFLOW.
 1429            BZF    +2
 1430  2         TCF    DVOVF
 1431            CCS    BUF             TRY AGAIN ON FORMER MINOR PART.
 1432            TCF    BUF+
 1433            TCF    DVOVF           OVERFLOW ON ZERO DIVISOR.
 1434  2         TCF    BUF-
 1435   DVOVF    CAF    POSMAX          ON DIVISION OVERFLOW OF ANY SORT, SET
 1436            TS     MPAC            SET DP MPAC TO +-POSMAX.
 1437            TC     FINALDV +3
 1438            CAF    ONE             SET OVERFLOW INDICATOR AND EXIT.
 1439  2         TCF    SETOVF
 1440   BUF-     EXTEND                 IF BUF IS NEGATIVE, COMPLEMENT IT AND
 1441            DCS    BUF             MAINTAIN DVSIGN FOR FINAL QUOTIENT SIGN.
 1442            DXCH   BUF
 1443  2         INCR   DVSIGN          NOW -0.
 1444   BUF+     CCS    MPAC            FORCE MPAC POSITIVE, CHECKING FOR ZERO
 1445            TCF    MPAC+           DIVIDEND IN THE PROCESS.
 1446            TCF    +2
 1447            TCF    MPAC-
 1448            CCS    MPAC +1
 1449            TCF    MPAC+
 1450            TCF    DANZIG          EXIT IMMEDIATELY ON ZERO DIVIDEND.
 1451            TCF    MPAC-
 1452  2         TCF    DANZIG
 1453   MPAC-    EXTEND                 FORCE MPAC POSITIVE AS BUF IN BUF-.
 1454            DCS    MPAC
 1455            DXCH   MPAC
 1456  8         INCR   DVSIGN          NOW +1 OR -0.
 1457   MPAC+    CS     MPAC            CHECK FOR DIVISION OVERFLOW. IF THE
 1458            AD     NEGONE          MAJOR PART OF THE DIVIDEND IS LESS THAN
 1459            AD     BUF             THE MAJOR PART OF THE DIVISOR BY AT
 1460            CCS    A               LEAST TWO, WE CAN PROCEED IMMEDIATELY
 1461            TCF    DVNORM          WITHOUT NORMALIZATION PRODUCING A DVMAX.
 1462  2-1/2+2   OCT    60001           USED IN SQRTSUB.
 1463            TCF    +1              IF THE ABOVE DOES NOT HOLD, FORCE SIGN
 1464            CAF    HALF            AGREEMENT IN NUMERATOR AND DENOMINATOR
 1465            DOUBLE                 TO FACILITATE OVERFLOW AND NEAR-ONE
 1466            AD     MPAC +1         CHECKING.
 1467            TS     MPAC +1
 1468            CAF    ZERO
 1469            AD     POSMAX
 1470  2         ADS    MPAC
 1471            CAF    HALF            SAME FOR BUF.
 1472            DOUBLE
 1473            AD     BUF +1
 1474            TS     BUF +1
 1475            CAF    ZERO
 1476            AD     POSMAX
 1477  2         ADS    BUF
 1478            CS     MPAC            CHECK MAGNITUDE OF SIGN-CORRECTED
 1479            AD     BUF             OPERANDS.
 1480            CCS    A
 1481            TCF    DVNORM          DIVIDE OK - WILL NOT BECOME MAXDV CASE.
 1482   LBUF2    ADRES  BUF2
 1483  2         TCF    DVOVF           DIVISOR NOT LESS THAN DIVIDEND - OVF.
 1484            TS     MAXDVSW         IF THE MAJOR PARTS OF THE DIVIDEND AND
 1485            CS     MPAC +1         DIVISOR ARE EQUAL, A SPECIAL APPROXIMA-
 1486            AD     BUF +1          TION IS USED (PROVIDED THE DIVISION IS
 1487            EXTEND                 POSSIBLE, OF COURSE).
 1488            BZMF   DVOVF
 1489  8         TCF    DVNORM          IF NO OVERFLOW.
 1490   BUFNORM  EXTEND                 ADD -1 TO AUGMENT SHIFT COUNT AND SHIFT
 1491            AUG    DVNORMCT        LEFT ONE PLACE.
 1492            EXTEND
 1493            DCA    BUF
 1494  2         DAS    BUF
 1495   DVNORM   CA     BUF             SEE IF DIVISOR NORMALIZED YET.
 1496            DOUBLE
 1497            OVSK
 1498  2         TCF    BUFNORM         NO - SHIFT LEFT ONE AND TRY AGAIN.
 1499            DXCH   MPAC            CALL DIVIDEND NORMALIZATION SEQUENCE
 1500            INDEX  DVNORMCT        PRIOR TO DOING THE DIVIDE.
 1501  2         TC     MAXTEST
 1502            TS     MPAC +2         RETURNS WITH DIVISION DONE AND C(A) = 0.
 1503            TCF    DANZIG
P1504  2         THE FOLLOWING ARE PROLOGUES TO SHIFT THE DIVIDEND ARRIVING IN A
 1505  9 AND L BEFORE THE DIVIDE.
 1506    -21D    LXCH   SR              SPECIAL PROLOGUE FOR UNIT WHEN THE
 1507            EXTEND                 LENGTH OF THE ARGUMENT WAS NOT LESS THAN
 1508            MP     HALF            .5. IN THIS CASE, EACH COMPONENT MUST BE
 1509            XCH    L               SHIFTED RIGHT ONE TO PRODUCE A HALF-UNIT
 1510            AD     SR              VECTOR.
 1511            XCH    L
 1512  2         TCF    GENDDV +1       WITH DP DIVIDEND IN A,L.
 1513            DDOUBL                 PROLOGUE WHICH NORMALIZES THE DIVIDEND
 1514            DDOUBL                 WHEN IT IS KNOWN THAT NO DIVISION
 1515            DDOUBL                 OVERFLOW WILL OCCUR.
 1516            DDOUBL
 1517            DDOUBL
 1518            DDOUBL
 1519            DDOUBL
 1520            DDOUBL
 1521            DDOUBL
 1522            DDOUBL
 1523            DDOUBL
 1524            DDOUBL
 1525            DDOUBL
 1526  2         DXCH   MPAC
 1527   MAXTEST  CCS    MAXDVSW         0 IF MAJORS MIGHT BE =, -1 OTHERWISE.
 1528  2BIASHI   DEC    .4192 B-1       SQRT CONSTANTS
 1529            TCF    MAXDV           CHECK TO SEE IF THEY ARE NOW EQUAL.
P1530            THE FOLLOWING IS A GENERAL PURPOSE DOUBLE PRECISION DIVISION RO
 1531  9UTINE. IT DIVIDES MPAC BY BUF AND LEAVES
R1532  2THE RESULT IN MPAC. THE FOLLOWING CONDITIONS MUST BE SATISFIED:
R1533  2         1.  THE DIVISOR (BUF) MUST BE POSITIVE AND NOT LESS THAN .5.
R1534            2.  THE DIVIDEND (MPAC) MUST BE POSITIVE WITH THE MAJOR PART OF
 1535  9 MPAC STRICTLY LESS THAN THAT OF BUF
R1536  2(A SPECIAL APPROXIMATION, MAXDV, IS USED WHEN THE MAJOR PARTS ARE EQUAL)
 1537  9.
R1538            UNDERSTANDING THAT A/B = Q + S(R/B) WHERE S = 2(-14) AND Q AND
 1539  9R ARE QUOTIENT AND REMAINDER, RESPEC-
R1540   TIVELY, THE FOLLOWING APPROXIMATION IS OBTAINED BY MULTIPLYING ABOVE AND
 1541  9 BELOW BY C - SD AND NEGLECTING TERMS OF
R1542  2ORDER S-SQUARED (POSSIBLY INTRODUCING ERROR INTO THE LOW TWO BITS OF THE
 1543  9 RESULT). SIGN AGREEMENT IS UNNECESSARY.
R1544            A + SB .      (R - QD)
 1545  9    A + SB
R1546            ------ = Q + S(------) WHERE Q AND R ARE QUOTIENT AND REMAINDER
 1547  9 OF ------ RESPECTIVELY.
R1548  4         C + SD        (  C   )
 1549  9      C
 1550   GENDDV   DXCH   MPAC            WE NEED A AND B ONLY FOR FIRST DV.
 1551    +1      EXTEND                 (SPECIAL UNIT PROLOGUE ENTERS HERE).
 1552            DV     BUF             A NOW CONTAINS Q AND L, R.
 1553  2         DXCH   MPAC
 1554            CS     MPAC            FORM DIVIDEND FOR MINOR PART OF RESULT.
 1555            EXTEND
 1556            MP     BUF +1
 1557            AD     MPAC +1         OVERFLOW AT THIS POINT IS POSITIVE SINCE
 1558            OVSK                   R IS POSITIVE IN EVERY CASE.
 1559  2         TCF    +5
 1560            EXTEND                 OVERFLOW CAN BE REMOVED BY SUBTRACTING C
 1561            SU     BUF             (BUF) ONCE SINCE R IS ALWAYS LESS THAN C
 1562            INCR   MPAC            IN THIS CASE. INCR COMPENSATES SUBTRACT.
 1563  2         TCF    +DOWN           (SINCE C(A) IS STILL POSITIVE).
 1564    +5      EXTEND                 C(A) CAN BE MADE LESS THAN C IN MAGNI-
 1565            BZMF   -UP             TUDE BY DIMINISHING IT BY C (SINCE C IS
A1566  8                                NOT LESS THAN .5) UNLESS C(A) = 0.
 1567   +DOWN    EXTEND
 1568            SU     BUF             IF POSITIVE, REDUCE ONLY IF NECESSARY
 1569            EXTEND                 SINCE THE COMPENSATING INCR MIGHT CAUSE
 1570            BZF    +3              OVERFLOW.
 1571            EXTEND                 DONT SUBTRACT UNLESS RESULT IS POSITIVE
 1572  2         BZMF   ENDMAXDV        OR ZERO.
 1573    +3      INCR   MPAC            KEEP SUBTRACT HERE AND COMPENSATE.
 1574  2         TCF    FINALDV
 1575   -UP      EXTEND                 IF ZERO, SET MINOR PART OF RESULT TO
 1576  2         BZF    FINALDV +3      ZERO.
 1577            EXTEND                 IF NEGATIVE, ADD C TO A, SUBTRACTING ONE
 1578            DIM    MPAC            TO COMPENSATE. DIM IS OK HERE SINCE THE
 1579  8ENDMAXDV AD     BUF             MAJOR PART NEVER GOES NEGATIVE.
 1580   FINALDV  ZL                     DO DV TO OBTAIN MINOR PART OF RESULT.
 1581            EXTEND
 1582            DV     BUF
 1583  2 +3      TS     MPAC +1
 1584            CCS    DVSIGN          LEAVE RESULT POSITIVE UNLESS C(DVSIGN)=
 1585            TC     Q               -0.
 1586            TC     Q
 1587  2         TC     Q
 1588            EXTEND
 1589            DCS    MPAC
 1590            DXCH   MPAC
 1591            CAF    ZERO            SO WE ALWAYS RETURN WITH C(A) = 0.
 1592            TC     Q
P1593            IF THE MAJOR PARTS OF THE DIVISOR AND DIVIDEND ARE EQUAL, BUT T
 1594  9HE MINOR PARTS ARE SUCH THAT THE
R1595   DIVIDEND IS STRICTLY LESS THAN THE DIVISOR IN MAGNITUDE, THE FOLLOWING A
 1596  9PPROXIMATION IS USED. THE ASSUMPTIONS
R1597  2ARE THE SAME AS THE GENERAL ROUTINE WITH THE ADDITION THAT SIGN AGREEMEN
 1598  9T IS NECESSARY (B, C, & D POSITIVE).
R1599                   C + SB .          (C + B - D)
R1600                   ------ = 37777 + S(---------)
R1601  2                C + SD            (    C    )
R1602  4         THE DIVISION MAY BE PERFORMED IMMEDIATELY SINCE B IS STRICTLY L
 1603  9ESS THAN D AND C IS NOT LESS THAN .5.
 1604   MAXDV    CS     MPAC            SEE IF MAXDV CASE STILL HOLDS AFTER
 1605            AD     BUF             NORMALIZATION.
 1606            EXTEND
 1607            BZF    +2
 1608  2         TCF    GENDDV          MPAC NOW LESS THAN BUF - DIVIDE AS USUAL
 1609    +2      CAF    POSMAX          SET MAJOR PART OF RESULT.
 1610  2         TS     MPAC
 1611            CS     BUF +1          FORM DIVIDEND OF MINOR PART OF RESULT.
 1612            AD     MPAC +1
 1613            TCF    ENDMAXDV        GO ADD C AND DO DIVIDE, ATTACHING SIGN
A1614                                   BEFORE EXITING.
P1615  2         VECTOR DIVIDED BY SCALAR, V/SC, IS EXECUTED HERE. THE VECTOR IS
 1616  9 NOW IN MPAC WITH SCALAR IN BUF.
 1617   V/SC2    CS     ONE             INITIALIZE DIVIDEND NORMALIZATION COUNT
 1618            TS     DVNORMCT        AND DIVISION SIGN REGISTER.
 1619  2         TS     VBUF +5
 1620            CCS    BUF             FORCE DIVISOR POSITIVE WITH MAJOR PART
 1621            TCF    /BUF+           NON-ZERO (IF POSSIBLE).
 1622            TCF    +2
 1623  2         TCF    /BUF-
 1624            XCH    BUF +1          SHIFT VECTOR AND SCALAR LEFT 14.
 1625            XCH    BUF
 1626            XCH    MPAC +1
 1627            XCH    MPAC
 1628            EXTEND                 CHECK FOR OVERFLOW IN EACH CASE.
 1629            BZF    +2
 1630  2         TCF    DVOVF
 1631            XCH    MPAC +4
 1632            XCH    MPAC +3
 1633            EXTEND
 1634            BZF    +2
 1635  2         TCF    DVOVF
 1636            XCH    MPAC +6
 1637            XCH    MPAC +5
 1638            EXTEND
 1639            BZF    +2
 1640  2         TCF    DVOVF
 1641            CCS    BUF
 1642            TCF    /BUF+
 1643            TCF    DVOVF           ZERO DIVISOR - OVERFLOW.
 1644            TCF    /BUF-
 1645  2         TCF    DVOVF
 1646   /BUF-    EXTEND                 ON NEGATIVE, COMPLEMENT BUF AND MAINTAIN
 1647            DCS    BUF             DVSIGN IN VBUF +5.
 1648            DXCH   BUF
 1649  8         INCR   VBUF +5
 1650   /BUF+    CAF    HALF            FORCE SIGN AGREEMENT IN DIVISOR.
 1651            DOUBLE
 1652            AD     BUF +1
 1653            TS     BUF +1
 1654            CAF    ZERO
 1655            AD     POSMAX
 1656  2         ADS    BUF
 1657            XCH    BUF2            LEAVE ABS(ORIGINAL DIVISOR) IN BUF2 FOR
 1658            CA     BUF +1          OVERFLOW TESTING.
 1659            TS     BUF2 +1
 1660  2         TCF    /NORM           NORMALIZE DIVISOR IN BUF.
 1661   /NORM2   EXTEND                 IF LESS THAN .5, AUGMENT DVNORMCT AND
 1662            AUG    DVNORMCT        DOUBLE DIVISOR.
 1663            EXTEND
 1664            DCA    BUF
 1665  2         DAS    BUF
 1666   /NORM    CA     BUF             SEE IF DIVISOR NORMALIZED.
 1667            DOUBLE
 1668            OVSK
 1669  2         TCF    /NORM2          DOUBLE AND TRY AGAIN IF NOT.
 1670            TC     V/SCDV          DO X COMPONENT DIVIDE.
 1671            DXCH   MPAC +3         SUPPLY ARGUMENTS IN USUAL SEQUENCE.
 1672            DXCH   MPAC
 1673  2         DXCH   MPAC +3
 1674            TC     V/SCDV          Y COMPONENT.
 1675            DXCH   MPAC +5
 1676            DXCH   MPAC
 1677  2         DXCH   MPAC +5
 1678            TC     V/SCDV          Z COMPONENT.
 1679            TCF    VROTATEX        GO RE-ARRANGE COMPONENTS BEFORE EXIT.
P1680  2         SUBROUTINE USED BY V/SC TO DIVIDE VECTOR COMPONENT IN MPAC,+1 B
 1681  9Y THE SCALAR GIVEN IN BUF.
 1682   V/SCDV   CA     VBUF +5         REFLECTS SIGN OF SCALAR.
 1683  2         TS     DVSIGN
 1684            CCS    MPAC            FORCE MPAC POSITIVE, EXITING ON ZERO.
 1685            TCF    /MPAC+
 1686            TCF    +2
 1687  2         TCF    /MPAC-
 1688            CCS    MPAC +1
 1689            TCF    /MPAC+
 1690            TC     Q
 1691            TCF    /MPAC-
 1692  2         TC     Q
 1693   /MPAC-   EXTEND                 USUAL COMPLEMENTING AND SETTING OF SIGN.
 1694            DCS    MPAC
 1695            DXCH   MPAC
 1696  2         INCR   DVSIGN
 1697   /MPAC+   CS     ONE             INITIALIZE NEAR-ONE SWITCH.
 1698  2         TS     MAXDVSW
 1699            CS     MPAC            CHECK POSSIBLE OVERFLOW.
 1700            AD     BUF2            UNNORMALIZED INPUT DIVISOR.
 1701            EXTEND
 1702  2         BZMF   /AGREE          CHECK FOR NEAR-ONE OR OVERFLOW.
 1703   DDVCALL  DXCH   MPAC            CALL PRE-DIVIDE NORMALIZATION.
 1704            INDEX  DVNORMCT
 1705  8         TCF    MAXTEST
 1706   /AGREE   CAF    HALF            FORCE SIGN AGREEMENT IN DIVIDEND
 1707            DOUBLE                 (ALREADY DONE FOR DIVISOR).
 1708            AD     MPAC +1
 1709            TS     MPAC +1
 1710            CAF    ZERO
 1711            AD     POSMAX
 1712  2         ADS    MPAC
 1713            CS     MPAC            CHECK TO SEE IF OVERFLOW GONE OR IF
 1714            AD     BUF2            NEAR-ONE CASE IS PRESENT.
 1715            CCS    A
 1716            TCF    DDVCALL         NOT NEAR-ONE.
 1717   SLOPELO  DEC    .8324
 1718  2         TCF    DVOVF           NO HOPE.
 1719            TS     MAXDVSW         SIGNAL POSSIBLE NEAR-ONE CASE.
 1720            CS     MPAC +1         SEE IF DIVISION CAN BE DONE.
 1721            AD     BUF2 +1
 1722            EXTEND
 1723            BZMF   DVOVF
 1724            TCF    DDVCALL         GOING TO MAXDV.
P1725  2         THE FOLLOWING ROUTINE EXECUTES THE UNIT INSTRUCTION, WHICH TAKE
 1726  9S THE UNIT OF THE VECTOR IN MPAC.
 1727   UNIT     TC     MPACVBUF        SAVE THE ARGUMENT IN VBUF.
 1728            TC     VSQSUB          DOT MPAC WITH ITSELF.
 1729            EXTEND
 1730            DCA    MPAC            LEAVE THE SQUARE OF THE LENGTH OF THE
 1731            INDEX  FIXLOC          ARGUMENT IN LVSQUARE.
 1732  2         DXCH   LVSQUARE
 1733  2         TC     SQRTSUB         GO TAKE THE NORMALIZED SQUARE ROOT.
 1734            CCS    MPAC            CHECK FOR UNIT OVERFLOW.
 1735            TCF    +2              MPAC IS NOT LESS THAN .5 UNLESS THE
 1736  2         TCF    DVOVF           INPUT TO SQRTSUB WAS 0.
 1737            CS     FOURTEEN        SEE IF THE INPUT WAS SO SMALL THE THE
 1738            AD     MPTEMP          FIRST TWO REGISTERS OF THE SQUARE WERE 0
 1739            CCS    A
 1740            COM                    IF SO, SAVE THE NEGATIVE OF THE SHIFT
 1741  2         TCF    SMALL           COUNT -15D.
 1742  2         TCF    LARGE           (THIS IS USUALLY THE CASE.)
 1743            CS     THIRTEEN        IF THE SHIFT COUNT WAS EXACTLY 14, SET
 1744  2         TS     MPTEMP          THE PRE-DIVIDE NORM COUNT TO -13D.
 1745            CA     MPAC            SHIFT THE LENGTH RIGHT 14 BEFORE STORING
 1746   SMALL2   TS     L               (SMALL EXITS TO THIS POINT).
 1747            CAF    ZERO
 1748  2         TCF    LARGE2          GO TO STORE LENGTH AND PROCEED.
 1749   LARGE    CCS    MPTEMP          MOST ALL CASES COME HERE.
 1750  2         TCF    LARGE3          SEE IF NO NORMALIZATION WAS REQUIRED BY
 1751            CS     SRDDV           SQRT, AND IF SO, SET UP FOR A SHIFT
 1752            TS     MPTEMP          RIGHT 1 BEFORE DIVIDING TO PRODUCE
 1753            EXTEND                 THE DESIRED HALF UNIT VECTOR.
 1754            DCA    MPAC
 1755  8         TCF    LARGE2
 1756   LARGE3   COM                    LEAVE NEGATIVE OF SHIFT COUNT-1 FOR
 1757  2         TS     MPTEMP          PREDIVIDE LEFT SHIFT.
 1758            COM                    PICK UP REQUIRED SHIFTING BIT TO UNNORM-
 1759            INDEX  A               ALIZE THE SQRT RESULT.
 1760            CAF    BIT14
 1761            TS     BUF
 1762            EXTEND
 1763            MP     MPAC +1
 1764            XCH    BUF
 1765            EXTEND                 (UNNORMALIZE THE SQRT FOR LV).
 1766            MP     MPAC
 1767            XCH    L
 1768            AD     BUF
 1769  2         XCH    L
 1770   LARGE2   INDEX  FIXLOC
 1771  2         DXCH   LV              LENGTH NOW STORED IN WORK AREA.
 1772            CS     ONE
 1773  2         TS     MAXDVSW         NO MAXDV CASES IN UNIT.
 1774            DXCH   VBUF            PREPARE X COMPONENT FOR DIVIDE, SETTING
 1775            DXCH   MPAC            LENGTH OF VECTOR AS DIVISOR IN BUF.
 1776            DXCH   BUF
 1777  2         TC     UNITDV
 1778            DXCH   VBUF +2         DO Y AND Z IN USUAL FASHION SO WE CAN
 1779            DXCH   MPAC            EXIT THROUGH VROTATEX.
 1780            DXCH   MPAC +3
 1781  2         TC     UNITDV
 1782            DXCH   VBUF +4
 1783            DXCH   MPAC
 1784            DXCH   MPAC +5
 1785            TC     UNITDV
 1786            TCF    VROTATEX        AND EXIT.
P1787            IF THE LENGTH OF THE ARGUMENT VECTOR WAS LESS THAN 2(-28), EACH
 1788  9 COMPONENT MUST BE SHIFTED LEFT AT LEAST
R1789  214 PLACES BEFORE THE DIVIDE. NOTE THAT IN THIS CASE, THE MAJOR PART OF E
 1790  9ACH COMPONENT IS ZERO.
 1791  2SMALL    TS     MPTEMP          NEGATIVE OF PRE-DIVIDE SHIFT COUNT.
 1792            CAF    ZERO            SHIFT EACH COMPONENT LEFT 14.
 1793            XCH    VBUF +1
 1794            XCH    VBUF
 1795            XCH    VBUF +3
 1796            XCH    VBUF +2
 1797            XCH    VBUF +5
 1798  2         XCH    VBUF +4
 1799            CS     MPTEMP
 1800            INDEX  A
 1801            CAF    BIT14
 1802            EXTEND
 1803            MP     MPAC
 1804  2         TCF    SMALL2
 1805   THIRTEEN DEC    13
 1806   FOURTEEN DEC    14
P1807  2         THE FOLLOWING ROUTINE SETS UP THE CALL TO THE DIVIDE ROUTINES.
 1808   UNITDV   CCS    MPAC            FORCE MPAC POSITIVE IF POSSIBLE, SETTING
 1809            TCF    UMPAC+          DVSIGN ACCORDING TO THE SIGN OF MPAC
 1810            TCF    +2              SINCE THE DIVISOR IS ALWAYS POSITIVE
 1811  2         TCF    UMPAC-          HERE.
 1812            CCS    MPAC +1
 1813            TCF    UMPAC+
 1814            TC     Q               EXIT IMMEDIATELY ON ZERO.
 1815            TCF    UMPAC-
 1816  2         TC     Q
 1817   UMPAC-   CS     ZERO            IF NEGATIVE, SET -0 IN DVSIGN FOR FINAL
 1818            TS     DVSIGN          COMPLEMENT.
 1819            EXTEND
 1820            DCS    MPAC            PICK UP ABSOLUTE VALUE OF ARG AND JUMP.
 1821            INDEX  MPTEMP
 1822  2         TCF    MAXTEST
 1823   UMPAC+   TS     DVSIGN          SET DVSIGN FOR POSITIVE QUOTIENT.
 1824            DXCH   MPAC
 1825            INDEX  MPTEMP
 1826            TCF    MAXTEST
P1827  2         MISCELLANEOUS UNARY OPERATIONS.
 1828   DSQ      TC     DSQSUB          SQUARE THE DP CONTENTS OF MPAC.
 1829  2         TCF    DANZIG
 1830   ROUND    TC     ROUNDSUB        ROUNDS MPAC TO DOUBLE PRECISION.
 1831            CAF    ZERO            FORCE DP MODE.
 1832  2         TCF    NEWMODE
 1833   ABVALABS CCS    MODE            ABVAL OR ABS INSTRUCTION.
 1834            TCF    ABS             DO ABS ON SCALAR.
 1835  2         TCF    ABS
 1836   ABVAL    TC     VSQSUB          DOT MPAC WITH ITSELF.
 1837  2         LXCH   MODE            MODE IS NOW DP (L ZERO AFTER DAS).
 1838            EXTEND                 STORE SQUARE OF LENGTH IN WORK AREA.
 1839            DCA    MPAC
 1840            INDEX  FIXLOC
 1841  2         DXCH   LVSQUARE
 1842   SQRT     TC     SQRTSUB         TAKE THE SQUARE ROOT OF MPAC.
 1843            CCS    MPTEMP          RETURNED NORMALIZED SQUARE ROOT. SEE IF
 1844            TCF    +2              ANY UN-NORMALIZATION REQUIRED AND EXIT
 1845  2         TCF    DANZIG          IF NOT.
 1846            AD     NEG12           A RIGHT SHIFT OF MORE THAN 13 COULD BE
 1847            EXTEND                 REQUIRED IF INPUT WAS ZERO IN MPAC,+1.
 1848            BZMF   SQRTSHFT        GOES HERE IN MOST CASES.
 1849            ZL                     IF A LONG SHIFT IS REQUIRED, GO TO
 1850            LXCH   ADDRWD          GENERAL RIGHT SHIFT ROUTINES.
 1851  2         TCF    GENSCR +4       ADDRWD WAS ZERO TO PREVENT ROUND.
 1852   SQRTSHFT INDEX  MPTEMP          SELECT SHIFTING BIT AND EXIT THROUGH
 1853            CAF    BIT15           SHIFT ROUTINES.
 1854            TS     MPTEMP
 1855            CAF    ZERO            TO ZERO MPAC +2 IN THE PROCESS.
 1856  2         TCF    MPACSHR +3
 1857   ABS      TC     BRANCH          TEST SIGN OF MPAC AND COMPLEMENT IF
 1858            TCF    DANZIG
 1859            TCF    DANZIG
 1860  8         TCF    COMP
 1861   VDEF     CS     FOUR            VECTOR DEFINE - ESSENTIALLY TREATS
 1862            ADS    PUSHLOC         SCALAR IN MPAC AS X COMPONENT, PUSHES UP
 1863            EXTEND                 FOR Y AND THEN AGAIN FOR Z.
 1864            INDEX  A
 1865            DCA    2
 1866            DXCH   MPAC +3
 1867            EXTEND
 1868            INDEX  PUSHLOC
 1869            DCA    0
 1870            DXCH   MPAC +5
 1871            CS     ONE             MODE IS NOW VECTOR.
 1872  2         TCF    NEWMODE
 1873   VSQ      TC     VSQSUB          DOT MPAC WITH ITSELF.
 1874            CAF    ZERO
 1875  2         TCF    NEWMODE         MODE IS NOW DP.
 1876   PUSH     EXTEND                 PUSH DOWN MPAC LEAVING IT LOADED.
 1877            DCA    MPAC
 1878            INDEX  PUSHLOC         PUSH DOWN FIRST TWO REGISTERS IN EACH
 1879  2         DXCH   0
 1880            INDEX  MODE            INCREMENT PUSHDOWN POINTER.
 1881            CAF    NO.WDS
 1882  2         ADS    PUSHLOC
 1883            CCS    MODE
 1884            TCF    TPUSH           PUSH DOWN MPAC +2.
 1885  2         TCF    DANZIG          DONE FOR DP.
 1886            EXTEND                 ON VECTOR, PUSH DOWN Y AND Z COMPONENTS.
 1887            DCA    MPAC +3
 1888            INDEX  PUSHLOC
 1889            DXCH   0 -4
 1890            EXTEND
 1891            DCA    MPAC +5
 1892            INDEX  PUSHLOC
 1893            DXCH   0 -2
 1894  2         TCF    DANZIG
 1895   TPUSH    CA     MPAC +2
 1896  2         TCF    ENDTPUSH +2
 1897   RVQ      INDEX  FIXLOC          RVQ - RETURN IVA QPRET.
 1898            CA     QPRET
 1899            TCF    GOTO +1
P1900            THE FOLLOWING SUBROUTINES ARE USED IN SQUARING MPAC, IN BOTH TH
 1901  9E SCALAR AND VECTOR SENSE. THEY ARE
R1902  2SPECIAL CASES OF DMPSUB AND DOTSUB, PUT IN TO SAVE SOME TIME.
 1903   DSQSUB   CA     MPAC +1         SQUARES THE SCALAR CONTENTS OF MPAC.
 1904            EXTEND
 1905            SQUARE
 1906            TS     MPAC +2
 1907            CAF    ZERO            FORM 2(CROSS TERM).
 1908            XCH    MPAC +1
 1909            EXTEND
 1910            MP     MPAC
 1911            DDOUBL                 AND MAYBE OVERFLOW.
 1912            DAS    MPAC +1         AND SET A TO NET OVERFLOW.
 1913            XCH    MPAC
 1914            EXTEND
 1915            SQUARE
 1916            DAS    MPAC
 1917  2         TC     Q
 1918   VSQSUB   EXTEND                 DOTS THE VECTOR IN MPAC WITH ITSELF.
 1919            QXCH   DOTRET
 1920            TC     DSQSUB          SQUARE THE X COMPONENT.
 1921            DXCH   MPAC +3
 1922            DXCH   MPAC
 1923            DXCH   BUF             SO WE CAN END IN DOTSUB.
 1924            CA     MPAC +2
 1925  2         TS     BUF +2
 1926            TC     DSQSUB          SQUARE Y COMPONENT.
 1927            DXCH   MPAC +1
 1928            DAS    BUF +1
 1929            AD     MPAC
 1930            AD     BUF
 1931            TS     BUF
 1932            TCF    +2
 1933  2         TS     OVFIND          IF OVERFLOW.
 1934            DXCH   MPAC +5
 1935            DXCH   MPAC
 1936            TC     DSQSUB          SQUARE Z COMPONENT.
 1937            TCF    ENDDOT          END AS IN DOTSUB.
P1938            DOUBLE PRECISION SQUARE ROOT ROUTINE. TAKE THE SQUARE ROOT OF T
 1939  9HE TRIPLE PRECISION (MPAC +2 USED ONLY
R1940   IN NORMALIZATION) CONTENTS OF MPAC AND LEAVE THE NORMALIZED RESULT IN MP
 1941  9AC (C(MPAC) GREATER THAN OR EQUAL TO
R1942  4.5). THE RIGHT SHIFT COUNT (TO UNNORMALIZE) IS LEFT IN MPTEMP.
 1943   SQRTSUB  CAF    ZERO            START BY ZEROING RIGHT SHIFT COUNT.
 1944  2         TS     MPTEMP
 1945            CCS    MPAC            CHECK FOR POSITIVE ARGUMENT, SHIFTING
 1946            TCF    SMPAC+          FIRST SIGNIFICANT MPAC REGISTER INTO
 1947            TCF    +2              MPAC ITSELF.
 1948  2         TCF    SQRTNEG         SEE IF MAG OF ARGUMENT LESS THAN 10(-4).
 1949            XCH    MPAC +2         MPAC IS ZERO - SHIFT LEFT 14.
 1950            XCH    MPAC +1
 1951            TS     MPAC
 1952            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1953  2         TS     MPTEMP
 1954            CCS    MPAC            SEE IF MPAC NOW PNZ.
 1955            TCF    SMPAC+
 1956            TCF    +2
 1957  2         TCF    ZEROANS         NEGATIVE BUT LESS THAN 10(-4) IN MAG.
 1958            XCH    MPAC +1         ZERO - SHIFT LEFT 14 AGAIN.
 1959            TS     MPAC
 1960            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1961  2         ADS    MPTEMP
 1962            CCS    MPAC
 1963            TCF    SMPAC+
 1964            TC     Q               SQRT(0) = 0.
 1965            TCF    ZEROANS
 1966  4         TC     Q
 1967   SQRTNEG  CCS    A               ARGUMENT IS NEGATIVE, BUT SEE IF SIGN-
 1968  2         TCF    SQRTABRT        CORRECTED ARGUMENT IS LESS THAN 10(-4)
 1969            CCS    MPAC +1         IN MAGNITUDE. IF SO, CALL ANSWER ZERO.
 1970   ZEROANS  CAF    ZERO            FORCE ANSWER TO ZERO HERE.
 1971            TCF    FIXROOT
 1972            TCF    SQRTABRT
 1973  2         TCF    FIXROOT
 1974  8SQRTABRT TC
 1975   SMPAC+   AD     -1/2+2          SEE IF ARGUMENT GREATER THAN OR EQUAL TO
 1976            EXTEND                 .5.
 1977  2         BZMF   SRTEST          IF SO, SEE IF LESS THAN .25.
 1978            DXCH   MPAC            WE WILL TAKE THE SQUARE ROOT OF MPAC/2.
 1979            LXCH   SR              SHIFT RIGHT 1 AND GO TO THE SQRT ROUTINE
 1980            EXTEND
 1981            MP     HALF
 1982            DXCH   MPAC
 1983            XCH    SR
 1984  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1985   ARGHI    CAF    SLOPEHI         ARGUMENT BETWEEN .25 AND .5. GET A
 1986            EXTEND                 LINEAR APPROXIMATION FOR THIS RANGE.
 1987            MP     MPAC
 1988  2         AD     BIASHI          X0/2 = (MPAC/2)(SLOPEHI) + BIASHI/2.
 1989    +4      TS     BUF             X0/2 (ARGLO ENTERS HERE).
 1990            EXTEND
 1991            DV     BUF             (MPAC/2)/(X0/2)
 1992            EXTEND
 1993            MP     HALF
 1994  2         ADS    BUF             X1 = X0/2 + .5(MPAC/2)/(X0/2).
 1995            EXTEND
 1996            MP     HALF            FORM UP X1/2.
 1997            DXCH   MPAC            SAVE AND BRING OUT ARGUMENT.
 1998            EXTEND                 TAKE DP QUOTIENT WITH X1.
 1999            DV     BUF
 2000            TS     BUF +1          SAVE MAJOR PART OF QUOTIENT.
 2001            CAF    ZERO            FORM MINOR PART OF QUOTIENT USING
 2002            XCH    L               (REMAINDER,0).
 2003            EXTEND
 2004            DV     BUF
 2005            TS     L               IN PREPARATION FOR DAS.
 2006            CA     BUF +1
 2007  2         DAS    MPAC            X2 = X1/2 + (MPAC/2)X1
 2008            CCS    A               OVERFLOWS IF ARGUMENT WAS NEAR POSMAX.
 2009            CAF    POSMAX
 2010   FIXROOT  TS     MPAC
 2011            TS     MPAC +1
 2012  8         TC     Q               RETURN TO CALLER TO UNNORMALIZE, ETC.
 2013   SRTEST   AD     QUARTER         ARGUMENT WAS LESS THAN .5, SEE IF LESS
 2014            EXTEND                 THAN .25.
 2015  2         BZMF   SQRTNORM        IF SO, BEGIN NORMALIZATION.
 2016            DXCH   MPAC            IF BETWEEN .5 AND .25, SHIFT RIGHT 1 AND
 2017            LXCH   SR              START AT ARGLO.
 2018            EXTEND
 2019            MP     HALF
 2020            DXCH   MPAC
 2021            XCH    SR
 2022  2         ADS    MPAC +1         NO OVERFLOW.
 2023   ARGLO    CAF    SLOPELO         (NORMALIZED) ARGUMENT BETWEEN .125 AND
 2024            EXTEND                 .25
 2025            MP     MPAC
 2026            AD     BIASLO
 2027  2         TCF    ARGHI +4        BEGIN SQUARE ROOT.
 2028   SQRTNM2  EXTEND                 SHIFT LEFT 2 AND INCREMENT RIGHT SHIFT
 2029            DCA    MPAC +1         COUNT (FOR TERMINAL UNNORMALIZATION).
 2030            DAS    MPAC +1
 2031            AD     MPAC
 2032  2         ADS    MPAC            (NO OVERFLOW).
 2033   SQRTNORM INCR   MPTEMP          FIRST TIME THROUGH, JUST SHIFT LEFT 1
 2034            EXTEND                 (PUTS IN EFFECTIVE RIGHT SHIFT SINCE
 2035            DCA    MPAC +1         WE WANT MPAC/2).
 2036            DAS    MPAC +1
 2037            AD     MPAC
 2038            ADS    MPAC            (AGAIN NO OVERFLOW).
 2039            DOUBLE
 2040  2         TS     CYL
 2041   NORMTEST CCS    CYL             SEE IF ARGUMENT NOW NORMALIZED AT
 2042            CCS    CYL             GREATER THAN .125.
 2043            TCF    SQRTNM2         NO - SHIFT LEFT 2 MORE AND TRY AGAIN.
 2044            TCF    ARGHI           YES - NOW BETWEEN .5 AND .25.
 2045            TCF    ARGLO           ARGUMENT NOW BETWEEN .25 AND .125.
P2046  2TRIGONOMETRIC FUNCTION PACKAGE.
R2047  2         THE FOLLOWING TRIGONOMETRIC FUNCTIONS ARE AVAILABLE AS INTERPRE
 2048  9TIVE OPERATIONS:
R2049            1.  SIN                COMPUTES (1/2)SINE(2 PI MPAC).
R2050  2         2.  COS                COMPUTES (1/2)COSINE(2 PI MPAC).
R2051            3.  ASIN               COMPUTES (1/2PI)ARCSINE(2 MPAC).
R2052  2         4.  ACOS               COMPUTES (1/2PI)ARCCOSINE(2 MPAC).
R2053  4SIN-ASIN AND COS-ACOS ARE MUTUALLY INVERSE, IE SIN(ASIN(X)) = X.
 2054   COSINE   TC     BRANCH          FINDS COSINE USING THE IDENTITY
 2055            TCF    +3              COS(X) = SIN(PI/2 - ABS(X)).
 2056            TCF    PRESINE
 2057  2         TCF    PRESINE
 2058    +3      EXTEND
 2059            DCS    MPAC
 2060  2         DXCH   MPAC
 2061   PRESINE  CAF    QUARTER         PI/2 SCALED.
 2062  4         ADS    MPAC
 2063   SINE     DXCH   MPAC            DOUBLE ARGUMENT.
 2064            DDOUBL
 2065            OVSK                   SEE IF OVERFLOW PRESENT.
 2066  2         TCF    +3              IF NOT, ARGUMENT OK AS IS.
 2067            EXTEND                 IF SO, WE LOST (OR GAINED) PI, SO
 2068            DCOM                   COMPLEMENT MPAC USING THE IDENTITY
A2069                                   SIN(X-(+)PI) = SIN(-X).
 2070    +3      DXCH   MPAC
 2071            CA     MPAC            SEE IF ARGUMENT GREATER THAN .5 IN
 2072            DOUBLE                 MAGNITUDE. IF SO, REDUCE IT TO LESS THAN
 2073            TS     L               .5 (+-PI/2 SCALED) AS FOLLOWS:
 2074  2         TCF    SN1
 2075            INDEX  A               IF POSITIVE, FORM PI - X, IF NEGATIVE
 2076            CAF    NEG1/2 +1       USE -PI - X.
 2077            DOUBLE
 2078            EXTEND
 2079            SU     MPAC            GUARANTEED NO OVERFLOW.
 2080            TS     MPAC
 2081            CS     MPAC +1
 2082  8         TS     MPAC +1
 2083   SN1      EXTEND                 SET UP TO EVALUATE HASTINGS POLYNOMIAL
 2084            DCA    MPAC
 2085            DXCH   BUF2
 2086  2         TC     DSQSUB          SQUARE MPAC.
 2087            TC     POLY            EVALUATE FOURTH ORDER POLYNOMIAL.
 2088            DEC    3
 2089            2DEC   +.3926990796
 2090            2DEC   -.6459637111
 2091            2DEC   +.318758717
 2092            2DEC   -.074780249
 2093            2DEC   +.009694988
 2094            CAF    LBUF2           MULTIPLY BY ARGUMENT AND SHIFT LEFT 2.
 2095  2         TC     DMPSUB -1
 2096            EXTEND
 2097            DCA    MPAC +1
 2098            DAS    MPAC +1
 2099            AD     MPAC
 2100            ADS    MPAC            NEITHER SHIFT OVERFLOWS.
 2101            EXTEND
 2102            DCA    MPAC +1
 2103            DAS    MPAC +1
 2104            AD     MPAC
 2105            ADS    MPAC
 2106            TCF    DANZIG
P2107  2         ARCSIN/ARCCOS ROUTINE.
 2108   ARCSIN   CAF    LASINEX         COMPUTE ARCSIN BY USING THE IDENTITY
 2109  2         TCF    +2              ARCSIN(X) = PI/2 - ARCCOS(X).
 2110   ARCCOS   CAF    LDANZIG         (EXITS IMMEDIATELY).
 2111            TS     ESCAPE
 2112            TC     BRANCH          TEST SIGN OF INPUT.
 2113            TCF    ACOSST          START IMMEDIATELY IF POSITIVE.
 2114            TCF    ACOSZERO        ARCCOS(0) = PI/2 = .25.
 2115            EXTEND                 IF NEGATIVE, USE THE IDENTITY
 2116            DCS    MPAC            ARCCOS(X) = PI - ARCCOS(-X), FORCING
 2117            DXCH   MPAC            ARGUMENT POSITIVE.
 2118            CAF    TCSUBTR         SET EXIT  TO DO ABOVE BEFORE
 2119            XCH    ESCAPE          ARCSIN/ARCCOS CONSIDERATIONS.
 2120  2         TS     ESCAPE2
 2121   ACOSST   CS     HALF            TEST MAGNITUDE OF INPUT.
 2122            AD     MPAC
 2123            CCS    A
 2124  2         TCF    ACOSOVF         THIS IS PROBABLY AN OVERFLOW CASE.
 2125  2LASINEX  TCF    ASINEX
 2126  2         TCF    ACOSST2         NO OVERFLOW - PROCEED.
 2127            CCS    MPAC +1         IF MAJOR PART IS .5, CALL ANSWER 0
 2128            CAF    ZERO            UNLESS MINOR PART NEGATIVE.
 2129  2         TCF    ACOS=0
 2130  2         TCF    ACOSST2
 2131   ACOS=0   TS     MPAC +1
 2132            TS     MPAC
 2133  2         TC     ESCAPE
 2134   ACOSST2  EXTEND                 NOW THAT ARGUMENT IS IN PROPER RANGE,
 2135            DCS    MPAC            BEGIN COMPUTATION. USE HASTINGS
 2136            AD     HALF            APPROXIMATION ARCCOS(X) = SQRT(1-X)P(X)
 2137            DXCH   MPAC            IN A SCALED VERSION WHERE P(X) IS A
 2138  2         DXCH   BUF2            SEVENTH ORDER POLYNOMIAL.
 2139  2         TC     SQRTSUB         RETURNS WITH NORMALIZED SQUARE ROOT.
 2140            CCS    MPTEMP          SEE IF UN-NORMALIZATION REQUIRED.
 2141  8         TCF    ACOSSHR         IF SO.
 2142   ACOS3    DXCH   MPAC            SET UP FOR POLYNOMIAL EVALUATION.
 2143            DXCH   BUF2
 2144  2         DXCH   MPAC
 2145            TC     POLY
 2146            DEC    6
 2147            2DEC   +.353553385     COEFFICIENTS ARE C 2(+I)/PISQRT(2) WHERE
 2148            2DEC*  -.0483017006 B+1*                 I
 2149            2DEC*  +.0200273085 B+2*    WHERE C STANDS FOR ORIGINAL COEFFS.
 2150            2DEC*  -.0112931863 B+3*
 2151            2DEC*  +.00695311612 B+4*
 2152            2DEC*  -.00384617957 B+5*
 2153            2DEC*  +.001501297736 B+6*
 2154            2DEC*  -.000284160334 B+7*
 2155            CAF    LBUF2           DO FINAL MULTIPLY AND GO TO ANY
 2156            TC     DMPSUB -1       EPILOGUE SEQUENCES.
 2157  2         TC     ESCAPE
 2158   SUBTR    EXTEND                 EPILOGUE FOR NEGATIVE INPUTS TO ARCCOS.
 2159            DCS    MPAC
 2160            AD     HALF            FORMS PI - ARCCOS(-X) = ARCCOS(X).
 2161            DXCH   MPAC
 2162  2         TC     ESCAPE2         GO TO POSSIBLE ARCSIN EPILOGUE.
 2163   ASINEX   EXTEND
 2164            DCS    MPAC            ARCSIN EPILOGUE - GET ARCSIN(X)
 2165            AD     QUARTER         = PI/2 - ARCCOS(X).
 2166            DXCH   MPAC
 2167  8LDANZIG  TCF    DANZIG
 2168   ACOSSHR  INDEX  A               THE SHIFT RIGHT IS LESS THAN 14 SINCE
 2169            CAF    BIT14           THE INPUT WAS NON-ZERO DP.
 2170            TS     MPTEMP
 2171            TC     VSHRRND         DP SHIFT RIGHT AND ROUND.
 2172  2         TCF    ACOS3           PROCEED.
 2173   ACOSOVF  CCS    A               IF MAJOR PART WAS ONLY 1 MORE THAN .5,
 2174            TCF    +2              CALL ANSWER 0.
 2175            TCF    ACOS=0
 2176  2         TCF    ACOS=0
 2177  2ACOSABRT TC
 2178   ACOSZERO CAF    QUARTER         ACOS(0) = PI/2.
 2179            TCF    ACOS=0 +1       SET MPAC AND EXIT VIA ESCAPE.
P2180  2         THE FOLLOWING INSTRUCTIONS ARE AVAILABLE FOR SETTING, MODIFYING
 2181  9, AND BRANCHING ON INDEX REGISTERS:
R2182            1.  AXT                ADDRESS TO INDEX TRUE.
R2183            1.  AXC                ADDRESS TO INDEX COMPLEMENTED.
R2184            3.  LXA                LOAD INDEX FROM ERASABLE.
R2185            4.  LXC                LOAD INDEX COMPLEMENTED FROM ERASABLE.
R2186            5.  SXA                STORE INDEX IN ERASABLE.
R2187  2         6.  XCHX               EXCHANGE INDEX REIGSTER WITH ERASABLE.
R2188            7.  INCR               INCREMENT INDEX REGISTER.
R2189            8.  XAD                ERASABLE ADD TO INDEX REGISTER.
R2190  2         9.  XSU                ERASABLE SUBTRACT FROM INDEX REGISTER.
R2191  4        10.  TIX                BRANCH ON INDEX REGISTER AND DECREMENT.
 2192  2         SETLOC 12000           SUFFIX CLASS 01 IS IN BANK 1.
 2193   AXT      TC     TAGSUB          SELECT APPROPRIATE INDEX REGISTER.
 2194            CA     POLISH
 2195   XSTORE   INDEX  INDEXLOC        CONTAINS C(FIXLOC) OR C(FIXLOC)+1.
 2196            TS     X1
 2197  2         TCF    DANZIG
 21971  AXC      TC     TAGSUB
 21972           CS     POLISH
 21973 2         TC     XSTORE
 2198   LXA      TC     TAGSUB          LOAD INDEX FROM ERASABLE.
 2199            INDEX  ADDRWD
 2200            CA     0
 2201  2         TCF    XSTORE
 2202   LXC      TC     TAGSUB          LOAD INDEX FROM ERASABLE COMPLEMENTED.
 2203            INDEX  ADDRWD
 2204            CS     0
 2205  2         TCF    XSTORE
 2206   SXA      TC     TAGSUB          STORE INDEX IN ERASABLE.
 2207            INDEX  INDEXLOC
 2208            CA     X1
 2209  2         TCF    STORE1          (STORE SINGLE PRECISION BEFORE EXIT).
 2210   XCHX     TC     TAGSUB          EXCHANGE INDEX REGISTER WITH ERASABLE.
 2211            INDEX  ADDRWD
 2212            CA     0
 2213            INDEX  INDEXLOC
 2214            XCH    X1
 2215  2         TCF    STORE1
 2216   XAD      TC     TAGSUB          ERASABLE ADD TO INDEX.
 2217            INDEX  ADDRWD
 2218            CA     0
 2219   XAD2     INDEX  INDEXLOC
 2220            ADS    X1              IGNORING OVERFLOWS.
 2221  2         TCF    DANZIG
 2222   INCR     TC     TAGSUB          INCREMENT INDEX REGISTER.
 2223            CA     POLISH
 2224  2         TCF    XAD2
 2225   XSU      TC     TAGSUB          ERASABLE SUBTRACT FROM INDEX.
 2226            INDEX  ADDRWD
 2227            CS     0
 2228  4         TCF    XAD2
 2229   TIX      TC     TAGSUB          BRANCH AND DECREMENT ON INDEX.
 2230            INDEX  INDEXLOC
 2231            CS     X1
 2232            INDEX  INDEXLOC
 2233            AD     X1
 2234            EXTEND                 NO OPERATION IF DECREMENTED INDEX IS
 2235  2         BZMF   DANZIG          NEGATIVE OR ZERO.
 2236   DOTIXBR  INDEX  INDEXLOC
 2237  2         XCH    X1              IGNORING OVERFLOWS.
 2238  4         TCF    GOTO            DO THE BRANCH USING THE CADR IN POLISH.
R2239  2         SUBROUTINE WHICH SETS THE ADDRESS OF THE SPECIFIED INDEX IN IND
 2240  9EXLOC. (ACTUALLY, THE ADDRESS -38D.)
 2241   TAGSUB   CA     FIXLOC
 2242  2         TS     INDEXLOC
 2243            CCS    CYR             BIT 15 SPECIFIES INDEX.
 2244            INCR   INDEXLOC        0 MEANS USE X2.
 2245            TC     Q
 2246            TC     Q               1 FOR X1.
P2247  2         MISCELLANEOUS OPERATION CODES WITH DIRECT ADDRESSES. INCLUDED H
 2248  9ERE ARE:
R2249            1.  ITA                STORE QPRET (RETURN ADDRESS) IN ERASABLE
 2250  9.
R2251            2.  CALL               CALL A SUBROUTINE, LEAVING RETURN IN QPR
 2252  9ET.
R2253            3.  RTB                RETURN TO BASIC LANGUAGE AT THE GIVEN AD
 2254  9DRESS.
R2255            4.  BHIZ               BRANCH IF THE HIGH ORDER OF MPAC IS ZERO
 2256  9 (SINGLE PRECISION).
R2257            5.  BOV                BRANCH ON OVERFLOW.
R2258  2         6.  GOTO               SIMPLE SEQUENCE CHANGE.
 2259   RTB/BHIZ CCS    CYR
 2260   RTB      CA     POLISH
 2261  2         TCF    BANKJUMP        CALL BASIC ROUTINE.
 2262   BHIZ     CCS    MPAC
 2263            TCF    DANZIG
 2264            TCF    GOTO
 2265            TCF    DANZIG
 2266  2         TCF    GOTO
 2267   BOV(B)   CCS    OVFIND          BRANCH ON OVERFLOW TO BASIC OR INTERP.
 2268            TCF    +2
 2269            TCF    DANZIG
 2270            TS     OVFIND
 2271            CCS    CYR
 2272            TCF    RTB             IF BASIC.
 2273   B5TOB8   OCT    360
 2274  8         TCF    GOTO
 2275   BZE/GOTO CCS    CYR             SEE WHICH OP-CODE IS DESIRED.
 2276            TC     BRANCH          DO BZE.
 2277            TCF    DANZIG
 2278            TCF    GOTO            DO GOTO.
 2279  2         TCF    DANZIG
 2280   BPL/BMN  CCS    CYR
 2281            TCF    BPL
 2282  25B10     DEC    5 B+10          SHIFTS OP CODE IN SWITCH INSTRUCTION ADR
 2283            TC     BRANCH          DO BMN.
 2284            TCF    DANZIG
 2285            TCF    DANZIG
 2286  2         TCF    GOTO            ONLY IF NNZ.
 2287   BPL      TC     BRANCH
 2288            TCF    GOTO            IF POSITIVE OR ZERO.
 2289            TCF    GOTO
 2290  2         TCF    DANZIG
 2291   CALL/ITA CCS    CYR
 2292  2         TCF    CALL
 2293  2LOW4     OCT    17              MASK USED BY SWITCH INSTRUCTIONS.
 2294            INDEX  FIXLOC          STORE QPRET.
 2295            CA     QPRET
 2296            TCF    STORE1
P2297  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR ALTERING AND TESTING
 2298  9 INTERPRETIVE SWITCHES:
R2299   00       BONSET                 SET A SWITCH AND DO A GOTO IF IT WAS ON.
R2300   01       SETGO                  SET A SWITCH AND DO A GOTO.
R2301   02       BOFSET                 SET A SWITCH AND DO A GOTO IF IT WAS OFF
R2302  203       SET                    SET A SWITCH.
R2303   04       BONINV                 INVERT A SWITCH AND BRANCH IF IT WAS ON.
R2304   05       INVGO                  INVERT A SWITCH AND DO A GOTO.
R2305   06       BOFINV                 INVERT A SWITCH AND BRANCH IF IT WAS OFF
R2306  207       INVERT                 INVERT A SWITCH.
R2307   10       BONCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS ON.
R2308   11       CLRGO                  CLEAR A SWITCH AND DO A GOTO.
R2309   12       BOFCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS OFF.
R2310  213       CLEAR                  CLEAR A SWITCH.
R2311   14       BON                    BRANCH IF A SWITCH WAS ON.
R2312  416       BOFF                   BRANCH IF A SWITCH WAS OFF.
R2313  2         THE ADDRESS SUPPLIED WITH THE SWITCH INSTRUCTION IS INTERPRETED
 2314  9 AS FOLLOWS:
R2315            BITS 1-4    SWITCH BIT NUMBER (1-15).
R2316            BITS 5-8    SWITCH OPERATION NUMBER.
R2317  2         BITS 9-     SWITCH WORD NUMBER (UP TO 64 SWITCH WORDS).
R2318            THE ADDRESS ITSELF IS MADE UP BY THE YUL SYSTEM ASSEMBLER. THE
 2319  9BRANCH INSTRUCTIONS REQUIRE TWO
R2320  4ADDRESSES, THE SECOND TAKEN AS THE DIRECT (OR INDIRECT IF IN ERASABLE) A
 2321  9DDRESS OF THE BRANCH.
 2322   SWITCHES CAF    LOW4            LEAVE THE SWITCH BIT IN  SWBIT  .
 2323            MASK   POLISH
 2324            INDEX  A
 2325            CAF    BIT15           (NUMBER FROM LEFT TO RIGHT.)
 2326  2         TS     SWBIT
 2327            CAF    BIT8            LEAVE THE SWITCH WORD NUMBER IN  SWWORD
 2328            EXTEND
 2329            MP     POLISH
 2330  2         TS     SWWORD
 23305           INHINT                 DURING SWITCH CHANGE SO RUPT CAN USE TOO
 2331            INDEX  A               LEAVE THE SWITCH WORD ITSELF IN L.
 2332            CA     STATE
 2333  8         TS     Q               Q WILL BE USED AS A CHANNEL.
 2334            CAF    BIT11
 2335            EXTEND                 DISPATCH SWITCH BIT OPERATION AS IN BITS
 2336            MP     POLISH          7-8 OF POLISH.
 2337            MASK   B3TOB4          GETS 4X2-BIT CODE.
 2338            INDEX  A
 2339  2         TCF    +1
 2340    +1      CA     SWBIT           00 - SET SWITCH IN QUESTION.
 2341            EXTEND
 2342            ROR    Q
 2343  2         TCF    SWSTORE
 2344    +5      CA     SWBIT           01 - INVERT SWITCH.
 2345            EXTEND
 2346            RXOR   Q
 2347  2         TCF    SWSTORE
 2348    +9D     CS     SWBIT           10 - CLEAR.
 2349            MASK   Q
 2350   SWSTORE  INDEX  SWWORD
 2351  8         TS     STATE           NEW SWITCH WORD.
 2352    +13D    RELINT                 11 - NOOP.
 23525           CAF    BIT13
 2353            EXTEND                 DISPATCH SEQUCE CHANGING OR BRANCHING
 2354            MP     POLISH          CODE.
 2355            MASK   B3TOB4
 2356            INDEX  A
 2357  2         TCF    +1              ORIGINALLY STORED IN BITS 5-6.
 2358    +1      CS     Q               00 - BRANCH IF ON.
 2359   TEST     MASK   SWBIT
 2360            CCS    A
 2361  2         TCF    SWSKIP
 2362  2 +5      TCF    SWBRANCH        01 - GO TO.
 2363  2         TCF    SWSKIP          HERE ONLY ON BIT 15.
 2364  2         SETLOC +2
 2366    +9D     CA     Q               10 - BRANCH IF OFF.
 2367  2         TCF    TEST
 2368  2B3TOB4   OCT    14
 2369  2SWSKIP   INCR   LOC
 2370  2SW/      EQUALS SWITCHES
 2371  2 +13D    TCF    DANZIG          11 - NOOP.
 2372   ENDINTS1 EQUALS
*       ENDOFJOB
