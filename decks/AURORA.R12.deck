* 1800A JOB 55-238-00  YUL SYSTEM
*       YUL
Y  YUL  ADD NEW COMPUTER BLK2
Y  YUL  ASSEMBLY PASS 1 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 2 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 3 FOR BLK2 IS AVAILABLE
Y  YUL  MANUFACTURING FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLE NEW BLK2 PROGRAM AURORA BY DAP GROUP
L      2ASSEMBLY AND OPERATION INFORMATION
R0001  4VERB DEFINITIONS
R0002    REGULAR VERBS
R0003   01  DISPLAY OCTAL COMP 1 (R1)
R0004   02  DISPLAY OCTAL COMP 2 (R1)
R0005   03  DISPLAY OCTAL COMP 3 (R1)
R0006   04  DISPLAY OCTAL COMP 1,2 (R1,R2)
R0007   05  DISPLAY OCTAL COMP 1,2,3 (R1,R2,R3)
R0008   06  DECIMAL DISPLAY
R0009   07  DP DECIMAL DISPLAY (R1,R2)
R0010   10  SPARE
R0011   11  MONITOR OCT COMP 1 (R1)
R0012   12  MONITOR OCT COMP 2 (R1)
R0013   13  MONITOR OCT COMP 3 (R1)
R0014   14  MONITOR OCT COMP 1,2 (R1)
R0015   15  MONITOR OCT COMP 1,2,3 (R1,R2,R3)
R0016   16  MONITOR DECIMAL
R0017   17  MONITOR DP DECIMAL (R1,R2)
R0018   20  SPARE
R0019   21  LOAD COMP 1 (R1)
R0020   22  LOAD COMP 2 (R2)
R0021   23  LOAD COMP 3 (R3)
R0022   24  LOAD COMP 1,2 (R1,R2)
R0023   25  LOAD COMP 1,2,3 (R1,R2,R3)
R0024   26  SPARE
R0025   27  FIXED MEMORY DISPLAY
R0026   30  REQUEST EXECUTIVE
R0027   31  REQUEST WAITLIST
R0028   32  C(R2) INTO R3, C(R1) INTO R2
R0029   33  PROCEED WITHOUT DATA
R0030   34  TERMINATE CURRENT TEST OR LOAD REQUEST
R0031   35  TEST LIGHTS
R0032   36  FRESH START
R0033   37  CHANGE MAJOR MODE
R0034  4END OF REGULAR VERBS
R0035   EXTENDED VERBS
R0036   40  ZERO (USED WITH NOUNS 20, 40, AND 70)
R0037   41  COARSE ALIGN (USED WITH NOUNS 20, 40, AND 70)
R0038   42  FINE ALIGN IMU
R0039   43  LOAD IMU ATTITUDE ERROR METERS
R0040   44  ILLEGAL VERB
R0041   45  COMMAND LR TO POSITION 2
R0042   46  SAMPLE RADAR ONCE PER SECOND
R0043   47  PERFORM LEM FCS TEST
R0044   50  PLEASE PERFORM
R0045   51  PLEASE MARK
R0046   52  PLEASE MARK Y
R0047   53  PLEASE MARK X OR Y
R0048   54  PULSE TORQUE GYROS
R0049   55  ALIGN TIME
R0050   56  PERFORM BANKSUM
R0051   57  PERFORM SYSTEM TEST
R0052   60  ILLEGAL VERB
R0053   61  ILLEGAL VERB
R0054   62  SCAN LEM INBITS
R0055   63  INITIALIZE AGS
R0056   64  ILLEGAL VERB
R0057   65  ILLEGAL VERB
R0058   66  ILLEGAL VERB
R0059   67  ILLEGAL VERB
R0060   70  ILLEGAL VERB
R0061   71  ILLEGAL VERB
R0062   72  ILLEGAL VERB
R0063   73       RHC USED FOR MINIMUM IMPULSE
R0064   74       RHC USED FOR RATE COMMAND
R0065   75       DIGITAL AUTOPILOT WIDE DEADBAND
R0066   76       DIGITAL AUTOPILOT NARROW DEADBAND
R0067   77  ILLEGAL VERB
P0068   NORMAL NOUNS                                       SCALE AND DECIMAL POI
 0069  9NT
R0070   00  NOT IN USE
R0071   01  SPECIFY MACHINE ADDRESS (FRACTIONAL)           (.XXXXX)
R0072   02  SPECIFY MACHINE ADDRESS (WHOLE)                (XXXXX.)
R0073   03  SPECIFY MACHINE ADDRESS (DEGREES)              (XXX.XXDEGREES)
R0074   04  SPECIFY MACHINE ADDRESS (HOURS)                (XXX.XXHOURS)
R0075   05  SPECIFY MACHINE ADDRESS (SECONDS)              (XXX.XXSECONDS)
R0076   06  SPECIFY MACHINE ADDRESS (GYRO DEGREES)         (XX.XXXDEGREES)
R0077   07  SPARE
R0078   10  CHANNEL TO BE SPECIFIED
R0079   11  SPARE
R0080   12  SPARE
R0081   13  SPARE
R0082   14  SPARE
R0083   15  INCREMENT MACHINE ADDRESS                      (OCTAL ONLY)
R0084   16  TIME SECONDS                                   (XXX.XXSECONDS)
R0085   17  TIME HOURS                                     (XXX.XXHOURS)
R0086   20  ICDU                                           (XXX.XXDEGREES)
R0087   21  PIPAS                                          (XXXXX.PULSES)
R0088   22  NEW ANGLES I                                   (XXX.XXDEGREES)
R0089   23  DELTA ANGLES I                                 (XXX.XXDEGREES)
R0090   24  DELTA TIME (SECONDS)                           (XXX.XXSECONDS)
R0091   25  CHECKLIST                                      (XXXXX.)
R0092   26  PRIO/DELAY, ADRES, BBCON                       (OCTAL ONLY)
R0093   27  SELF TEST ON/OFF SWITCH                        (XXXXX.)
R0094   30  STAR NUMBERS                                   (XXXXX.)
R0095   31  FAILREG, SFAIL, ERCOUNT                        (OCTAL ONLY)
R0096   32  DECISION TIME (MIDCOURSE)                      (XXX.XXHOURS (INTERNA
 0097  9L UNITS = WEEKS))
R0098   33  EPHEMERIS TIME (MIDCOURSE)                     (XXX.XXHOURS (INTERNA
 0099  9L UNITS = WEEKS))
R0100   34  MEASURED QUANTITY (MIDCOURSE)                  (XXXX.XKILOMETERS)
R0101   35  INBIT MESSAGE                                  (OCTAL ONLY)
R0102   36  LANDMARK DATA 1                                (OCTAL ONLY)
R0103   37  LANDMARK DATA 2                                (OCTAL ONLY)
R0104   40  RENDEZVOUS RADAR ANGLES (TRUNION,SHAFT)        (XXX.XXDEGREES)
R0105   41  NEW RENDEZVOUS RADAR ANGLES (TRUNION,SHAFT)    (XXX.XXDEGREES)
R0106   42  AOT ROTATION ANGLES                            (XXX.XXDEGREES)
R0107   43  AOT DETENT CODE                                (XXXXX.)
R0108   44  FORWARD VELOCITY, LATERAL VELOCITY             (XXXXX.FEET/SEC)
R0109   45  ROTATIONAL HAND CONTROLLER ANGLE RATES         (XXXXX.DEG/SEC)
R0110   46  SPARE
R0111   47  SPARE
R0112   50  SPARE
R0113   51  SPARE
R0114   52  GYRO BIAS DRIFT                                (.BBXXXXXMILLIRAD/SEC
 0115  9)
R0116   53  GYRO INPUT AXIS ACCELERATION DRIFT             (.BBXXXXX(MILLIRAD/SE
 0117  9C)/(CM/SEC SEC))
R0118   54  GYRO SPIN AXIS ACCELERATION DRIFT              (.BBXXXXX(MILLIRAD/SE
 0119  9C)/(CM/SEC SEC))
R0120  4END OF NORMAL NOUNS
R0121   MIXED NOUNS                                        SCALE AND DECIMAL POI
 0122  9NT
R0123   55  LANDING RADAR ALTITUDE, TIME (SECONDS)         (XXXXX.FEET, XXX.XXSE
 0124  9C)
R0125   56  LANDING RADAR VELX, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0126  9XXSEC)
R0127   57  LANDING RADAR VELY, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0128  9XXSEC)
R0129   60  LANDING RADAR VELZ, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0130  9XXSEC)
R0131   61  TARGET AZIMUTH AND ELEVATION                   (XXX.XXDEG, XX.XXXDEG
 0132  9)
R0133   62  RENDEZVOUS RADAR RANGE, TRUNION, SHAFT         (XXXXXB.FEET, XXX.XXD
 0134  9EG, XXX.XXDEG)
R0135   63  RENDEZVOUS RADAR RANGE RATE, TRUNION, SHAFT    (XXXXX.FEET/SEC, XXX.
 0136  9XXDEG, XXX.XXDEG)
R0137   64  INITIAL ALTITUDE, FINAL ALTITUDE, ALT. RATE    (XXXXX.FEET, XXXXX.FE
 0138  9ET, XXXXX.FEET/SEC)
R0139   65  SAMPLED TIME (HOURS AND SECONDS)               (XXX.XXHOURS, XXX.XXS
 0140  9EC)
R0141           (FETCHED IN INTERRUPT)
R0142   66  SYSTEM TEST RESULTS                            (XXXXX., .XXXXX, XXXX
 0143  9X.)
R0144   67  DELTA GYRO ANGLES                              (XX.XXXDEG  FOR EACH)
R0145   70  OPTICAL TRACKER ANGLES (AZIMUTH, ELEVATION)    (XXX.XXDEG, XXX.XXDEG
 0146  9)
R0147   71  DESIRED OPTICAL TRACKER ANGLES (AZ, ELEV)      (XXX.XXDEG, XXX.XXDEG
 0148  9)
R0149   72  DELTA POSITION                                 (XXXX.XKILOMETERS  FO
 0150  9R EACH)
R0151   73  DELTA VELOCITY                                 (XXXX.XMETERS/SEC  FO
 0152  9R EACH)
R0153   74  MEASUREMENT DATA (MIDCOURSE)                   (XXX.XXHOURS (INTERNA
 0154  9L UNITS=WEEKS), XXXX.XKILOMETERS, XXXXX.
R0155   75  MEASUREMENT DEVIATIONS (MIDCOURSE)             (XXXX.XKILOMETERS, XX
 0156  9XX.XMETERS/SEC, XXXX.XKILOMETERS)
R0157   76  POSITION VECTOR                                (XXXX.XKILOMETERS  FO
 0158  9R EACH)
R0159   77  VELOCITY VECTOR                                (XXXX.XMETERS/SEC  FO
 0160  9R EACH)
P0161  4TABLE OF ERROR CODES
R0162  2OPTICS SUB-SYSTEM
R0163   00105    MARK BUTTONS NOT AVAILABLE
R0164   00111    MARK IS MISSING AFTER ENTER
R0165   00112    MARK NOT BEING ACCEPTED
R0166   00113    NO INBITS
R0167   00114    MARK MADE BUT NOT DESIRED
R0168  200115    X MARK NOT MADE
R0169  2IMU SUB-SYSTEM
R0170   00207    ISS TURN-ON REQUEST NOT PRESENT FOR 90 SEC.
R0171   00210    IMU NOT OPERATING
R0172   00211    COARSE ALIGN ERROR
R0173   00212    PIPA FAIL BUT PIPA IS NOT BEING USED
R0174   00213    IMU NOT OPERATING WITH TURN-ON REQUEST
R0175  200214    PROGRAM USING IMU WHEN TURNED OFF
R0193  2PROCEDURAL DIFFICULTY
R0194   00401    DESIRED GIMBAL ANGLES YIELD GIMBAL LOCK
R0195   00402    STAR OUT OF FIELD OF VIEW
R0196  200403    STAR OUT OF FIELD OF VIEW
R0197  2RADAR ERRORS
R0198   00501    RADAR ANTENNA OUT OF LIMITS
R0199   00502    BAD RADAR GIMBAL ANGLE INPUTS
R0200   00503    RADAR ANTENNA DESIGNATE FAIL
R0201   00510    RADAR AUTO DESCRETE NOT PRESENT
R0202   00514    RADAR GOES OUT OF AUTO MODE WHILE BEING USED
R0203   00520    NO RADAR RUPT EXPECTED
R0204   00521    RADAR DATA COULD NOT BE READ
R0205   00522    WRONG LR POSITION
R0206   00523    LR ANTENNA DID NOT MAKE IT
R0207  200524    BAD RADAR TARGET
R0208  2COMPUTER HARDWARE MALFUNCTIONS
R0209   01102    AGC SELF TEST ERROR
R0210   01103    UNUSED CCS BRANCH EXECUTED . ABORT
R0211   01105    DOWNLINK TOO FAST
R0212  201106    UPLINK TOO FAST
R0213  2LIST OVERFLOWS ( ALL ABORTS )
R0214   01201    EXECUTIVE OVERFLOW-NO VAC AREAS
R0215   01202    EXECUTIVE OVERFLOW-NO CORE SETS
R0216   01203    WAITLIST OVERFLOW-TOO MANY TASKS
R0217   01206    KEYBOARD AND DISPLAY WAITING LINE OVERFLOW
R0218   01207    NO VAC AREA FOR MARKS
R0219  201210    TWO PROGRAMS USING DEVICE AT SAME TIME
R0220  2INTERPRETER ERRORS
R0221   01301    ARCSIN-ARCCOS INPUT ANGLE TOO LARGE. ABORT
R0222  201302    SQRT CALLED WITH NEGATIVE ARGUMENT . ABORT
R0223  2DISPLAY ALARMS
R0224   01400    PITCH AND/OR ROLL TRIM FAIL IS ON (SHOWN WITH V50N25).
R0225   01410    TEMPORARY JET FAIL
R0226  201411    CDU DOES NOT AGREE WITH COMMAND TO 1 DEGREE
R0227  2KEYBOARD AND DISPLAY PROGRAM
R0228   01501    KEYBOARD AND DISPLAY ALARM DURING INTERNAL USE(NVSUB).ABORT
R0229  2SYSTEM TEST ALARMS
R0230   01600    DRIFT TEST OVERFLOW ALARM
R0231   01601    SOME ERROR IN GYRO TORQUING DURING DRIFT TEST OR COMPASSS
L      2ERASABLE ASSIGNMENTS
 0001   A        EQUALS 0
 0002   L        EQUALS 1               L AND Q ARE BOTH CHANNELS AND REGISTERS.
 0003   Q        EQUALS 2
 0004   EBANK    EQUALS 3
 0005   FBANK    EQUALS 4
 0006   Z        EQUALS 5               ADJACENT TO FBANK AND BBANK FOR DXCH Z
 0007   BBANK    EQUALS 6               (DTCB) AND DXCH FBANK (DTCF).
A0008  2                                REGISTER 7 IS A ZERO-SOURCE, USED BY ZL.
 0009   ARUPT    EQUALS 10              INTERRUPT STORAGE.
 0010   LRUPT    EQUALS 11
 0011   QRUPT    EQUALS 12
 0012   SAMPTIME EQUALS 13              SAMPLED TIME 1 & 2.
 0013   ZRUPT    EQUALS 15              (13 AND 14 ARE SPARES.)
 0014   BANKRUPT EQUALS 16              USUALLY HOLDS FBANK OR BBANK.
 0015  2BRUPT    EQUALS 17              RESUME ADDRESS AS WELL.
 0016   CYR      EQUALS 20
 0017   SR       EQUALS 21
 0018   CYL      EQUALS 22
 0019  4EDOP     EQUALS 23              EDITS INTERPRETIVE OPERATION CODE PAIRS.
 0020   TIME2    EQUALS 24
 0021   TIME1    EQUALS 25
 0022   TIME3    EQUALS 26
 0023   TIME4    EQUALS 27
 0024   TIME5    EQUALS 30
 0025   TIME6    EQUALS 31
 0026   CDUX     EQUALS 32
 0027   CDUY     EQUALS 33
 0028   CDUZ     EQUALS 34
 0029   OPTY     EQUALS 35
 0030   OPTX     EQUALS 36
 0031   PIPAX    EQUALS 37
 0032   PIPAY    EQUALS 40
 0033   PIPAZ    EQUALS 41
 0034   BMAGX    EQUALS 42
 0035   RHCP     EQUALS 42
 0036   BMAGY    EQUALS 43
 0037   RHCY     EQUALS 43
 0038   BMAGZ    EQUALS 44
 0039   RHCR     EQUALS 44
 0040   INLINK   EQUALS 45
 0041   RNRAD    EQUALS 46
 0042   GYROCTR  EQUALS 47
 0043   GYROCMD  EQUALS 47
 0044   CDUXCMD  EQUALS 50
 0045   CDUYCMD  EQUALS 51
 0046   CDUZCMD  EQUALS 52
 0047   OPTYCMD  EQUALS 53
 0048   OPTXCMD  EQUALS 54
 0049   EMSD     EQUALS 55
 0050   THRUST   EQUALS 55
 0051   LEMONM   EQUALS 56
 0052   OUTLINK  EQUALS 57
 0053  2ALTM     EQUALS 60
 0054            SETLOC 67              DECODED REGISTER FOR NIGHT-WATCHMAN ALM.
 0055  2NEWJOB   ERASE
 0056   LVSQUARE EQUALS 34D             SQUARE OF VECTOR INPUT TO ABVAL AND UNIT
 0057   LV       EQUALS 36D             LENGTH OF VECTOR INPUT TO UNIT.
 0058   X1       EQUALS 38D             INTERPRETIVE SPECIAL REGISTERS RELATIVE
 0059   X2       EQUALS 39D             TO THE WORK AREA.
 0060   S1       EQUALS 40D
 0061   S2       EQUALS 41D
 0062   QPRET    EQUALS 42D
P0063  2GENERAL ERASABLE ASSIGNMENTS.
 0064  2         SETLOC 61
R0065  2         INTERPRETIVE SWITCH RESERVATIONS.
 0066  2STATE    ERASE  +3              60 SWITCHES PRESENTLY.
R0067  2         INTERPRETIVE SWITCH BIT ASSIGNMENTS:
 0068   WMATFLAG EQUALS 0
 0069   JSWITCH  EQUALS 1
 0070   MIDFLAG  EQUALS 2
 0071   MOONFLAG EQUALS 3
 0072   NBSMBIT  EQUALS 4
 0073   COAROFIN EQUALS 5
 0074   BODYFLAG EQUALS 6
 0075   IMUSE    EQUALS 7
 0076   RRUSE    EQUALS 8D
 0077   RRNBSW   EQUALS 9D
 0078   LOKONSW  EQUALS 10D
R0079  4END OF SWITCH ASSIGNMENTS
R0080  2         THE FOLLOWING SET COMPRISES THE INTERRUPT TEMPORARY STORAGE POO
R0081            ANY OF THESE MAY BE USED AS TEMPORARIES DURING INTERRUPT OR WIT
 0082  9H INTERRUPT INHIBITED. THE ITEMP SERIES
R0083  2IS USED DURING CALLS TO THE EXECUTIVE AND WAITLIST - THE RUPTREGS ARE NO
 0084  9T.
 0085   ITEMP1   ERASE
 0086   WAITEXIT EQUALS ITEMP1
 0087  2EXECTEM1 EQUALS ITEMP1
 0088   ITEMP2   ERASE
 0089   WAITBANK EQUALS ITEMP2
 0090  2EXECTEM2 EQUALS ITEMP2
 0091  2         SETLOC 70
 0092   ITEMP3   ERASE
 0093   RUPTSTOR EQUALS ITEMP3
 0094   WAITADR  EQUALS ITEMP3
 0095  2NEWPRIO  EQUALS ITEMP3
 0096   ITEMP4   ERASE
 0097   LOCCTR   EQUALS ITEMP4
 0098  2WAITTEMP EQUALS ITEMP4
 0099   ITEMP5   ERASE
 0100  2NEWLOC   EQUALS ITEMP5
 0101   ITEMP6   ERASE
A0102  2NEWLOC+1 EQUALS ITEMP6          DP ADDRESS.
 0103   RUPTREG1 ERASE
 0104   RUPTREG2 ERASE
 0105   RUPTREG3 ERASE
 0106   RUPTREG4 ERASE
 0107   KEYTEMP1 EQUALS RUPTREG4
 0108  2DSRUPTEM EQUALS RUPTREG4
R0109  2         THE FOLLOWING ARE EXECUTIVE TEMPORARIES WHICH MAY BE USED BETWE
 0110  9EN CCS NEWJOB INQUIRIES.
 0111   INTB15+  ERASE                  REFLECTS 15TH BIT OF INDEXABLE ADDRESSES
 0112   DSEXIT   =      INTB15+         RETURN FOR DSPIN
 0113   EXITEM   =      INTB15+         RETURN FOR SCALE FACTOR ROUTINE SELECT
 0114  2BLANKRET =      INTB15+         RETURN FOR 2BLANK
 0115   INTBIT15 ERASE                  SIMILAR TO ABOVE.
 0116   WRDRET   =      INTBIT15        RETURN FOR 5BLANK
 0117   WDRET    =      INTBIT15        RETURN FOR DSPWD
 0118   DECRET   =      INTBIT15        RETURN FOR PUTCOM(DEC LOAD)
 0119  221/22REG =      INTBIT15        TEMP FOR CHARIN
R0120  2         THE REGISTERS BETWEEN ADDRWD AND PRIORITY MUST STAY IN THE FOLL
 0121  9OWING ORDER FOR INTERPRETIVE TRACE.
 0122   ADDRWD   ERASE                  12 BIT INTERPRETIVE OPERAND SUB-ADDRESS.
 0123   POLISH   ERASE                  HOLDS CADR MADE FROM POLISH ADDRESS.
 0124   UPDATRET =      POLISH          RETURN FOR UPDATNN, UPDATVB
 0125   CHAR     =      POLISH          TEMP FOR CHARIN
 0126   ERCNT    =      POLISH          COUNTER FOR ERROR LIGHT RESET
 0127  2DECOUNT  =      POLISH          COUNTER FOR SCALING AND DISPLAY (DEC)
 0128  2FIXLOC   ERASE                  WORK AREA ADDRESS.
 0129  2OVFIND   ERASE                  SET NON-ZERO ON OVERFLOW.
 0130   VBUF     ERASE  +5              TEMPORARY STORAGE USED FOR VECTORS.
 0131   SGNON    =      VBUF            TEMP FOR +,- ON
 0132   NOUNTEM  =      VBUF            COUNTER FOR MIXNOUN FETCH
 0133   DISTEM   =      VBUF            COUNTER FOR OCTAL DISPLAY VERBS
 0134  2DECTEM   =      VBUF            COUNTER FOR FETCH (DEC DISPLAY VERBS)
 0135   SGNOFF   =      VBUF    +1      TEMP FOR +,- ON
 0136   NVTEMP   =      VBUF    +1      TEMP FOR NVSUB
 0137  2SFTEMP1  =      VBUF    +1      STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
 0138   CODE     =      VBUF    +2      FOR DSPIN
 0139  2SFTEMP2  =      VBUF    +2      STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
 0140   MIXTEMP  =      VBUF    +3      FOR MIXNOUN DATA
 0141  2SIGNRET  =      VBUF    +3      RETURN FOR +,- ON
R0142  2ALSO MIXTEMP+1 = VBUF+4, MIXTEMP+2 = VBUF+5.
 0143   BUF      ERASE  +2              TEMPORARY SCALAR STORAGE.
 0144   BUF2     ERASE  +1
 0145   INDEXLOC EQUALS BUF             CONTAINS ADDRESS OF SPECIFIED INDEX.
 0146   SWWORD   EQUALS BUF             ADDRESS OF SWITCH WORD.
 0147   SWBIT    EQUALS BUF +1          SWITCH BIT WITHIN SWITCH WORD.
 0148   MPTEMP   ERASE                  TEMPORARY USED IN MULTIPLY AND SHIFT.
 0149   DOTINC   ERASE                  COMPONENT INCREMENT FOR DOT SUBROUTINE.
 0150   DVSIGN   EQUALS DOTINC          DETERMINES SIGN OF DDV RESULT.
 0151   ESCAPE   EQUALS DOTINC          USED IN ARCSIN/ARCCOS.
 0152  2ENTRET   =      DOTINC          EXIT FROM ENTER
 0153   DOTRET   ERASE                  RETURN FROM DOT SUBROUTINE.
 0154   DVNORMCT EQUALS DOTRET          DIVIDEND NORMALIZATION COUNT IN DDV.
 0155   ESCAPE2  EQUALS DOTRET          ALTERNATE ARCSIN/ARCCOS SWITCH.
 0156   WDCNT    =      DOTRET          CHAR COUNTER FOR DSPWD
 0157  2INREL    =      DOTRET          INPUT BUFFER SELECTOR ( X,Y,Z, REG )
 0158   MATINC   ERASE                  VECTOR INCREMENT IN MXV AND VXM.
 0159   MAXDVSW  EQUALS MATINC          +0 IF DP QUOTIENT IS NEAR ONE - ELSE -1.
 0160   POLYCNT  EQUALS MATINC          POLYNOMIAL LOOP COUNTER
 0161   DSPMMTEM =      MATINC          DSPCOUNT SAVE FOR DSPMM
 0162  2MIXBR    =      MATINC          INDICATOR FOR MIXED OR NORMAL NOUN
 0163   TEM1     ERASE                  EXEC TEMP
 0164   POLYRET  =      TEM1
 0165  2DSREL    =      TEM1            REL ADDRESS FOR DSPIN
 0166   TEM2     ERASE                  EXEC TEMP
 0167   DSMAG    =      TEM2            MAGNITUDE STORE FOR DSPIN
 0168  2IDADDTEM =      TEM2            MIXNOUN INDIRECT ADDRESS STORAGE
 0169   TEM3     ERASE                  EXEC TEMP
 0170  2COUNT    =      TEM3            FOR DSPIN
 0171   TEM4     ERASE                  EXEC TEMP
 0172   LSTPTR   =      TEM4            LIST POINTER FOR GRABUSY
 0173   RELRET   =      TEM4            RETURN FOR RELDSP
 0174  2FREERET  =      TEM4            RETURN FOR FREEDSP
 0175   TEM5     ERASE                  EXEC TEMP
 0176  2NOUNADD  =      TEM5            TEMP STORAGE FOR NOUN ADDRESS
 0177   NNADTEM  ERASE                  TEMP FOR NOUN ADDRESS TABLE ENTRY
 0178   NNTYPTEM ERASE                  TEMP FOR NOUN TYPE TABLE ENTRY
 0179   IDAD1TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0180                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
 0181   IDAD2TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0182                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
 0183   IDAD3TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0184                                   MUST = IDAD1TEM+2, = IDAD2TEM+1.
 0185  2RUTMXTEM ERASE                  TEMP FOR SF ROUT TABLE ENTRY(MIXNN ONLY)
R0186  2         STORAGE USED BY THE EXECUTIVE.
 0187   MPAC     ERASE  +6              MULTI-PURPOSE ACCUMULATOR.
 0188   MODE     ERASE                  +1 FOR TP, +0 FOR DP, OR -1 FOR VECTOR.
 0189   LOC      ERASE                  LOCATION ASSOCIATED WITH JOB.
 0190   BANKSET  ERASE                  USUALLY CONTAINS BBANK SETTING.
 0191   PUSHLOC  ERASE                  WORD OF PACKED INTERPRETIVE PARAMETERS.
 0192  2PRIORITY ERASE                  PRIORITY OF PRESENT JOB AND WORK AREA.
 0193  2         ERASE  +71D            SEVEN SETS OF 12 REGISTERS EACH.
P0194  4THE FOLLOWING REGISTERS ARE RESERVED FOR PINBALL
R0195  2RESERVED FOR PINBALL EXECUTIVE ACTION
 0196   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
 0197   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
 0198   VERBREG  ERASE                  VERB CODE
 0199   NOUNREG  ERASE                  NOUN CODE
 0200   XREG     ERASE                  R1 INPUT BUFFER
 0201   YREG     ERASE                  R2 INPUT BUFFER
 0202   ZREG     ERASE                  R3 INPUT BUFFER
 0203   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
 0204   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
 0205   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
 0206   MODREG   ERASE                  MODE CODE
 0207   DSPLOCK  ERASE                  KEYBOARD/SUBROUTINE CALL INTERLOCK
 0208   REQRET   ERASE                  RETURN REGISTER FOR LOAD
 0209   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
 0210   CLPASS   ERASE                  PASS INDICATOR CLEAR
 0211   NOUT     ERASE                  ACTIVITY COUNTER FOR DSPTAB
 0212   NOUNCADR ERASE                  MACHINE CADR FOR NOUN
 0213   MONSAVE  ERASE                  N/V CODE FOR MONITOR. (= MONSAVE1-1)
 0214   MONSAVE1 ERASE                  NOUNCADR FOR MONITOR(MATBS) =MONSAVE +1
 0215   DSPTAB   ERASE  +11D            0-10D, DISPLAY PANEL BUFF. 11D, C/S LTS.
 0216   CADRSTOR ERASE                  ENDIDLE STORAGE
 0217   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
 0218   NVQTEM   ERASE                  NVSUB STORAGE FOR CALLING ADDRESS
A0219                                   MUST = NVBNKTEM-1
 0220   NVBNKTEM ERASE                  NVSUB STORAGE FOR CALLING BANK
A0221                                   MUST = NVQTEM+1
 0222   DSPLIST  ERASE          +2      WAITING LIST FOR DSP SYST INTERNAL USE
 0223   EXTVBACT ERASE                  EXTENDED VERB ACTIVITY INTERLOCK
 0224   DSPTEM1  ERASE          +2      BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
 0225   DSPTEM2  ERASE          +2      BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
R0226  4END OF ERASABLES RESERVED FOR PINBALL EXECUTIVE ACTION
R0227  2RESERVED FOR PINBALL INTERRUPT ACTION
 0228   DSPCNT   ERASE                  COUNTER FOR DSPOUT
 0229   UPLOCK   ERASE                  BIT1 = UPLINK INTERLOCK (ACTIVATED BY
A0230                                   RECEPTION OF A BAD MESSAGE IN UPLINK)
R0231  4END OF ERASABLES RESERVED FOR PINBALL INTERRUPT ACTION
R0232  2         DAP STORAGE IN NON-SWITCHED ERASABLE.
 0233   T6LOC    ERASE  +1
 0234   T6ADR    EQUALS T6LOC
 0235   T5LOC    ERASE  +1
 0236   T5ADR    EQUALS T5LOC
P0237  2ASSIGNMENTS FOR T4RUPT PROGRAM
 0238   T4LOC    ERASE
 0239   DSRUPTSW ERASE
 0240   DIDFLG   ERASE
 0241   ALT      ERASE  +1
 0242   ALTRATE  ERASE
 0243   FINALT   ERASE  +1              (MAY NOT BE REQUIRED FOR FLIGHTS).
 0244   LGYRO    ERASE
 0245   FORVEL   ERASE
 0246   LATVEL   ERASE
 0247   LASTYCMD ERASE
 0248  2LASTXCMD ERASE
 0249   ALTSAVE  ERASE  +1
 0250  2LMPCMD   ERASE
R0251  4END OF T4RUPT ASSIGNMENTS
 0252   IMODES30 ERASE
 0253   IMODES33 ERASE
 0254   MODECADR ERASE  +2
 0255   IMUCADR  EQUALS MODECADR
 0256   AOTCADR  EQUALS MODECADR +1
 0257   OPTCADR  EQUALS AOTCADR
 0258  2RADCADR  EQUALS MODECADR +2
 0259   MARKSTAT ERASE
 0260   XYMARK   ERASE
 0261            SETLOC 400
P0262  2TEMPORARY PHONY ASSIGNMENTS TO KEEP PINBALL FROM HAVING BAD ASSEMBLIES
 0263   THETAD   ERASE  +2
 0264   DELVX    ERASE  +5
R0265  4END OF PHONY ASSIGNMENTS
R0266            DOWNLINK LIST ADDRESS.
 0267  2DNLSTADR ERASE
R0268   AGS DUMMY ID WORD
 0269   AGSWORD  ERASE
R0270  2RADAR ERASABLE
 0271   RADMODES ERASE
 0272   SAMPLIM  ERASE
 0273   SAMPLSUM ERASE  +1
 0274   SAMPSUM  EQUALS SAMPLSUM
 0275   OPTYHOLD ERASE  +1
 0276   TIMEHOLD ERASE  +1
 0277   RRTARGET EQUALS SAMPLSUM        HALF UNIT VECTOR IN SM OR NB AXES.
 0278   TANG     ERASE  +1              DESIRED TRUNNION AND SHAFT ANGLES.
 0279   MODEA    EQUALS TANG
 0280   MODEB    ERASE  +1              DODES CLOBBERS TANG +2.
 0281   NSAMP    EQUALS MODEB
 0282   DESRET   ERASE
 0283   OLDATAGD EQUALS DESRET          USED IN DATA READING ROUTINES.
 0284   DESCOUNT ERASE
R0285  2END OF RADAR ERASABLE ASSIGNMENTS
 0286   VAC1USE  ERASE
 0287   VAC1     ERASE  +42D
 0288   VAC2USE  ERASE
 0289   VAC2     ERASE  +42D
 0290   VAC3USE  ERASE
 0291   VAC3     ERASE  +42D
 0292   VAC4USE  ERASE
 0293   VAC4     ERASE  +42D
 0294   VAC5USE  ERASE
 0295  2VAC5     ERASE  +42D
R02951 2UNSWITCHED ERASABLE STORAGE ASSIGNMENTS FOR THE DAP
 02952  DAPBOOLS ERASE
 02953  T6NEXT   ERASE  +1
 02954 2T6NEXTJT ERASE  +2
 02955  DELAYCTR ERASE
R02956  THESE ARE WRITTEN INTO FROM SEVERAL PROGRAMS
 02957  CDUXD    ERASE
 02958  CDUYD    ERASE
 02959  CDUZD    ERASE
 0296  2         SETLOC 1000
R0297  2ERASABLE STORAGE FOR AVERAGE G INTEGRATOR
 0298   RN       ERASE  +5
 0299   VN       ERASE  +5
 0300   NSHIFT   ERASE
 0301   XSHIFT   ERASE
 0302   UNITR    ERASE  +5
 0303   UNITW    ERASE  +5
 0304   RMAG     ERASE  +1
 0305   RMAGSQ   ERASE  +1
 0306   GRAVITY  ERASE  +5
 0307   DELV     ERASE  +5
 0308   DELTAT   ERASE  +1
 0309   RN1      ERASE  +5
 0310   VN1      ERASE  +5
R0312  2         WAITLIST REPEAT FLAG:
 0313   RUPTAGN  ERASE
 0314  2KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
R0315  2         PHASE TABLE AND RESTART COUNTER.
 0316   -PHASE0  ERASE
 0317   PHASE0   ERASE
 0318   -PHASE1  ERASE
 0319   PHASE1   ERASE
 0320   -PHASE2  ERASE
 0321   PHASE2   ERASE
 0322   -PHASE3  ERASE
 0323   PHASE3   ERASE
 0324   -PHASE4  ERASE
 0325   PHASE4   ERASE
 0326   -PHASE5  ERASE
 0327  2PHASE5   ERASE
R0328  2ERASABLE FOR SINGLE PRECISION SUBROUTINES.
 0329   HALFY    ERASE
 0330   ROOTRET  ERASE
 0331   SQRARG   ERASE
 0332   TEMK     EQUALS HALFY
 0333  2SQ       EQUALS ROOTRET
 0334   1/PIPADT ERASE                  IMU COMPENSATION PACKAGE
 0335  2OLDBT1   =      1/PIPADT
R0366   ASSIGNMENTS RESERVED EXCLUSIVELY FOR SELF-CHECK
 0367  2SELFERAS ERASE  1360 - 1377
 0368   SELFRET  =      1360
 0369   SMODE    =      1361
 0370   REDOCTR  =      1362            KEEPS TRACK OF RESTARTS
 0371   FAILREG  =      1363
 0372   SFAIL    =      1364
 0373   ERCOUNT  =      1365
 0374   SCOUNT   =      1366
 0375   SKEEP1   =      1371
 0376   SKEEP2   =      1372
 0377   SKEEP3   =      1373
 0378   SKEEP4   =      1374
 0379   SKEEP5   =      1375
 0380   SKEEP6   =      1376
 0381  2SKEEP7   =      1377
R0382  2WAITLIST TASK LISTS
 0383  2         SETLOC 1400
 0384   LST1     ERASE  +7              DELTA T'S.
 0385  2LST2     ERASE  +17D            2CADR TASK ADDRESSES.
R0386  2IMU COMPENSATION PARAMETERS:
 0387   PBIASX   ERASE                  PIPA BIAS AND PIPA SCALE FACTOR TERMS
 03875  PIPABIAS =      PBIASX              INTERMIXED.
 0388   PIPASCFX ERASE
 03885  PIPASCF  =      PIPASCFX
 0389   PBIASY   ERASE
 0390   PIPASCFY ERASE
 0391   PBIASZ   ERASE
 0392  2PIPASCFZ ERASE
 0393   NBDX     ERASE                  GYRO BIAS DRIFTS
 03931  GBIASX   =      NBDX
 03932  NBDY     ERASE
 03934 2NBDZ     ERASE
 0394   ADIAX    ERASE                  ACCELERATION SENSITIVE DRIFT ALONG THE
 03942  ADIAY    ERASE                      INPUT AXIS
 03944 2ADIAZ    ERASE
 0395   ADSRAX   ERASE                  ACCELERATION SENSITIVE DRIFT ALONG THE
 03952  ADSRAY   ERASE                      SPIN REFERENCE AXIS
 03954 2ADSRAZ   ERASE
 0396   GCOMP    ERASE  +5              CONTAINS COMPENSATING TORQUES
 03965  GCOMPSW  ERASE
 0397   COMMAND  EQUALS GCOMP
 0398  2CDUIND   EQUALS GCOMP +3
R0399  2         STORAGE FOR RR TASKS.
 0400   RRRET    ERASE
 0401   RDES     ERASE
 0402  2RRINDEX  ERASE
R0403   AOT CALIBRATIONS IN AZIMUTH AND ELEVATION AT DETENTS
 0404   AOTAZ    ERASE  +2
 0405   AOTEL    ERASE  +2
R0406            ASSIGNMENTS FOR PRESENTLY UNUSED NOUNS.
 04061  AZANG    EQUALS                 DELETE WHEN OPTICAL TRACKER NOUNS GONE.
 04062  ELANG    EQUALS
 04063  DESLOTSY EQUALS
 04064 2DESLOTSX EQUALS
 0407   ROLL     ERASE  +2
 0408  2LANDMARK ERASE  +5
R04081 2THE FOLLOWING REGS ARE USED BY THE STANDBY VERBS
 04082  TIMESAV  ERASE  +1
 04083  SCALSAV  ERASE  +1
 04084  TIMAR    ERASE  +1
 04085 2TIMEDIFF ERASE  +1
 0409  2         SETLOC 2000
 0410   AMEMORY  ERASE  +150D
R0411  2         THE FOLLOWING A MEMORY LOCATIONS ARE USED BY MID-COURSE NAVIGAT
 0412  9ION:
 0413   RRECT    EQUALS AMEMORY +000D
 0414   RIGNTION EQUALS AMEMORY +000D
 0415   VRECT    EQUALS AMEMORY +006D
 0416   VIGNTION EQUALS AMEMORY +006D
 0417   TDELTAV  EQUALS AMEMORY +012D
 0418   NEWDLTAV EQUALS AMEMORY +012D
 0419   TNUV     EQUALS AMEMORY +018D
 0420   NEWNUV   EQUALS AMEMORY +018D
 0421   RCV      EQUALS AMEMORY +024D
 0422   FOUNDR   EQUALS AMEMORY +024D
 0423   VCV      EQUALS AMEMORY +030D
 0424   FOUNDV   EQUALS AMEMORY +030D
 0425   TC       EQUALS AMEMORY +036D
 0426   TET      EQUALS AMEMORY +038D
 0427   XKEP     EQUALS AMEMORY +040D
 0428   ALPHAV   EQUALS AMEMORY +042D
 0429   DELR     EQUALS AMEMORY +042D
 0430   BETAV    EQUALS AMEMORY +048D
 0431   DELVEL   EQUALS AMEMORY +048D
 0432   PHIV     EQUALS AMEMORY +054D
 0433   BVECTOR  EQUALS AMEMORY +054D
 0434   PSIV     EQUALS AMEMORY +060D
 0435  2FV       EQUALS AMEMORY +066D
 0436  2VECTAB   EQUALS AMEMORY +072D
 0437   TAVEGON  EQUALS AMEMORY +072D
 0438   TRESUME  EQUALS AMEMORY +074D
 0439   RAVEGON  EQUALS AMEMORY +076D
 0440   VAVEGON  EQUALS AMEMORY +082D
 0441   RIG-4SEC EQUALS AMEMORY +088D
 0442   ALPHAM   EQUALS AMEMORY +108D
 0443   BETAM    EQUALS AMEMORY +110D
 0444   TAU      EQUALS AMEMORY +112D
 0445   GIVENT   EQUALS AMEMORY +112D
 0446   DT/2     EQUALS AMEMORY +114D
 0447   H        EQUALS AMEMORY +116D
 0448   TDEC     EQUALS AMEMORY +118D
 0449   FBRANCH  EQUALS AMEMORY +120D
 0450   HBRANCH  EQUALS AMEMORY +121D
 0451   GMODE    EQUALS AMEMORY +122D
 0452   QREADY   EQUALS AMEMORY +123D
 0453   MEASQ    EQUALS AMEMORY +124D
 0454  2DELTAQ   EQUALS AMEMORY +126D
 0455   MEASMODE EQUALS AMEMORY +128D
 0456   NVCODE   EQUALS AMEMORY +129D
 0457   MIDEXIT  EQUALS AMEMORY +130D
 0458   DSPRTRN  EQUALS AMEMORY +130D
 0459   INCORPEX EQUALS AMEMORY +131D
 0460   STEPEXIT EQUALS AMEMORY +132D
 0461   DIFEQCNT EQUALS AMEMORY +133D
 0462   NORMGAM  EQUALS AMEMORY +133D
 0463   SCALEA   EQUALS AMEMORY +134D
 0464   SCALEB   EQUALS AMEMORY +135D
 0465   SCALDT   EQUALS AMEMORY +136D
 0466   SCALDELT EQUALS AMEMORY +137D
 0467  2SCALER   EQUALS AMEMORY +138D
 0468   YV       EQUALS AMEMORY +139D
 0469  2ZV       EQUALS AMEMORY +145D
 0470   PBODY    ERASE
 0471  4W        ERASE  +071D
R0472  2 THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE  ENTRY AND INITIALIZAT
 0473  9ION JOB OF THE FCS TEST FOR LEM.
 0474  2FCSCNTR  EQUALS AMEMORY +000D
R0475  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE JETSET TASK.
R04751 2(OPTIMUM PRELAUNCH A C USES JETSTEP-JETSTEP +77D FOR RESTART PROOF)
 0476   XJBUF    EQUALS AMEMORY +001D
 0477   YZJBUF   EQUALS AMEMORY +002D
 0478   JFBUF    EQUALS AMEMORY +003D
 0479   FCNTR    EQUALS AMEMORY +004D
 0480   THBUF    EQUALS AMEMORY +005D
 0481   OFFTMBUF EQUALS AMEMORY +006D
 0482   JETSTEP  EQUALS AMEMORY +007D
 0483   NTIMES   EQUALS AMEMORY +008D
 0484   NEXTTIME EQUALS AMEMORY +016D
 0485   JETONTM  EQUALS AMEMORY +024D
 0486   XJETS    EQUALS AMEMORY +032D
 0487   YZJETS   EQUALS AMEMORY +040D
 0488  2JETOFFTM EQUALS AMEMORY +048D
R0489  2   THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE ENGINE ON-OFF TASK.
 0490   ENGSTEP  EQUALS AMEMORY +056D
 0491   CYLTIMES EQUALS AMEMORY +057D
 0492   NEXTCYLT EQUALS AMEMORY +060D
 0493   ONTIME   EQUALS AMEMORY +063D
 0494   OFFTIME  EQUALS AMEMORY +066D
 0495  2OFFTIMER EQUALS AMEMORY +069D
R0496  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE TRIM TASK.
 0497   TRIMSTEP EQUALS AMEMORY +072D
 0498   NUMTIMES EQUALS AMEMORY +073D
 0499   STEPDLYT EQUALS AMEMORY +085D
 0500   TRIMONT  EQUALS AMEMORY +097D
 0501   TRIMOFFT EQUALS AMEMORY +109D
 0502  2TRIMIND  EQUALS AMEMORY +121D
R0503  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE THROTTLE TASK.
 0504   THRTSTEP EQUALS AMEMORY +133D
 0505   DOTIMES  EQUALS AMEMORY +134D
 0506   DELAY    EQUALS AMEMORY +140D
 0507   THR1TIME EQUALS AMEMORY +146D
 0508   THCOMM1  EQUALS AMEMORY +152D
 0509  2THCOMM2  EQUALS AMEMORY +158D
R0510  2 THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE INTERFACE LOOK TASK.
 0511   30BUF1   EQUALS AMEMORY +164D
 0512   30BUF0   EQUALS AMEMORY +168D
 0513   QUITLOOK EQUALS AMEMORY +172D
 0514  2CHCNTR   EQUALS AMEMORY +173D
 0515            SETLOC 2400
R0516  2THE FOLLOWING ERASABLE LOCATIONS ARE UTILIZED BY THE IN-FLIGHT ALIGNMENT
 0517  9 ROUTINES
 0518   XSM      ERASE  +17D
 0519   YSM      =      XSM +6
 0520   ZSM      =      XSM +12D
 0521   XDC      ERASE  +17D
 0522   YDC      =      XDC +6
 0523   ZDC      =      XDC +12D
 0524   XNB      =      XDC
 0525   YNB      =      XDC +6
 0526   ZNB      =      XDC +12D
 0527   STARAD   ERASE  +17D
 0528   STAR     ERASE  +5
 0529   SAC      ERASE  +1
 0530   PAC      ERASE  +1
 0531   OGC      ERASE  +1
 0532   IGC      ERASE  +1
 0533   MGC      ERASE  +1
 0534   ZPRIME   =      22D
 0535   PDA      =      22D
 0536   COSTH    =      16D
 0537   SINTH    =      18D
 0538   THETA    =      20D
 0539  4STARM    =      32D
R0540  2THE FOLLOWING ERASABLE LOCATIONS ARE UTILIZED BY THE SYSTEM TESTS
 0541   AZIMUTH  ERASE  +1
 0542  2LATITUDE ERASE  +1
 0543   EROPTN   ERASE
 0544   ERVECTOR ERASE  +5
 0545   GYROD    ERASE  +5
 0546   LENGTHOT ERASE
 0547   LOSVEC   ERASE  +5
 0548   NBPOS    ERASE
 0549   NDXCTR   ERASE
 0550   PIPANO   ERASE
 0551   PIPINDEX ERASE
 0552   PIPNDX   ERASE  +1
 0553   POSITON  ERASE
 0554   QPLAC    ERASE
 0555   QPLACE   ERASE
 0556   QPLACES  ERASE
 0557   RUN      ERASE
 0558   STOREPL  ERASE
 0559   SOUTHDR  ERASE
 0560   TAZEL1   ERASE  +5
 0561   TEMPTIME ERASE  +1
 0562   TESTNO   ERASE
 0563   TMARK    ERASE  +1
 0564   SHAFTA   ERASE
 0565   TRUNA    ERASE
 0566   ZERONDX  =      ERCOMP +5
 0567  2GENPL    ERASE  +111D
 0568   CDUTIMEI =      GENPL
 0569   CDUTIMEF =      GENPL +2
 0570   CDUDANG  =      GENPL +4
 0571   CDUREADF =      GENPL +5
 0572   CDUREADI =      GENPL +6
 0573  2CDULIMIT =      GENPL +7
 0574   TEMPADD  =      GENPL +4
 0575   TEMP     =      GENPL +5
 0576   NOBITS   =      GENPL +6
 0577  2CHAN     =      GENPL +7
 0578   LOS1     =      GENPL +8D
 0579  2LOS2     =      GENPL +14D
 0580   CALCDIR  EQUALS GENPL +20D
 0581   CDUFLAG  EQUALS GENPL +21D
 0582   GYTOBETQ EQUALS GENPL +22D
 0583   OPTNREG  EQUALS GENPL +23D
 0584   SAVE     EQUALS GENPL +24D      THREE CONSEC LOC
 0585   SFCONST1 EQUALS GENPL +27D
 0586  2TIMER    EQUALS GENPL +28D
 0587   DATAPL   EQUALS GENPL +30D
 0588   RDSP     EQUALS GENPL           FIX LATER   POSSIBLY KEEP1
 0589   MASKREG  EQUALS GENPL +64D
 0590   CDUNDX   EQUALS GENPL +66D
 0591   RESULTCT EQUALS GENPL +67D
 0592  2COUNTPL  EQUALS GENPL +70D
 0593   CDUANG   EQUALS GENPL +71D
 0594  2AINLA    =      GENPL           110 DEC OR 156 OCT LOCATIONS
 0595   WANGO    EQUALS AINLA           VERT ERATE
 0596   WANGI    EQUALS AINLA +2D       HO
 0597   WANGT    EQUALS AINLA +4D       T
 0598   TORQNDX  =      WANGT
 0599   DRIFTT   EQUALS AINLA +6D       EAST AX
 0600   ALX1S    EQUALS AINLA +8D       IN
 0601   CMPX1    EQUALS AINLA +9D       IND
 0602   ALK      EQUALS AINLA +10D      GAINS
 0603   VLAUNS   EQUALS AINLA +22D
 06031  THETAX   =      VLAUNS
 0604   WPLATO   EQUALS AINLA +24D
 0605   INTY     EQUALS AINLA +28D      SOUTH PIP INTE
 0606   ANGZ     EQUALS AINLA +30D      EAST AXIS
 0607   INTZ     EQUALS AINLA +32D      EAST PIP I
 0608   ANGY     EQUALS AINLA +34D      SOUTH
 06081  THETAN   =      INTY
 0609   ANGX     EQUALS AINLA +36D      VE
 0610   DRIFTO   EQUALS AINLA +38D      VERT
 0611   DRIFTI   EQUALS AINLA +40D      SOU
 0612   VLAUN    EQUALS AINLA +44D      LAUNCH
 06121  FILDELV  =      VLAUN
 0613   ACCWD    EQUALS AINLA +46D      LAUN
 06131  INTVEC   =      ACCWD
 0614   POSNV    EQUALS AINLA +52D      LAUNC
 0615   DPIPAY   EQUALS AINLA +54D      SOUTH
 0616   DPIPAZ   EQUALS AINLA +58D      NORTH PIP INCREMENT
 0617   ALTIM    EQUALS AINLA +60D      LENG
 0618   ALTIMS   EQUALS AINLA +61D       INDEX
 0619   ALDK     EQUALS AINLA +62D       TIME CONSTAN
 0620   DELM     EQUALS AINLA +76D
 0621   WPLATI   EQUALS AINLA +84D
 0622   GEOSAVED EQUALS AINLA +86D
 0623   PREMTRXC EQUALS AINLA +87D
 0624   PRELMTRX EQUALS AINLA +88D
 0625   TRANSM1  =      PRELMTRX
 0626   GEOCOMPS EQUALS AINLA +106D
 0627   GTSOPNDZ EQUALS AINLA +107D
 0628   1SECXT   EQUALS AINLA +108D
 0629   GTSWTLST EQUALS AINLA +109D
 0630   ERECTIME EQUALS AINLA +110D
 0631   GEOMTRX  EQUALS AINLA +111D
 0632  8ERCOMP   EQUALS AINLA +129D
 0647   BMEMORY  EQUALS GENPL
 0668   DELVY    EQUALS DELVX +2
 0669   DELVZ    EQUALS DELVX +4
 0832  2         SETLOC 3400
R0833  2         DOWNLINK STORAGE.
 0834   LDATALST ERASE
 0835   DNTMGOTO ERASE
 0836   TMINDEX  ERASE
 0837  2DNTMBUFF ERASE  +21D            SNAPSHOT BUFFER.
R0838  2         RADAR TEST STORAGE.
 0839   RTSTDEX  ERASE
 0840   RTSTMAX  ERASE                  66 FOR HI SPEED, 6 FOR LOW SPEED RR,
A0841                                   AND 18 FOR LOW SPEED LR.
 0842   RTSTBASE ERASE                  USED FOR CYCLIC SAMPLING.
 0843   RTSTLOC  ERASE                  GOES 0(6)RTSTMAX
 0844   RSTKLOC  EQUALS RTSTLOC
 0845   RSAMPDT  ERASE                  PNZ FOR CYCLIC SAMPLING, -1 FOR HI SPEED
A0846                                   INSERT +0 HERE MANUALLY TO TERMINATE TST
 0847   RFAILCNT ERASE
 0848  2RSTACK   ERASE  +71D            BUFFERS FOR RADAR TESTING.
R0849   AGS INITIALIZATION
 0850   AGSBUFF  ERASE  +27D
R0851  2         STORAGE FOR INBIT SCANNER.
 0852   LAST30   ERASE  +2              LAST SAMPLED INBITS.
 0853   MSGCNT   ERASE
L      2INPUT/OUTPUT CHANNELS
 0001   HISCALAR EQUALS 3
 0002   LOSCALAR EQUALS 4
 0003   OUT0     EQUALS 10
 0004   DSALMOUT EQUALS 11
 0005   CHAN12   EQUALS 12
 0006   CHAN13   EQUALS 13
 0007   CHAN14   EQUALS 14
 0008   MNKEYIN  EQUALS 15
 0009   NAVKEYIN EQUALS 16
 0010   CHAN33   EQUALS 33
 0011   DNTM1    EQUALS 34
 0012   DNTM2    EQUALS 35
R0013   END OF CHANNEL ASSIGNMENTS
L      2INTERRUPT LEAD INS
 0001  2         SETLOC 4000
 0002            INHINT                 GO
 0003            CAF    GOBB
 0004            XCH    BBANK
 0005  2         TCF    GOPROG
 0006            DXCH   ARUPT           HERE ON A T6 RUPT
 0007            EXTEND
 0008            QXCH   QRUPT
 0009  2         TCF    DOT6RUPT        DOT6RUPT IS IN FIX-FIXED.(INTR-BANK COM)
 0010            DXCH   ARUPT           T5RUPT
 0011            EXTEND
 0012            DCA    T5LOC           T5LOC EQUALS T5ADR
 0013  2         DTCB
 0014            DXCH   ARUPT           T3RUPT
 0015            CAF    T3RPTBB
 0016            XCH    BBANK
 0017  2         TCF    T3RUPT
 0018            DXCH   ARUPT           T4RUPT
 0019            CAF    ZERO
 0020            TCF    T4RUPT
 0021            EBANK= M11
 0022  2T4RPTBB  BBCON  T4RUPTA
 0023            DXCH   ARUPT           KEYRUPT1
 0024            CAF    KEYRPTBB
 0025            XCH    BBANK
 0026  2         TCF    KEYRUPT1
 0027            DXCH   ARUPT           KEYRUPT2
 0028            CAF    MKRUPTBB
 0029            XCH    BBANK
 0030  2         TCF    MARKRUPT
 0031            DXCH   ARUPT           UPRUPT
 0032            CAF    UPRPTBB
 0033            XCH    BBANK
 0034  2         TCF    UPRUPT
 0035            DXCH   ARUPT           DOWNRUPT
 0036            CAF    DWNRPTBB
 0037            XCH    BBANK
 0038  2         TCF    DODOWNTM
 0039            DXCH   ARUPT           RADAR RUPT
 0040            CAF    RDRPTBB
 0041            XCH    BBANK
 0042  2         TCF    RADAREAD
R00421  TRAPS 31B AND 32 SHOULD NEVER BE SET. THEREFORE-
R00422  RUPT 10 WILL ALWAYS REFER TO THE HAND CONTROLLER LPD OR MINIMUM IMPULSE
R00423 2USE. SEE GEORGE CHERRY FOR RATIONALE REGARDING THE AFORESAID.
 0043            DXCH   ARUPT           RUPT 10 USED FOR RHC MINIMP MODE ONLY.
 0044            CAF    TWO
 0045            TS     DELAYCTR
 0046  2         TCF    NOQRSM
 0047            EBANK= LST1            RESTART USES E0, E3
 0048  2GOBB     BBCON  GOPROG
 0049            EBANK= TIME1
 0050  2T6RPTBB  BBCON  RESUME          ***FIX LATER***
 0051            EBANK= LST1
 0052  2T3RPTBB  BBCON  T3RUPT
 0053            EBANK= KEYTEMP1
 0054  2KEYRPTBB BBCON  KEYRUPT1
 0055            EBANK= AOTAZ
 0056  2MKRUPTBB BBCON  MARKRUPT
 0057  2UPRPTBB  =      KEYRPTBB
 0058            EBANK= DNTMBUFF
 0059  2DWNRPTBB BBCON  DODOWNTM
 0060            EBANK= RADMODES
 0061  2RDRPTBB  BBCON  RADAREAD
 0062   ENDINTFF EQUALS
L      2INTER-BANK COMMUNICATION
R0001            THE FOLLOWING ROUTINE CAN BE USED TO CALL A SUBROUTINE IN ANOTH
 0002  9ER BANK. IN THE BANKCALL VERSION, THE
R0003  2CADR OF THE SUBROUTINE IMMEDIATELY FOLLOWS THE  TC BANKCALL  INSTRUCTION
 0004  9, WITH C(A) AND C(L) PRESERVED.
 0005  2         SETLOC ENDINTFF
 0006   BANKCALL DXCH   BUF2            SAVE INCOMING A,L.
 0007            INDEX  Q               PICK UP CADR.
 0008            CA     0
 0009  2         INCR   Q               SO WE RETURN TO THE LOC. AFTER THE CADR.
R0010  2         SWCALL IS IDENTICAL TO BANKCALL, EXCEPT THAT THE CADR ARRIVES I
 0011  9N A.
 0012   SWCALL   TS     L
 0013            LXCH   FBANK           SWITCH BANKS, SAVING RETURN.
 0014            MASK   LOW10           GET SUB-ADDRESS OF CADR.
 0015            XCH    Q               A,L NOW CONTAINS DP RETURN.
 0016            DXCH   BUF2            RESTORING INPUTS IF THIS IS A BANKCALL.
 0017            INDEX  Q
 0018  2         TC     10000           SETTING Q TO SWRETURN.
 0019   SWRETURN XCH    BUF2 +1         COMES HERE TO RETURN TO CALLER. C(A,L)
 0020            XCH    FBANK           ARE PRESERVED FOR RETURN.
 0021            XCH    BUF2 +1
 0022  4         TC     BUF2
R0023            THE FOLLOWING ROUTINE CAN BE USED AS A UNILATERAL JUMP WITH C(A
 0024  9,L) PRESERVED AND THE CADR IMMEDIATELY
R0025  2FOLLOWING THE TC POSTJUMP INSTRUCTION.
 0026   POSTJUMP XCH    Q               SAVE INCOMING C(A).
 0027            INDEX  A               GET CADR.
 0028  2         CA     0
R0029  2         BANKJUMP IS THE SAME AS POSTJUMP, EXCEPT THAT THE CADR ARRIVES
 0030  9IN A.
 0031   BANKJUMP TS     FBANK
 0032            MASK   LOW10
 0033            XCH    Q               RESTORING INPUT C(A) IF THIS WAS A
 0034            INDEX  Q               POSTJUMP.
 0035            TCF    10000
P0036  2         THE FOLLOWING ROUTINE GETS THE RETURN CADR SAVED BY SWCALL OR B
 0037  9ANKCALL AND LEAVES IT IN A.
 0038   MAKECADR CAF    LOW10
 0039            MASK   BUF2
 0040            AD     BUF2 +1
 0041  4         TC     Q
R0042            THE FOLLOWING ROUTINE OBTAINS THE TWO WORDS BEGINNING AT THE AD
 0043  9DRESS ARRIVING IN A, AND LEAVES THEM IN
R0044  2A,L.
 0045   DATACALL TS     L
 0046            LXCH   FBANK
 0047            LXCH   MPTEMP          SAVE FORMER BANK.
 0048            MASK   LOW10
 0049            EXTEND
 0050            INDEX  A
 0051  2         DCA    10000
 0052            XCH    MPTEMP
 0053            TS     FBANK           RESTORE FBANK.
 0054            CA     MPTEMP
 0055  2         TC     Q
P0056            THE FOLLOWING SUBROUTINES PROVIDE TO THE BASIC PROGRAMMER ENTRY
 0057  9 INTO AND RETURN FROM ANY INTERPRETIVE
R0058  2CODING WHICH DOES NOT USE THE ENTERING CONTENTS OF Q AND WHICH RETURNS V
 0059  9IA DANZIG. C(A) AND C(L) ARE SAVED.
R0060   USER'S RESPONSIBILITY TO FILL IN ADVANCE THE APPROPRIATE OPERAND AND ADD
 0061  9RESS REGISTERS USED BY THE
R0062   INTERPRETIVE CODING SUCH AS MPAC, BUF, ADDRWD, ETC.; AND TO CONFIRM THAT
 0063  9 THE INTERPRETIVE CODING MEETS THE
R0064  2ABOVE RESTRICTIONS WITH RESPECT TO Q AND DANZIG.
R0065  2USEPRET AND USPRCADR MUST NOT BE USED IN INTERRUPT.
R0066   1. USEPRET ACCESSES INTERPRETIVE CODING WHICH CAN BE ENTERED WITHOUT CHA
 0067  9NGING FBANK.
R0068  2   THE CALLING SEQUENCE IS AS FOLLOWS:
A0069   L        TC     USEPRET
A0070   L+1      TC,TCF INTPRETX        TC,TCF MEANS TC OR TCF
A0071                                   INTPRETX IS THE INTERPRETIVE CODING
A0072  2                                RETURN IS TO L+2
R0073  22. USPRCADR ACCESSES INTERPRETIVE CODING IN OTHER THAN THE USER'S FBANK.
 0074  9 THE CALLING SEQUENCE IS AS FOLLOWS:
A0075   L        TC     USPRCADR
A0076   L+1      CADR   INTPRETX        INTPRETX IS THE INTERPRETIVE CODING
A0077  2                                RETURN IS TO L+2
 0078   USEPRET  XCH    Q               FETCH Q, SAVING A
 0079            TS     LOC             L+1 TO LOC
 0080            CA     FBANK
 0081            TS     BANKSET         USERS BANK TO BANKSET
 0082            CA     BIT8
 0083            TS     EDOP            EXIT INSTRUCTION TO EDOP
 0084            CA     Q               RETRIEVE ORIGINAL A
 0085  2         TC     LOC
 0086   USPRCADR TS     LOC             SAVE A
 0087            CA     BIT8
 0088            TS     EDOP            EXIT INSTRUCTION TO EDOP
 0089            CA     FBANK
 0090            TS     BANKSET         USERS BANK TO BANKSET
 0091            INDEX  Q
 0092            CA     0
 0093            TS     FBANK           INTERPRETIVE BANK TO FBANK
 0094            MASK   LOW10           YIELDS INTERPRETIVE RELATIVE ADDRESS
 0095            XCH    Q               INTERPRETIVE ADDRESS TO Q, FETCHING L+1
 0096            XCH    LOC             L+1 TO LOC, RETRIEVING ORIGINAL A
 0097            INDEX  Q
 0098            TCF    10000
P0099  2         THE FOLLOWING ROUTINES ARE IDENTICAL TO BANKCALL AND SWCALL EXC
 0100  9EPT THAT THEY ARE USED IN INTERRUPT.
 0101   IBNKCALL DXCH   RUPTREG3        USES RUPTREG3,4 FOR DP RETURN ADDRESS.
 0102            INDEX  Q
 0103            CAF    0
 0104  2         INCR   Q
 0105   ISWCALL  TS     L
 0106            LXCH   FBANK
 0107            MASK   LOW10
 0108            XCH    Q
 0109            DXCH   RUPTREG3
 0110            INDEX  Q
 0111  2         TC     10000
 0112   ISWRETRN XCH    RUPTREG4
 0113            XCH    FBANK
 0114            XCH    RUPTREG4
 0115            TC     RUPTREG3
P0116  4T6-RUPT PROGRAMS.
R0117  2ENTER HERE AFTER A T6-RUPT.DETERMINE IF IT IS A GENUINE RUPT.
 0118   DOT6RUPT TC     T6JOBCHK
 0119  2         TCF    RESUME
R0120   T6JOBCHK DETERMINES IF T6 = -0 ( A T6 RUPT HAS OCCURRED ) OR IF T6
R0121      EQUALS +0 ( T6 NOT COUNTING DOWN ) OR =SOME POS.OR NEG. NUMBER ( T6
R0122  2   BEING DECREMENTED AND NO RUPT IS NEEDED ).
 0123   T6JOBCHK CCS    TIME6
 0124            TC     Q
 0125            TC     Q
 0126            TC     Q
R0127   T6JOB EXECUTES A JET STATE CHANGE AND SETS UP ANY ADDITIONAL T6 RUPTS
R0128  2   WHICH MIGHT BE NECESSARY.
 0129   T6JOB    CA     ZERO
 0130            XCH    T6NEXT +1
 0131            XCH    T6NEXT
 0132            TS     TIME6
 0133            EXTEND
 0134            BZF    T6ZERO
 0135            CA     BIT15
 0136            EXTEND
 0137            WOR    13
 0138            CA     ZERO
 0139            XCH    T6NEXTJT +2
 0140            XCH    T6NEXTJT +1
 0141            XCH    T6NEXTJT
 0142   WRITEJTS EXTEND
 0143            BZMF   WRITEQR
 0144            EXTEND
 0145            WRITE  6
 0146            TC     Q
 0147   WRITEQR  EXTEND
 0148            WRITE  5
 0149            TC     Q
 0150   T6ZERO   CA     T6NEXTJT
 0151            TCF    WRITEJTS
 0152   ENDIBNKF EQUALS
L      2LIST-PROCESSING INTERPRETER
R0001  2SECTION 1  DISPATCHER
R0002            ENTRY TO THE INTERPRETER. INTPRET SETS LOC TO THE FIRST  INSTRU
 0003  9CTION, BANKSET TO THE FBANK OF THE
R0004   OBJECT INTERPRETIVE PROGRAM, AND INTBIT15 TO THE BIT15 CONTENTS OF FBANK
 0005  9. INTERPRETIVE PROGRAMS MAY BE IN
R0006   VIRTUALLY ALL BANKS PRESENT UNDER ANY SUPER-BANK SETTING, WITH THE RESTR
 0007  9ICTION THAT PROGRAMS IN HIGH BANKS
R0008   (BIT15 OF FBANK = 1) DO NOT REFER TO LOWBANKS, AND VICE-VERSA. THE INTER
 0009  9PRETER DOES NOT SWITCH SUPER-BANK,
R0010  4NOR DOES IT SWITCH EBANKS. MOST EBANK SWITCHING IS DONE BY THE EXECUTIVE
 0011  9 PROGRAM.
 0012  2         SETLOC 6000
 0013   INTPRET  EXTEND                 SET LOC TO THE WORD FOLLOWING THE TC.
 0014  2         QXCH   LOC
 0015    +2      CA     FBANK           INTERPRETIVE BRANCHES FINISH HERE.
 0016            TS     BANKSET
 0017            MASK   BIT15           GET 15TH BIT FOR INDEXABLE ADDRESSES.
 0018            TS     INTBIT15
 0019            AD     LOW10           THIS VERSION IS USED IN PROCESSING
 0020  2         TS     INTB15+         INDEXABLE FIXED-BANK ADDRESSES.
 0021  4         TCF    NEWOPS          PICK UP OP CODE PAIR AND BEGIN.
 0022   INTRSM   LXCH   BBANK           RESUME SUSPENDED INTERPRETIVE JOB
 0023            TCF    INTPRET +3      (ACTUALLY PART OF THE EXECUTIVE).
P0024  2         AT THE END OF MOST INSTRUCTIONS, CONTROL IS GIVEN TO DANZIG TO
 0025  9DISPATCH THE NEXT OPERATION.
 0026  2NEWMODE  TS     MODE            PROLOGUE FOR MODE-CHANGING INSTRUCTIONS.
 0027   DANZIG   CA     BANKSET         SET FBANK BEFORE TESTING NEWJOB SO THAT
 0028  2         TS     FBANK           BBANK MAY BE SAVED DIRECTLY BY CHANJOB.
 0029   NOIBNKSW CCS    EDOP            SEE IF AN ORDER CODE IS LEFT OVER FROM
 0030            TCF    OPJUMP          THE LAST PAIR RETRIEVED. IF SO, EXECUTE.
A0031  2                                EDOP IS SET TO ZERO ON ITS RE-EDITING.
 0032            CCS    NEWJOB          SEE IF A JOB OF HIGHER PRIORITY IS
 0033  2         TCF    CHANG2          PRESENT, AND IF SO, CHANGE JOBS.
 0034            INCR   LOC             ADVANCE THE LOCATION COUNTER.
 0035   NEWOPS   INDEX  LOC             ENTRY TO BEGIN BY PICKING OP CODE PAIR.
 0036            CA     0               MAY BE AN OPCODE PAIR OR A STORE CODE.
 0037            CCS    A               TEST SIGN AND GET DABS(A).
 0038  2         TCF    DOSTORE         PROCESS STORE CODE.
 0039  2LOW7     OCT    177
 0040            TS     EDOP            OP CODE PAIR. LEAVE THE OTHER IN EDOP
 0041  2         MASK   LOW7            WHERE  CCS EDOP  WILL HONOR IT NEXT.
 0042   OPJUMP   TS     CYR             LOWWD ENTERS HERE IF A RIGHT-HAND OP
 0043            CCS    CYR             CODE IS TO BE PROCESSED. TEST PREFICES.
 0044  2         TCF    OPJUMP2         TEST SECOND PREFIX BIT.
 0045            TCF    EXIT            +0 OP CODE IS EXIT.
P0046  2         PROCESS ADDRESSES WHICH MAY BE DIRECT, INDEXED, OR REFERENCE TH
 0047  9E PUSHDOWN LIST.
 0048   ADDRESS  MASK   BIT1            SEE IF ADDRESS IS INDEXED. CYR CONTAINED
 0049            CCS    A               400XX, SO BIT 1 IS NOW AS IT WAS IN CYR.
 0050  2         TCF    INDEX           FORM INDEXED ADDRESS.
 0051   DIRADRES INDEX  LOC             LOOK AHEAD TO NEXT WORD TO SEE IF
 0052   OCT40001 CS     1               ADDRESS IS GIVEN.
 0053            CCS    A
 0054  2         TCF    PUSHUP          IF NOT.
 0055  2NEG4     DEC    -4
 0056            INCR   LOC             IF SO, TO SHOW WE PICKED UP A WORD.
 0057            TS     ADDRWD
P0058            FINAL DIGESTION OF DIRECT ADDRESSES OF OP CODES WITH 01 PREFIX
 0059  9IS DONE HERE. IN EACH CASE, THE
R0060   REQUIRED 12 BIT SUB-ADDRESS IS LEFT IN ADDRWD, WITH ANY REQUIRED BANK SW
 0061  9ITCHING DONE (F ONLY). ADDRESSES LESS
R0062  4THAN 45D ARE TAKEN TO BE RELATIVE TO THE WORK AREA. THE OP CODE IS NOW I
 0063  9N BITS 1-5 OF CYR WITH BIT 14 = 1.
 0064            AD     -ENDVAC         SEE IF ADDRESS RELATIVE TO WORK AREA.
 0065            CCS    A
 0066            AD     -ENDERAS        IF NOT, SEE IF IN GENERAL ERASABLE.
 0067  2         TCF    IERASTST
 0068   NETZERO  CA     FIXLOC          IF SO, LEAVE THE MODIFIED ADDRESS IN
 0069            ADS    ADDRWD          ADDRWD AND DISPATCH.
 0070    +2      INDEX  CYR             THIS INDEX MAKES THE NEXT INSTRUCTION
 0071  2         7      INDJUMP -1      TCF INDJUMP + OP, EDITING CYR.
 0072   IERASTST EXTEND
 0073  2         BZMF   NETZERO +2      GENERAL ERASABLE - DISPATCH IMMEDIATELY.
 0074   FIXEDADR AD     INTB15+         FIXED BANK ADDRESS. RESTORE AND ADD B15.
 0075    +1      TS     FBANK           SWITCH BANKS AND LEAVE SUB-ADDRESS IN
 0076            MASK   LOW10           ADDRWD FOR OPERAND RETRIEVAL.
 0077            AD     2K
 0078            TS     ADDRWD
 0079            INDEX  CYR
 0080            7      INDJUMP -1
P0081            THE FOLLOWING ROUTINE PROCESSES INTERPRETIVE INDEXED ADDRESSES.
 0082  9 AN INTERPRETER INDEX REGISTER MAY
R0083   CONTAIN THE ADDRESS OF ANY ERASABLE REGISTER (0-42 BEING RELATIVE TO THE
 0084  9 VAC AREA) OR ANY INTERPRETIVE PROGRAM
R0085  2BANK, OR ANY INTEGER IN THAT RANGE.
 0086   DODLOAD* CAF    DLOAD*          STODL* COMES HERE TO PROCESS LOAD ADR.
 0087  2         TS     CYR             (STOVL* ENTERS HERE).
 0088   INDEX    CA     FIXLOC          SET UP INDEX LOCATION.
 0089            TS     INDEXLOC
 0090            INCR   LOC             (ADDRESS ALWAYS GIVEN).
 0091            INDEX  LOC
 0092            CS     0
 0093            CCS    A               INDEX 2 IF ADDRESS STORED COMPLEMENTED.
 0094            INCR   INDEXLOC
 0095  2         NOOP
 0096            TS     ADDRWD          14 BIT ADDRESS TO ADDRWD.
 0097            MASK   BANKMASK        IF ADDRESS GREATER THAN 1K, ADD INTBIT15
 0098            EXTEND
 0099            BZF    INDEX2
 0100            CA     INTBIT15
 0101  2         ADS    ADDRWD
 0102   INDEX2   INDEX  INDEXLOC
 0103            CS     X1
 0104  2         ADS    ADDRWD          DO AUGMENT, IGNORING AND CORRECTING OVF.
 0105            MASK   HIGH9           SEE IF ADDRESS IS IN WORK AREA.
 0106            EXTEND
 0107            BZF    INDWORK
 0108            MASK   BANKMASK        SEE IF IN FIXED BANK.
 0109            EXTEND
 0110  2         BZF    INDERASE
 0111            CA     ADDRWD          IN FIXED - SWITCH BANKS AND CREATE
 0112            TS     FBANK           SUB-ADDRESS.
 0113            MASK   LOW10
 0114            AD     2K
 0115            TS     ADDRWD
 0116            INDEX  CYR
 0117  2         3      INDJUMP -1
 0118   INDWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO WORK AREA.
 0119  2         ADS    ADDRWD
 0120   INDERASE INDEX  CYR
 0121            3      INDJUMP -1
P0122            PUSH-UP ROUTINES. WHEN NO OPERAND ADDRESS IS GIVEN, THE APPROPR
 0123  9IATE OPERAND IS TAKEN FROM THE PUSH-DOWN
R0124   LIST. IN MOST CASES THE MODE OF THE RESULT (VECTOR OR SCALAR) OF THE LAS
 0125  9T ARITHMETIC OPERATION PERFORMED
R0126   IS THE SAME AS THE TYPE OF OPERAND DESIRED (ALL ADD/SUBTRACT ETC.). EXCE
 0127  9PTIONS TO THIS GENERAL RULE ARE LISTED
R0128  2BELOW (NOTE THAT IN EVERY CASE THE MODE REGISTER IS LEFT INTACT):
R0129            1.  VXSC AND V/SC WANT THE OPPOSITE TYPE OF OPERAND, E.G., IF T
 0130  9HE LAST OPERATION YIELDED A VECTOR
R0131  2RESULT, VXSC WANTS A SCALAR.
R0132            2.  THE LOAD CODES SHOULD LOAD THE ACCUMULATOR INDEPENDENT OF T
 0133  9HE RESULT OF THE LAST OPERATION. THIS
R0134  2INCLUDES VLOAD, DLOAD, TLOAD, PDDL, AND PDVL (NO PUSHUP WITH SLOAD).
R0135            3.  SOME ARITHMETIC OPERATIONS REQUIRE A STANDARD TYPE OF OPERA
 0136  9ND REGARDLESS OF THE PREVIOUS OPERATION.
R0137  2THIS INCLUDES SIGN WANTING DP AND TAD REQUIRING TP.
 0138   PUSHUP   CAF    OCT23           IF THE LOW 5 BITS OF CYR ARE LESS THAN
 0139            MASK   CYR             20, THIS OP REQUIRES SPECIAL ATTENTION.
 0140            AD     -OCT10          (NO -0).
 0141            CCS    A
 0142  2         TCF    REGUP           FOR ALL CODES GREATER THAN OCT 7.
 0143  2-OCT10   OCT    -10
 0144            AD     NEG4            WE NOW HAVE 7 - OP CODE(MOD4). SEE IF
 0145            CCS    A               THE OP CODE (MOD4) IS THREE (REVERSE).
 0146            INDEX  A               NO - THE MODE IS DEFINITE. PICK UP THE
 0147            CS     NO.WDS
 0148  2         TCF    REGUP +2
 0149            INDEX  MODE            FOR VXSC AND V/SC WE WANT THE REQUIRED
 0150            CS     REVCNT          PUSHLOC DECREMENT WITHOUT CHANGING THE
 0151  2         TCF    REGUP +2        MODE AT THIS TIME.
 0152   REGUP    INDEX  MODE            MOST ALL OP CODES PUSHUP HERE.
 0153            CS     NO.WDS
 0154    +2      ADS    PUSHLOC
 0155            TS     ADDRWD
 0156            INDEX  CYR
 0157  2         7      INDJUMP -1      (THE INDEX MAKES THIS A TCF.)
 0158            OCT    2               REVERSE PUSHUP DECREMENT. VECTOR TAKES 2
 0159   REVCNT   OCT    6               WORDS, SCALAR TAKES 6.
 0160            OCT    6
 0161   NO.WDS   OCT    2               CONVENTIONAL DECREMENT IS 6 WORDS VECTOR
 0162            OCT    3               2 IN DP, AND 3 IN TP.
 0163            OCT    6
P0164  2         TEST THE SECOND PREFIX BIT TO SEE IF THIS IS A MISCELLANEOUS OR
 0165  9 A UNARY/SHORT SHIFT OPERATION.
 0166   OPJUMP2  CCS    CYR             TEST SECOND PREFIX BIT.
 0167  2         TCF    OPJUMP3         TEST THIRD BIT TO SEE IF UNARY OR SHIFT.
 0168  2-ENDVAC  DEC    -45
R0169            THE FOLLOWING ROUTINE PROCESSES ADDRESSES OF SUFFIX CLASS 10. T
 0170  9HEY ARE BASICALLY WORK AREA ADDRESSES
R0171   IN THE RANGE 0 - 52, ERASABLE ADRES CONSTANTS FROM 100 - 1777, AND FCADR
 0172  9S ABOVE THAT. ALL 15 BITS ARE AVAILABLE
R0173  2IN CONTRAST TO SUFFIX 1, IN WHICH ONLY THE LOW ORDER 14 ARE AVAILABLE.
 0174   15BITADR INCR   LOC             (ENTRY HERE FROM STCALL).
 0175            INDEX  LOC             PICK UP ADDRESS WORD.
 0176            CA     0
 0177            TS     POLISH          THE ABSOLUTE ADDRESS WILL BE LEFT IN
 0178            TS     ADDRWD          POLISH WITH AN ERASABLE SUBADDRESS IN
A0179                                   ADDRWD.
 0180            MASK   HIGH9           SEE IF RELATIVE TO THE WORK AREA.
 0181            CCS    A
 0182            TCF    +2
 0183  2         TCF    RELWORK         ONLY IF ZERO.
 0184            CAF    LOW7+2K         THESE INSTRUCTIONS ARE IN BANK 1.
 0185            TS     FBANK
 0186            MASK   CYR
 0187            INDEX  A
 0188  2         TCF    MISCJUMP
 0189   RELWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO FIXLOC, LEAVING
 0190            ADS    ADDRWD          POLISH ABSOLUTE IN CASE THIS WAS AN
 0191            CAF    LOW7+2K         AXT, ETC.
 0192            TS     FBANK
 0193            MASK   CYR
 0194            INDEX  A
 0195            TCF    MISCJUMP
P0196  2         COMPLETE THE DISPATCHING OF UNARY AND SHORT SHIFT OPERATIONS.
 0197   OPJUMP3  TS     FBANK           CALL IN BANK 0 (BITS 11-15 OF A ARE 0.)
 0198            CCS    CYR             TEST THIRD PREFIX BIT.
 0199            INDEX  A               THE DECREMENTED UNARY CODE IS IN BITS
 0200  2         TCF    UNAJUMP         1-4 OF A (ZERO, EXIT, HAS BEEN DETECTED)
 0201            CCS    MODE            ITS A SHORT SHIFT CODE. SEE IF PRESENT
 0202            TCF    SHORTT          SCALAR OR VECTOR.
 0203            TCF    SHORTT
 0204  4         TCF    SHORTV          CALLS THE APPROPRIATE ROUTINE.
 0205   OCT23    OCT    23              MASK USED BY PUSH-UP ROUTINE.
 0206   LOW7+2K  OCT    2177            OP CODE MASK + BANK 1 FBANK SETTING.
 0207   HIGH9    OCT    77700
 0208   BANKMASK OCT    76000           FBANK MASK.
 0209   FBANKMSK EQUALS BANKMASK
 0210   B11T14   OCT    36000           USED IN PROCESSING STORE CODES.
 0211   -ENDERAS DEC    -977
P0212  2         THE FOLLOWING IS THE JUMP TABLE FOR OP CODES WHICH MAY HAVE IND
 0213  9EXABLE ADDRESSES OR MAY PUSH UP.
 0214   INDJUMP  TCF    VLOAD           00 - LOAD MPAC WITH A VECTOR.
 0215            TCF    TAD             01 - TRIPLE PRECISION ADD TO MPAC.
 0216            TCF    SIGN            02 - COMPLEMENT MPAC (V OR SC) IF X NEG.
 0217            TCF    VXSC            03 - VECTOR TIMES SCALAR.
 0218            TCF    CGOTO           04 - COMPUTED GO TO.
 0219            TCF    TLOAD           05 - LOAD MPAC WITH TRIPLE PRECISION.
 0220            TCF    DLOAD           06 - LOAD MPAC WITH A DP SCALAR.
 0221  2         TCF    V/SC            07 - VECTOR DIVIDED BY SCALAR.
 0222            TCF    SLOAD           10 - LOAD MPAC IN SINGLE PRECISION.
 0223            TCF    SSP             11 - SET SINGLE PRECISION INTO X.
 0224            TCF    PDDL            12 - PUSH DOWN MPAC AND RE-LOAD IN DP.
 0225            TCF    MXV             13 - MATRIX POST-MULTIPLIED BY VECTOR.
 0226            TCF    PDVL            14 - PUSH DOWN AND VECTOR LOAD.
 0227            TCF    CCALL           15 - COMPUTED CALL.
 0228            TCF    VXM             16 - MATRIX PRE-MULTIPLIED BY VECTOR.
 0229  2         TCF    TSLC            17 - NORMALIZE MPAC (SCALAR ONLY).
 0230            TCF    DMPR            20 - DP MULTIPLY AND ROUND.
 0231            TCF    DDV             21 - DP DIVIDE BY.
 0232            TCF    BDDV            22 - DP DIVIDE INTO.
 0233            TCF    GSHIFT          23 - GENERAL SHIFT INSTRUCTION.
 0234            TCF    VAD             24 - VECTOR ADD.
 0235            TCF    VSU             25 - VECTOR SUBTRACT.
 0236            TCF    BVSU            26 - VECTOR SUBTRACT FROM.
 0237  2         TCF    DOT             27 - VECTOR DOT PRODUCT.
 0238            TCF    VXV             30 - VECTOR CROSS PRODUCT.
 0239            TCF    VPROJ           31 - VECTOR PROJECTION.
 0240            TCF    DSU             32 - DP SUBTRACT.
 0241            TCF    BDSU            33 - DP SUBTRACT FROM.
 0242            TCF    DAD             34 - DP ADD.
 0243            TCF                    35 - AVAILABLE
 0244            TCF    DMP1            36 - DP MULTIPLY.
 0245  2         TCF    SETPD           37 - SET PUSH DOWN POINTER (DIRECT ONLY)
R0246   CODES 10 AND 14 MUST NOT PUSH UP. CODE 04 MAY BE USED FOR VECTOR DECLARE
 0247  9 BEFORE PUSHUP IF DESIRED.
P0248  2         THE FOLLOWING JUMP TABLE APPLIES TO INDEX, BRANCH, AND MISCELLA
 0249  9NEOUS INSTRUCTIONS.
 0250   MISCJUMP TCF    AXT             00 - ADDRESS TO INDEX TRUE.
 0251            TCF    AXC             01 - ADDRESS TO INDEX COMPLEMENTED.
 0252            TCF    LXA             02 - LOAD INDEX FROM ERASABLE.
 0253            TCF    LXC             03 - LOAD INDEX FROM COMPLEMENT OF ERAS.
 0254            TCF    SXA             04 - STORE INDEX IN ERASABLE.
 0255            TCF    XCHX            05 - EXCHANGE INDEX WITH ERASABLE.
 0256            TCF    INCR            06 - INCREMENT INDEX REGISTER.
 0257  2         TCF    TIX             07 - TRANSFER ON INDEX.
 0258            TCF    XAD             10 - INDEX REGISTER ADD FROM ERASABLE.
 0259            TCF    XSU             11 - INDEX SUBTRACT FROM ERASABLE.
 0260            TCF    BZE/GOTO        12 - BRANCH ZERO AND GOTO.
 0261            TCF    BPL/BMN         13 - BRANCH PLUS AND BRANCH MINUS.
 0262            TCF    CALL/ITA        14 - CALL AND STORE QPRET.
 0263            TCF    RTB/BHIZ        15 - RETURN TO BASIC AND BRANCH HI ZERO.
 0264            TCF    SW/             16 - SWITCH INSTRUCTIONS AND AVAILABLE.
 0265            TCF    BOV(B)          17 - BRANCH ON OVERFLOW TO BASIC OR INT.
P0266  2         THE FOLLOWING JUMP TABLE APPIES TO UNARY INSTRUCTIONS.
A0267                                   00 - EXIT - DETECTED EARLIER.
 0268   UNAJUMP  TCF    SQRT            01 - SQUARE ROOT.
 0269            TCF    SINE            02 - SIN.
 0270            TCF    COSINE          03 - COS.
 0271            TCF    ARCSIN          04 - ARC SIN.
 0272            TCF    ARCCOS          05 - ARC COS.
 0273            TCF    DSQ             06 - DP SQUARE.
 0274  2         TCF    ROUND           07 - ROUND TO DP.
 0275            TCF    COMP            10 - COMPLEMENT VECTOR OR SCALAR.
 0276            TCF    VDEF            11 - VECTOR DEFINE.
 0277            TCF    UNIT            12 - UNIT VECTOR.
 0278            TCF    ABVALABS        13 - LENGTH OF VECTOR OR MAG OF SCALAR.
 0279            TCF    VSQ             14 - SQUARE OF LENGTH OF VECTOR.
 0280            TCF    STADR           15 - PUSH UP ON STORE CODE.
 0281            TCF    RVQ             16 - RETURN VIA QPRET.
 0282            TCF    PUSH            17 - PUSH MPAC DOWN.
P0283  2SECTION 2  LOAD AND STORE PACKAGE.
R0284            A SET OF SIXTEEN STORE CODES ARE PROVIDED AS THE PRIMARY METHOD
 0285  9 OF STORING THE MULTI-PURPOSE
R0286   ACCUMULATOR (MPAC). IF IN THE DANZIG SECTION LOC REFERS TO AN ALGEBRAICA
 0287  9LLY POSITIVE WORD, IT IS TAKEN AS A
R0288   STORE CODE WITH A CORRESPONDING ERASABLE ADDRESS. MOST OF THESE CODES AR
 0289  9E TWO ADDRESS, SPECIFYING THAT THE WORD
R0290  2FOLLOWING THE STORE CODE IS TO BE USED AS AN ADDRESS FROM WHICH TO RE-LO
 0291  9AD MPAC. FOUR OPTIONS ARE AVAILABLE:
R0292            1. STORE               STORE MPAC. THE E ADDRESS MAY BE INDEXED
 0293  9.
R0294            2. STODL               STORE MPAC AND RE-LOAD IT IN DP WITH THE
 0295  9 NEXT ADDRESS (EITHER MAY BE INDEXED).
R0296            3. STOVL               STORE MPAC AND RE-LOAD A VECTOR (AS ABOV
 0297  9E).
R0298  2         4. STCALL              STORE AND DO A CALL (BOTH ADDRESSES MUST
 0299  9 BE DIRECT HERE).
R0300  4         STODL AND STOVL WILL TAKE FROM THE PUSH-DOWN LIST IF NO LOAD AD
 0301  9DRESS IS GIVEN.
 0302   STADR    CA     BANKSET         THE STADR CODE (PUSHUP UP ON STORE
 0303            TS     FBANK           ADDRESS) ENTERS HERE.
 0304            INCR   LOC
 0305            INDEX  LOC             THE STORE CODE WAS STORE COMPLEMENTED TO
 0306            CS     0               MAKE IT LOOK LIKE AN OPCODE PAIR.
 0307            AD     NEGONE          (YUL CANT REMOVE 1 BECAUSE OF EARLY CCS)
 0308   DOSTORE  TS     ADDRWD
 0309            MASK   LOW10           ENTRY FROM DISPATCHER. SAVE THE ERASABLE
 0310            XCH    ADDRWD          ADDRESS AND JUMP ON THE STORE CODE NO.
 0311            MASK   B11T14
 0312            EXTEND
 0313            MP     BIT6            EACH TRANSFER VECTOR ENTRY IS TWO WORDS.
 0314            INDEX  A
 0315            TCF    STORJUMP
P0316            STORE CODE JUMP TABLE. CALLS THE APPROPRIATE STORING ROUTINE AN
 0317  9D EXITS TO DANZIG OR TO ADDRESS WITH
R0318  2A SUPPLIED OPERATION CODE.
 0319   STORJUMP TC     STORE           STORE.
 0320            TCF    NEWOPS -1       PICK UP NEW OP CODE(S).
 0321            TC     STORE,1
 0322            TCF    NEWOPS -1
 0323            TC     STORE,2
 0324  2         TCF    NEWOPS -1
 0325            TC     STORE           STODL.
 0326            TCF    DODLOAD
 0327            TC     STORE,1
 0328            TCF    DODLOAD
 0329            TC     STORE,2
 0330  2         TCF    DODLOAD
 0331            TC     STORE           STODL WITH INDEXED LOAD ADDRESS.
 0332            TCF    DODLOAD*
 0333            TC     STORE,1
 0334            TCF    DODLOAD*
 0335            TC     STORE,2
 0336  2         TCF    DODLOAD*
 0337            TC     STORE           STOVL.
 0338            TCF    DOVLOAD
 0339            TC     STORE,1
 0340            TCF    DOVLOAD
 0341            TC     STORE,2
 0342  2         TCF    DOVLOAD
 0343            TC     STORE           STOVL WITH INDEXED LOAD ADDRESS.
 0344            TCF    DOVLOAD*
 0345            TC     STORE,1
 0346            TCF    DOVLOAD*
 0347            TC     STORE,2
 0348  2         TCF    DOVLOAD*
 0349            TC     STORE           STOTC.
 0350            CAF    CALLCODE
 0351            TS     CYR
 0352            TCF    15BITADR        GET A 15 BIT ADDRESS.
P0353  2         STORE CODE ADDRESS PROCESSOR.
 0354   STORE,1  INDEX  FIXLOC
 0355            CS     X1
 0356  2         TCF    PRESTORE
 0357   STORE,2  INDEX  FIXLOC
 0358            CS     X2
 0359  2PRESTORE ADS    ADDRWD          RESULTANT ADDRESS IS IN ERASABLE.
 0360   STORE    CA     ADDRWD          SEE IF ADDRESS RELATIVE TO WORK AREA.
 0361            AD     -ENDVAC
 0362            CCS    A
 0363  2         TCF    STARTSTO        ADDRESS OK AS IS.
 0364  2LOW10    OCT    1777
 0365            CA     FIXLOC          GIVEN ADDRESS IS RELATIVE TO WORK AREA.
 0366            ADS    ADDRWD
P0367  2         STORING ROUTINES. STORE DP, TP, OR VECTOR AS INDICATED BY MODE.
 0368   STARTSTO EXTEND                 MPAC,+1 MUST BE STORED IN ANY EVENT.
 0369            DCA    MPAC
 0370            INDEX  ADDRWD
 0371  2         DXCH   0
 0372            CCS    MODE
 0373            TCF    TSTORE
 0374  2         TC     Q
 0375   VSTORE   EXTEND
 0376            DCA    MPAC +3
 0377            INDEX  ADDRWD
 0378  2         DXCH   2
 0379            EXTEND
 0380            DCA    MPAC +5
 0381            INDEX  ADDRWD
 0382            DXCH   4
 0383  2         TC     Q
 0384   TSTORE   CA     MPAC +2
 0385            INDEX  ADDRWD
 0386            TS     2
 0387            TC     Q
P0388            ROUTINES TO BEGIN PROCESSING OF THE SECOND ADDRESS ASSOCIATED W
 0389  9ITH ALL STORE-TYPE CODES EXCEPT STORE
R0390  2ITSELF.
 0391   DODLOAD  CAF    DLOADCOD
 0392            TS     CYR
 0393  2         TCF    DIRADRES        GO GET A DIRECT ADDRESS.
 0394   DOVLOAD  CAF    VLOADCOD
 0395            TS     CYR
 0396  2         TCF    DIRADRES
 0397   DOVLOAD* CAF    VLOAD*
 0398            TCF    DODLOAD* +1     PROLOGUE TO INDEX ROUTINE.
P0399  2         THE FOLLOWING LOAD INSTRUCTIONS ARE PROVIDED FOR LOADING THE MU
 0400  9LTI-PURPOSE ACCUMULATOR MPAC.
 0401   DLOAD    EXTEND
 0402            INDEX  ADDRWD
 0403            DCA    0               PICK UP DP ARGUMENT AND LEAVE IT IN
 0404   SLOAD2   DXCH   MPAC            MPAC,+1, SETTING MPAC +2 TO ZERO. THE
 0405            CAF    ZERO            CONTENTS OF THE OTHER FOUR REGISTERS OF
 0406            TS     MPAC +2         MPAC ARE IRRELEVANT.
 0407  2         TCF    NEWMODE         DECLARE DOUBLE PRECISION MODE.
 0408   TLOAD    INDEX  ADDRWD
 0409            CA     2               LOAD A TRIPLE PRECISION ARGUMENT INTO
 0410            TS     MPAC +2         THE FIRST THREE MPAC REGISTERS, WITH THE
 0411            EXTEND                 CONTENTS OF THE OTHER FOUR IRRELEVANT.
 0412            INDEX  ADDRWD
 0413            DCA    0
 0414            DXCH   MPAC
 0415            CAF    ONE
 0416  2         TCF    NEWMODE         DECLARE TRIPLE PRECISION MODE.
 0417   SLOAD    ZL                     LOAD A SINGLE PRECISION NUMBER INTO
 0418            INDEX  ADDRWD          MPAC, SETTING MPAC+1,2 TO ZERO. THE
 0419            CA     0               CONTENTS OF THE REMAINING MPAC REGISTERS
 0420  2         TCF    SLOAD2          ARE IRRELEVANT.
 0421   VLOAD    EXTEND                 LOAD A DOUBLE PRECISION VECTOR INTO
 0422            INDEX  ADDRWD          MPAC,+1, MPAC+3,4, AND MPAC+5,6. THE
 0423            DCA    0               CONTENTS OF MPAC +2 ARE IRRELEVANT.
 0424  2         DXCH   MPAC
 0425   ENDVLOAD EXTEND                 PDVL COMES HERE TO FINISH UP FOR DP, TP.
 0426            INDEX  ADDRWD
 0427            DCA    2
 0428  2         DXCH   MPAC +3
 0429    +4      EXTEND                 TPDVL FINISHES HERE.
 0430            INDEX  ADDRWD
 0431            DCA    4
 0432  2         DXCH   MPAC +5
 0433            CS     ONE             DECLARE VECTOR MODE.
 0434            TCF    NEWMODE
P0435  2         THE FOLLOWING INSTRUCTIONS ARE PROVIDED FOR STORING OPERANDS IN
 0436  9 THE PUSHDOWN LIST:
R0437            1.  PUSH               PUSHDOWN AND NO LOAD.
R0438            2.  PDDL               PUSHDOWN AND DOUBLE PRECISION LOAD.
R0439  2         3.  PDVL               PUSHDOWN AND VECTOR LOAD.
 0440   PDDL     EXTEND
 0441            INDEX  ADDRWD          LOAD MPAC,+1, PUSHING THE FORMER
 0442            DCA    0               CONTENTS DOWN.
 0443            DXCH   MPAC
 0444            INDEX  PUSHLOC
 0445  2         DXCH   0
 0446            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER APPRO-
 0447            CAF    NO.WDS          PRIATELY.
 0448  2         ADS    PUSHLOC
 0449            CCS    MODE
 0450            TCF    ENDTPUSH
 0451  2         TCF    ENDDPUSH
 0452            TS     MODE            NOW DP.
 0453   ENDVPUSH TS     MPAC +2
 0454            DXCH   MPAC +3         PUSH DOWN THE REST OF THE VECTOR HERE.
 0455            INDEX  PUSHLOC
 0456  2         DXCH   0 -4
 0457            DXCH   MPAC +5
 0458            INDEX  PUSHLOC
 0459  2         DXCH   0 -2
 0460  2         TCF    DANZIG
 0461   ENDDPUSH TS     MPAC +2         SET MPAC +2 TO ZERO AND EXIT ON DP.
 0462  2         TCF    DANZIG
 0463   ENDTPUSH TS     MODE
 0464            XCH    MPAC +2         ON TRIPLE, SET MPAC +2 TO ZERO, PUSHING
 0465    +2      INDEX  PUSHLOC         DOWN THE OLD CONTENTS
 0466            TS     0 -1
 0467            TCF    DANZIG
P0468  2         PDVL - PUSHDOWN AND VECTOR LOAD.
 0469   PDVL     EXTEND                 RELOAD MPAC AND PUSH DOWN ITS CONTENTS.
 0470            INDEX  ADDRWD
 0471            DCA    0
 0472            DXCH   MPAC
 0473            INDEX  PUSHLOC
 0474  2         DXCH   0
 0475            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER.
 0476            CAF    NO.WDS
 0477  2         ADS    PUSHLOC
 0478            CCS    MODE            TEST PAST MODE.
 0479            TCF    TPDVL
 0480  2         TCF    ENDVLOAD        JUST LOAD LAST FOUR REGISTERS ON DP.
 0481   VPDVL    EXTEND                 PUSHDOWN AND RE-LOAD LAST TWO COMPONENTS
 0482            INDEX  ADDRWD
 0483            DCA    2
 0484            DXCH   MPAC +3
 0485            INDEX  PUSHLOC
 0486  2         DXCH   0 -4
 0487            EXTEND
 0488            INDEX  ADDRWD
 0489            DCA    4
 0490            DXCH   MPAC +5
 0491            INDEX  PUSHLOC
 0492  2         DXCH   0 -2
 0493  2         TCF    DANZIG
 0494   TPDVL    EXTEND                 ON TP, WE MUST LOAD THE Y COMPONENT
 0495            INDEX  ADDRWD          BEFORE STORING MPAC +2 INCASE THIS IS A
 0496            DCA    2               PUSHUP.
 0497  2         DXCH   MPAC +3
 0498            CA     MPAC +2
 0499            INDEX  PUSHLOC         IN DP.
 0500            TS     0 -1
 0501  2         TCF    ENDVLOAD +4
R0502  2         SSP (STORE SINGLE PRECISION) IS EXECUTED HERE.
 0503   SSP      INCR   LOC             PICK UP THE WORD FOLLOWING THE GIVEN
 0504            INDEX  LOC             ADDRESS AND STORE IT AT X.
 0505            CA     0
 0506   STORE1   INDEX  ADDRWD          SOME INDEX AND MISCELLANEOUS OPS END
 0507            TS     0               HERE.
 0508            TCF    DANZIG
P0509  2SEQUENCE CHANGING AND SUBROUTINE CALLING OPTIONS.
R0510  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR SEQUENCING CHANGING,
 0511  9 BRANCHING, AND CALLING SUBROUTINES:
R0512            1.  GOTO               GO TO.
R0513            2.  CALL               CALL SUBROUTINE SETTING QPRET.
R0514            3.  CGOTO              COMPUTED GO TO.
R0515            4.  CCALL              COMPUTED CALL.
R0516            7.  BPL                BRANCH IF MPAC POSITIVE OR ZERO.
R0517            8.  BZE                BRANCH IF MPAC ZERO.
R0518  2         9.  BMN                BRANCH IF MPAC NEGATIVE NON-ZERO.
 0519   CCALL    INCR   LOC             MAINTAIN LOC FOR QPRET COMPUTATION.
 0520            INDEX  LOC
 0521            CAF    0               GET BASE ADDRESS OF CADR LIST.
 0522            INDEX  ADDRWD
 0523            AD     0               ADD INCREMENT.
 0524            TS     FBANK           SELECT DESIRED CADR.
 0525            MASK   LOW10
 0526            INDEX  A
 0527            CAF    10000
 0528  2 -1      TS     POLISH
 0529   CALL     CS     LOW10           FOR ANY OF THE CALL OPTIONS, MAKE UP THE
 0530            AD     LOC             ADDRESS OF THE NEXT OP-CODE PAIR/STORE
 0531            AD     BANKSET         CODE AND LEAVE IT IN QPRET. NOTE THAT
 0532            INDEX  FIXLOC          LOW10 = 2000 - 1.
 0533  2         TS     QPRET
 0534   GOTO     CA     POLISH          BASIC BRANCHING SEQUENCE.
 0535            TS     FBANK
 0536            MASK   LOW10           MAKE UP 12 BIT SUB-ADDRESS AND FALL INTO
 0537            AD     2K              FALL INTO THE INTPRET ENTRY UNLESS THE
 0538            TS     LOC             GIVEN ADDRESS WAS IN ERASABLE, IN WHICH
 0539            CCS    FBANK           CASE IT IS USED AS THE ADDRESS OF THE
 0540            TCF    INTPRET +2      BRANCH ADDRESS.
 0541            TCF    +2
 0542  8         TCF    INTPRET +2
 0543            CS     LOC             THE GIVEN ADDRESS IS IN ERASABLE - SEE
 0544            AD     EVAC+2K         IF RELATIVE TO THE WORK AREA.
 0545            CCS    A
 0546            CA     FIXLOC          ADD FIXLOC IF SO.
 0547  2         ADS    LOC
 0548            INDEX  LOC
 0549            CA     0 -2000         (ADDRESS HAD BEEN AUGMENTED BY 2000.)
 0550  2         TCF    GOTO +1         ALLOWS ARBITRARY INDIRECTNESS.
 0551   CGOTO    INDEX  LOC             COMPUTED GO TO. PICK UP ADDRESS OF CADR
 0552            CA     1               LIST.
 0553            INDEX  ADDRWD          ADD MODIFIER.
 0554            AD     0
 0555            TS     FBANK           SELECT GOTO ADDRESS.
 0556            MASK   LOW10
 0557            INDEX  A
 0558            CA     10000
 0559  2         TCF    GOTO +1         WITH ADDRESS IN A.
 0560   SWBRANCH CA     BANKSET         SWITCH INSTRUCTIONS WHICH ELECT TO
 0561            TS     FBANK           BRANCH COME HERE TO DO SO.
 0562            INDEX  LOC
 0563            CA     1
 0564  2         TCF    GOTO +1
 0565   EVAC+2K  DEC    1069            =1024+45
P0566  2         TRIPLE PRECISION BRANCHING ROUTINE. IF CALLING TC IS AT L, RETU
 0567  9RN IS AS FOLLOWS:
R0568            L+1  IF MPAC IS GREATER THAN ZERO.
R0569            L+2  IF MPAC IS EQUAL TO +0 OR -0.
R0570  4         L+3  IF MPAC IS LESS THAN ZERO.
 0571   BRANCH   CCS    MPAC
 0572            TC     Q
 0573            TCF    +2              ON ZERO.
 0574  2         TCF    NEG
 0575            CCS    MPAC +1
 0576            TC     Q
 0577            TCF    +2
 0578  2         TCF    NEG
 0579            CCS    MPAC +2
 0580            TC     Q
 0581            TCF    +2
 0582  2         TCF    NEG
 0583            INDEX  Q               IF ALL THREE REGISTERS WERE +-0.
 0584  2         TC     1
 0585   NEG      INDEX  Q               IF FIRST NON-ZERO REGISTER WAS NEGATIVE.
 0586  4         TC     2
 0587   EXIT     INDEX  LOC             LEAVE INTERPRETIVE MODE.
 0588            TCF    1
P0589  2SECTION 3 - ADD/SUBTRACT PACKAGE.
R0590            THE FOLLOWING OPERATIONS ARE PROVIDED FOR ADDING TO AND SUBTRAC
 0591  9TING FROM THE MULTI-PURPOSE ACCUMULATOR
R0592  2MPAC:
R0593            1.  DAD                DOUBLE PRECISION ADD.
R0594            2.  DSU                DOUBLE PRECISION SUBTRACT.
R0595  2         3.  BDSU               DOUBLE PRECISION SUBTRACT FROM.
R0596  2         4.  TAD                TRIPLE PRECISION ADD.
R0597            5.  VAD                VECTOR ADD.
R0598            6.  VSU                VECTOR SUBTRACT.
R0599  2         7.  BVSU               VECTOR SUBTRACT FROM.
R0600  4THE INTERPRETIVE OVERFLOW INDICATOR OVFIND IS SET NON-ZERO IF OVERFLOW O
 0601  9CCURS IN ANY OF THE ABOVE.
 0602   VAD      EXTEND
 0603            INDEX  ADDRWD
 0604            DCA    2
 0605            DAS    MPAC +3
 0606            EXTEND                 CHECK OVERFLOW.
 0607            BZF    +2
 0608  2         TC     OVERFLOW
 0609            EXTEND
 0610            INDEX  ADDRWD
 0611            DCA    4
 0612            DAS    MPAC +5
 0613            EXTEND
 0614            BZF    +2
 0615  2         TC     OVERFLOW
 0616   DAD      EXTEND
 0617            INDEX  ADDRWD
 0618            DCA    0
 0619   ENDVXV   DAS    MPAC            VXV FINISHES HERE.
 0620            EXTEND
 0621            BZF    DANZIG
 0622            TC     OVERFLOW
 0623  8         TCF    DANZIG
 0624   VSU      EXTEND
 0625            INDEX  ADDRWD
 0626            DCS    2
 0627            DAS    MPAC +3
 0628            EXTEND
 0629            BZF    +2
 0630  2         TC     OVERFLOW
 0631            EXTEND
 0632            INDEX  ADDRWD
 0633            DCS    4
 0634            DAS    MPAC +5
 0635            EXTEND
 0636            BZF    +2
 0637  2         TC     OVERFLOW
 0638   DSU      EXTEND
 0639            INDEX  ADDRWD
 0640            DCS    0
 0641            DAS    MPAC
 0642            EXTEND
 0643            BZF    DANZIG
 0644            TC     OVERFLOW
 0645  2         TCF    DANZIG
 0646   OVERFLOW CAF    ONE             SUBROUTINE TO TURN OVFIND ON.
 0647  8         TCF    SETOVF2
 0648   BVSU     EXTEND
 0649            INDEX  ADDRWD
 0650            DCA    2
 0651            DXCH   MPAC +3
 0652            EXTEND
 0653            DCOM
 0654            DAS    MPAC +3
 0655            EXTEND
 0656            BZF    +2
 0657  2         TC     OVERFLOW
 0658            EXTEND
 0659            INDEX  ADDRWD
 0660            DCA    4
 0661            DXCH   MPAC +5
 0662            EXTEND
 0663            DCOM
 0664            DAS    MPAC +5
 0665            EXTEND
 0666            BZF    +2
 0667  2         TC     OVERFLOW
 0668   BDSU     EXTEND
 0669            INDEX  ADDRWD
 0670            DCA    0
 0671            DXCH   MPAC
 0672            EXTEND
 0673            DCOM
 0674            DAS    MPAC
 0675            EXTEND
 0676            BZF    DANZIG
 0677            TC     OVERFLOW
 0678            TCF    DANZIG
P0679  2         TRIPLE PRECISION ADD ROUTINE.
 0680   TAD      EXTEND
 0681            INDEX  ADDRWD
 0682            DCA    1               ADD MINOR PARTS FIRST.
 0683            DAS    MPAC +1
 0684            INDEX  ADDRWD
 0685            AD     0
 0686            AD     MPAC
 0687            TS     MPAC
 0688  2         TCF    DANZIG
 0689   SETOVF   TS     OVFIND          SET OVFIND IF SUCH OCCURS.
 0690            TCF    DANZIG
P0691  2ARITHMETIC SUBROUTINES REQUIRED IN FIXED-FIXED.
R0692            1.  DMPSUB     DOUBLE PRECISION MULTIPLY. MULTIPLY THE CONTENTS
 0693  9 OF MPAC,+1 BY THE DP WORD WHOSE ADDRESS
R0694                           IS IN ADDRWD AND LEAVE A TRIPLE PRECISION RESULT
 0695  9 IN MPAC.
R0696            2.  ROUNDSUB   ROUND THE TRIPLE PRECISON CONTENTS OF MPAC TO DO
 0697  9UBLE PRECISION.
R0698            3.  DOTSUB     TAKE THE DOT PRODUCT OF THE VECTOR IN MPAC AND T
 0699  9HE VECTOR WHOSE ADDRESS IS IN ADDRWD
R0700                           AND LEAVE THE TRIPLE PRECISION RESULT IN MPAC.
R0701            4.  POLY       USING THE CONTENTS OF MPAC AS A DP ARGUMENT, EVA
 0702  9LUATE THE POLYNOMIAL WHOSE DEGREE AND
R0703  4                        COEFFICIENTS IMMEDIATELY FOLLOW THE TC POLY INST
 0704  9RUCTION (SEE ROUTINE FOR DETAILS.)
 0705   DMP      INDEX  Q               BASIC SUBROUTINE FOR USE BY PINBALL, ETC
 0706            CAF    0               ADRES OF ARGUMENT FOLLOWS  TC DMP  .
 0707            INCR   Q
 0708  2 -1      TS     ADDRWD          (PROLOGUE FOR SETTING ADDRWD.)
 0709   DMPSUB   INDEX  ADDRWD          GET MINOR PART OF OPERAND AT C(ADDRWD).
 0710            CA     1
 0711            TS     MPAC +2         THIS WORKS FOR SQUARING MPAC AS WELL.
 0712            CAF    ZERO            SET MPAC +1 TO ZERO SO WE CAN ACCUMULATE
 0713            XCH    MPAC +1         THE PARTIAL PRODUCTS WITH DAS
 0714            TS     MPTEMP          INSTRUCTIONS.
 0715            EXTEND
 0716  2         MP     MPAC +2         MINOR OF MPAC X MINOR OF C(ADDRWD).
 0717            XCH    MPAC +2         DISCARD MINOR PART OF ABOVE RESULT AND
 0718            EXTEND                 FORM MAJOR OF MPAC X MINOR OF C(ADDRWD).
 0719            MP     MPAC
 0720  2         DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 0721            INDEX  ADDRWD          GET MAJOR PART OF ARGUMENT AT C(ADDRWD).
 0722            CA     0
 0723            XCH    MPTEMP          SAVE AND BRING OUT MINOR OF MPAC.
 0724            EXTEND
 0725            MP     MPTEMP          MAJOR OF C(ADDRWD) X MINOR OF MPAC.
 0726  2         DAS    MPAC +1         ACCUMULATE, SETTING A TO NET OVERFLOW.
 0727            XCH    MPAC            SETTING MPAC TO 0 OR +-1.
 0728            EXTEND
 0729            MP     MPTEMP          MAJOR OF MPAC X MAJOR OF C(ADDRWD).
 0730            DAS    MPAC            GUARANTEED NO OVERFLOW.
 0731            TC     Q               49 MCT = .573 MS. INCLUDING RETURN.
P0732  2         ROUND MPAC TO DOUBLE PRECISION, SETTING OVFIND ON THE RARE EVEN
 0733  9T OF OVERFLOW.
 0734   ROUNDSUB CAF    ZERO            SET MPAC +2 = 0 FOR SCALARS AND CHANGE
 0735  2 +1      TS     MODE            MODE TO DP.
 0736   VROUND   XCH    MPAC +2         BUT WE NEEDNT TAKE THE TIME FOR VECTORS.
 0737            DOUBLE
 0738            TS     L
 0739  2         TC     Q
 0740            AD     MPAC +1         ADD ROUNDING BIT IF MPAC +2 WAS GREATER
 0741            TS     MPAC +1         THAN .5 IN MAGNITUDE.
 0742  2         TC     Q
 0743            AD     MPAC            PROPAGATE INTERFLOW.
 0744            TS     MPAC
 0745  2         TC     Q
 0746   SETOVF2  TS     OVFIND          (RARE).
 0747            TC     Q
P0748            THE DOT PRODUCT SUBROUTINE USUALLY FORMS THE DOT PRODUCT OF THE
 0749  9 VECTOR IN MPAC WITH A STANDARD SIX
R0750   REGISTER VECTOR WHOSE ADDRESS IS IN ADDRWD. IN THIS CASE C(DOTINC) ARE S
 0751  9ET TO 2. VXM, HOWEVER, SETS C(DOTINC) TO
R0752  46 SO THAT DOTSUB DOTS MPAC WITH A COLUMN VECTOR OF THE MATRIX IN QUESTIO
 0753  9N IN THIS CASE.
 0754   PREDOT   CAF    TWO             PROLOGUE TO SET DOTINC TO 2.
 0755  2         TS     DOTINC
 0756   DOTSUB   EXTEND
 0757            QXCH   DOTRET          SAVE RETURN.
 0758            TC     DMPSUB          DOT X COMPONENTS.
 0759            DXCH   MPAC +3         POSITION Y COMPONENT OF MPAC FOR
 0760            DXCH   MPAC            MULTIPLICATION WHILE SAVING RESULT IN
 0761            DXCH   BUF             THREE WORD BUFFER, BUF.
 0762            CA     MPAC +2
 0763  2         TS     BUF +2
 0764            CA     DOTINC          ADVANCE ADDRWD TO Y COMPONENT OF
 0765            ADS    ADDRWD          OTHER ARGUMENT.
 0766            TC     DMPSUB
 0767            DXCH   MPAC +1         ACCUMULATE PARTIAL PRODUCTS.
 0768            DAS    BUF +1
 0769            AD     MPAC
 0770            AD     BUF
 0771            TS     BUF
 0772            TCF    +2
 0773  2         TS     OVFIND          IF OVERFLOW OCCURS.
 0774            DXCH   MPAC +5         MULTIPLY Z COMPONENTS.
 0775            DXCH   MPAC
 0776            CA     DOTINC
 0777            ADS    ADDRWD
 0778            TC     DMPSUB
 0779   ENDDOT   DXCH   BUF +1          LEAVE FINAL ACCUMULATION IN MPAC.
 0780            DAS    MPAC +1
 0781            AD     MPAC
 0782            AD     BUF
 0783            TS     MPAC
 0784  2         TC     DOTRET
 0785            TS     OVFIND          ON OVERFLOW HERE.
 0786            TC     DOTRET
P0787  2DOUBLE PRECISION POLYNOMIAL EVALUATOR
R0788                                      N        N-1
R0789            THIS ROUTINE EVALUATES A X  + A   X    + ... + A X + A  LEAVING
 0790  9 THE DP RESULT IN MPAC ON EXIT.
R0791  2                                 N      N-1              1     0
R0792  2THE ROUTINE HAS TWO ENTRIES
R0793            1. ENTRY THRU POWRSERS. THE COEFFICIENTS MAY BE EITHER IN FIXED
 0794  9 OR ERASABLE, THE CALL IS BY
R0795  2            TC POWRSERS, AND THE RETURN IS TO LOC(TC POWRSERS)+1. THE EN
 0796  9TERING DATA MUST BE AS FOLLOWS
A0797   A        SP     LOC-3           ADDRESS FOR REFERENCING COEF TABLE
A0798   L        SP     N-1             N IS THE DEGREE OF THE POWER SERIES
A0799  2MPAC     DP     X               ARGUMENT
A0800   LOC-2N   DP     A(0)
A0801            ...
A0802  2LOC      DP     A(N)
R0803  2         2. ENTRY THRU POLY. THE CALL TO POLY AND THE ENTERING DATA MUST
 0804  9 BE AS FOLLOWS
A0805  2MPAC     DP     X               ARGUMENT
A0806   LOC      TC     POLY
A0807   LOC+1    SP     N-1
A0808   LOC+2    DP     A(0)
A0809            ...
A0810  2LOC+2N+2 DP     A(N)            RETURN IS TO LOC+2N+4
 0811   POWRSERS EXTEND
 0812            QXCH   POLYRET         RETURN ADDRESS
 0813            TS     POLISH          POWER SERIES ADDRESS
 0814            LXCH   POLYCNT         N-1 TO COUNTER
 0815  2         TCF    POLYCOM         SKIP SET UP BY POLY
 0816   POLY     INDEX  Q
 0817            CAF    0
 0818            TS     POLYCNT         N-1 TO COUNTER
 0819            DOUBLE
 0820            AD     Q
 0821            TS     POLISH          L(A(N))-3 TO POLISH
 0822            AD     FIVE
 0823  2         TS     POLYRET         STORE RETURN ADDRESS
 0824   POLYCOM  CAF    LVBUF           INCOMING X WILL BE MOVED TO VBUF, SO
 0825  2         TS     ADDRWD          SET ADDRWD SO DMPSUB WILL MPY BY VBUF.
 0826            EXTEND
 0827            INDEX  POLISH
 0828            DCA    3
 0829            DXCH   MPAC            LOAD A(N) INTO MPAC,
 0830            DXCH   VBUF            SAVING X IN VBUF
 0831  2         TCF    POLY2
 0832   POLYLOOP TS     POLYCNT         SAVE DECREMENTED LOOP COUNTER
 0833            CS     TWO
 0834  2         ADS    POLISH          REGRESS COEFFICIENT POINTER
 0835   POLY2    TC     DMPSUB          MULTIPLY BY X
 0836            EXTEND
 0837            INDEX  POLISH
 0838            DCA    1               ADD IN NEXT COEFFICIENT
 0839  2         DAS    MPAC            USERS RESPONSIBILITY TO ASSURE NO OVFLOW
 0840            CCS    POLYCNT
 0841            TCF    POLYLOOP
 0842            TC     POLYRET         RETURN CALLER
P0843  2         MISCELLANEOUS MULTI-PRECISION ROUTINES REQUIRED IN FIXED-FIXED
 0844  9BUT NOT USED BY THE INTERPRETER.
 0845   TPAGREE  EXTEND                 FORCE SIGN AGREEMENT AMONG THE TRIPLE-
 0846            QXCH   BUF             PRECISION CONTENTS OF MPAC, RETURNING
 0847            TC     BRANCH          WITH THE SIGNUM OF THE INPUT IN A.
 0848            TCF    ARG+
 0849  2         TCF    ARGZERO
 0850            CS     POSMAX          IF NEGATIVE.
 0851  2         TCF    +2
 0852   ARG+     CAF    POSMAX
 0853    +2      TS     BUF +1
 0854            EXTEND
 0855            AUG    A               FORMS +-1.0.
 0856            AD     MPAC +2
 0857            TS     MPAC +2
 0858            CAF    ZERO
 0859            AD     BUF +1
 0860            AD     MPAC +1
 0861            TS     MPAC +1
 0862            CAF    ZERO
 0863            AD     BUF +1
 0864            AD     MPAC
 0865   ARGZERO2 TS     MPAC            ALWAYS SKIPPING UNLESS ARGZERO.
 0866            TS     MPAC +1
 0867  2         TC     BUF             RETURN.
 0868   ARGZERO  TS     MPAC +2         SET ALL THREE MPAC REGISTERS TO ZERO.
 0869  2         TCF    ARGZERO2
R0870  2         SHORTMP MULTIPLIES THE TP CONTENTS OF MPAC BY THE SINGLE PRECIS
 0871  9ION NUMBER ARRIVING IN A.
 0872   SHORTMP  TS     MPTEMP
 0873            EXTEND
 0874            MP     MPAC +2
 0875            TS     MPAC +2
 0876            CAF    ZERO            SO SUBSEQUENT DAS WILL WORK.
 0877            XCH    MPAC +1
 0878            EXTEND
 0879            MP     MPTEMP
 0880            DAS    MPAC +1
 0881            XCH    MPAC            SETTING MPAC TO 0.
 0882            EXTEND
 0883            MP     MPTEMP
 0884            DAS    MPAC
 0885            TC     Q
P0886  2MISCELLANEOUS VECTOR OPERATIONS. INCLUDED HERE ARE THE FOLLOWING:
R0887            1.  DOT                DP VECTOR DOT PRODUCT.
R0888            2.  VXV                DP VECTOR CROSS PRODUCT.
R0889            3.  VXSC               DP VECTOR TIMES SCALAR.
R0890            4.  V/SC               DP VECTOR DIVIDED BY SCALAR.
R0891            5.  VPROJ              DP VECTOR PROJECTION. ( (MPAC.X)MPAC ).
R0892            6.  VXM                DP VECTOR POST-MULTIPLIED BY MATRIX.
R0893  4         7.  MXV                DP VECTOR PRE-MULTIPLIED BY MATRIX.
 0894   DOT      TC     PREDOT          DO THE DOT PRODUCT AND EXIT, CHANGING
 0895            CAF    ZERO            THE MODE TO DP SCALAR.
 0896  4         TCF    NEWMODE
 0897   MXV      CAF    TWO             SET UP MATINC AND DOTINC FOR ROW
 0898            TS     MATINC          VECTORS.
 0899  2         TCF    VXM/MXV         GO TO COMMON PORTION.
 0900   VXM      CS     TEN             SET MATINC AND DOTINC TO REFER TO MATRIX
 0901            TS     MATINC          AS THREE COLUMN VECTORS.
 0902            CAF    SIX
P0903  2         COMMON PORTION OF MXV AND VXM.
 0904   VXM/MXV  TS     DOTINC
 0905  2         TC     MPACVBUF        SAVE VECTOR IN MPAC FOR FURTHER USE.
 0906            TC     DOTSUB          GO DOT TO GET X COMPONENT OF ANSWER.
 0907            EXTEND
 0908            DCA    VBUF            MOVE MPAC VECTOR BACK INTO MPAC, SAVING
 0909            DXCH   MPAC            NEW X COMPONENT IN BUF2.
 0910            DXCH   BUF2
 0911            EXTEND
 0912            DCA    VBUF +2
 0913            DXCH   MPAC +3
 0914            EXTEND
 0915            DCA    VBUF +4
 0916            DXCH   MPAC +5
 0917            CA     MATINC          INITIALIZE ADDRWD FOR NEXT DOT PRODUCT.
 0918  2         ADS    ADDRWD          FORMS BASE ADDRESS OF NEXT COLUMN(ROW).
 0919            TC     DOTSUB
 0920            DXCH   VBUF            MOVE GIVEN VECTOR BACK TO MPAC, SAVING Y
 0921            DXCH   MPAC            COMPONENT OF ANSWER IN VBUF +2.
 0922            DXCH   VBUF +2
 0923            DXCH   MPAC +3
 0924            DXCH   VBUF +4
 0925            DXCH   MPAC +5
 0926            CA     MATINC          FORM ADDRESS OF LAST COLUMN OR ROW.
 0927  2         ADS    ADDRWD
 0928            TC     DOTSUB
 0929            DXCH   BUF2            ANSWER NOW COMPLETE. PUT COMPONENTS INTO
 0930            DXCH   MPAC            PROPER MPAC REGISTERS.
 0931            DXCH   MPAC +5
 0932            DXCH   VBUF +2
 0933            DXCH   MPAC +3
 0934            TCF    DANZIG          EXIT.
P0935  2         VXSC - VECTOR TIMES SCALAR.
 0936   VXSC     CCS    MODE            TEST PRESENT MODE.
 0937            TCF    DVXSC           SEPARATE ROUTINE WHEN SCALAR IS IN MPAC.
 0938  2         TCF    DVXSC
 0939   VVXSC    TC     DMPSUB          COMPUTE X COMPONENT
 0940            TC     VROUND          AND ROUND IT.
 0941            DXCH   MPAC +3         PUT Y COMPONENT INTO MPAC SAVING MPAC IN
 0942            DXCH   MPAC            MPAC +3.
 0943  2         DXCH   MPAC +3
 0944            TC     DMPSUB          DO SAME FOR Y AND Z COMPONENTS.
 0945            TC     VROUND
 0946            DXCH   MPAC +5
 0947            DXCH   MPAC
 0948  2         DXCH   MPAC +5
 0949            TC     DMPSUB
 0950            TC     VROUND
 0951   VROTATEX DXCH   MPAC            EXIT USED TO RESTORE MPAC AFTER THIS
 0952            DXCH   MPAC +5         TYPE OF ROTATION. CALLED BY VECTOR SHIFT
 0953            DXCH   MPAC +3         RIGHT, V/SC, ETC.
 0954            DXCH   MPAC
 0955            TCF    DANZIG
P0956  2         DP VECTOR PROJECTION ROUTINE.
 0957   VPROJ    TC     PREDOT          (MPAC.X)MPAC IS COMPUTED AND LEFT IN
 0958            CS     FOUR            MPAC. DO DOT AND FALL INTO DVXSC.
 0959  2         ADS    ADDRWD
R0960  2         VXSC WHEN SCALAR ARRIVES IN MPAC AND VECTOR IS AT X.
 0961   DVXSC    EXTEND                 SAVE SCALAR IN MPAC +3 AND GET X
 0962            DCA    MPAC            COMPONENT OF ANSWER.
 0963            DXCH   MPAC +3
 0964            TC     DMPSUB
 0965  2         TC     VROUND
 0966            CAF    TWO             ADVANCE ADDRWD TO Y COMPONENT OF X.
 0967            ADS    ADDRWD
 0968            EXTEND
 0969            DCA    MPAC +3         PUT SCALAR BACK INTO MPAC AND SAVE
 0970            DXCH   MPAC            X RESULT IN MPAC +5.
 0971            DXCH   MPAC +5
 0972            TC     DMPSUB
 0973  2         TC     VROUND
 0974            CAF    TWO
 0975            ADS    ADDRWD          TO Z COMPONENT.
 0976            DXCH   MPAC +3         BRING SCALAR BACK, PUTTING Y RESULT IN
 0977            DXCH   MPAC            THE PROPER PLACE.
 0978            DXCH   MPAC +3
 0979            TC     DMPSUB
 0980  2         TC     VROUND
 0981            DXCH   MPAC            PUT Z COMPONENT IN PROPER PLACE, ALSO
 0982            DXCH   MPAC +5         POSITIONING X.
 0983  2         DXCH   MPAC
 0984            CS     ONE             MODE HAS CHANGED TO VECTOR.
 0985            TCF    NEWMODE
P0986            THE VECTOR CROSS PRODUCT ROUTINE CALCULATES (X M -X M ,X M -X M
 0987  9 ,X M -X M ) WHERE M IS THE VECTOR IN
R0988                                                          3 2  2 3  1 3  3
 0989  91  2 1  1 2
R0990  4MPAC AND X THE VECTOR AT THE GIVEN ADDRESS.
 0991   VXV      EXTEND
 0992            DCA    MPAC +5         FORM UP M3X1, LEAVING M1 IN VBUF.
 0993            DXCH   MPAC
 0994            DXCH   VBUF
 0995  2         TC     DMPSUB          BY X1.
 0996            EXTEND
 0997            DCS    MPAC +3         CALCULATE -X1M2, SAVING X1M3 IN VBUF +2.
 0998            DXCH   MPAC
 0999            DXCH   VBUF +2
 1000  2         TC     DMPSUB
 1001            CAF    TWO             ADVANCE ADDRWD TO X2.
 1002            ADS    ADDRWD
 1003            EXTEND
 1004            DCS    MPAC +5         PREPARE TO GET -X2M3, SAVING -X1M2 IN
 1005            DXCH   MPAC            MPAC +5.
 1006            DXCH   MPAC +5
 1007  2         TC     DMPSUB
 1008            EXTEND
 1009            DCA    VBUF            GET X2M1, SAVING -X2M3 IN VBUF +4.
 1010            DXCH   MPAC
 1011            DXCH   VBUF +4
 1012  2         TC     DMPSUB
 1013            CAF    TWO             ADVANCE ADDRWD TO X3.
 1014            ADS    ADDRWD
 1015            EXTEND
 1016            DCS    VBUF            GET -X3M1, ADDING X2M1 TO MPAC +5 TO
 1017            DXCH   MPAC            COMPLETE THE Z COMPONENT OF THE ANSWER.
 1018  2         DAS    MPAC +5
 1019            EXTEND
 1020            BZF    +2
 1021  8         TC     OVERFLOW
 1022            TC     DMPSUB
 1023            DXCH   VBUF +2         MOVE X1M3 TO MPAC +3 SETTING UP FOR X3M2
 1024            DXCH   MPAC +3         AND ADD -X3M1 TO MPAC +3 TO COMPLETE THE
 1025            DXCH   MPAC            Y COMPONENT OF THE RESULT.
 1026  2         DAS    MPAC +3
 1027            EXTEND
 1028            BZF    +2
 1029  2         TC     OVERFLOW
 1030            TC     DMPSUB
 1031            DXCH   VBUF +4         GO ADD -X2M3 TO X3M2 TO COMPLETE THE X
 1032  2         TCF    ENDVXV          COMPONENT (TAIL END OF DAD).
R1033  2         THE MPACVBUF SUBROUTINE SAVES THE VECTOR IN MPAC IN VBUF WITHOU
 1034  9T CLOBBERING MPAC.
 1035   MPACVBUF EXTEND                 CALLED BY MXV, VXM, AND UNIT.
 1036            DCA    MPAC
 1037            DXCH   VBUF
 1038            EXTEND
 1039            DCA    MPAC +3
 1040            DXCH   VBUF +2
 1041            EXTEND
 1042            DCA    MPAC +5
 1043            DXCH   VBUF +4
 1044            TC     Q               RETURN TO CALLER.
P1045  2         INTERPRETIVE INSTRUCTIONS WHOSE EXECUTION CONSISTS OF PRINCIPAL
 1046  9LY CALLING SUBROUTINES.
 1047   DMP1     TC     DMPSUB          DMP INSTRUCTION.
 1048  2         TCF    DANZIG
 1049   DMPR     TC     DMPSUB
 1050            TC     ROUNDSUB +1     (C(A) = +0).
 1051  2         TCF    DANZIG
 1052   DDV      EXTEND
 1053            INDEX  ADDRWD          MOVE DIVIDEND INTO BUF.
 1054            DCA    0
 1055  2         TCF    BDDV +4
 1056   BDDV     EXTEND                 MOVE DIVISOR INTO MPAC SAVING MPAC, THE
 1057            INDEX  ADDRWD          DIVIDEND, IN BUF.
 1058            DCA    0
 1059            DXCH   MPAC
 1060    +4      DXCH   BUF
 1061            CAF    ZERO            DIVIDE ROUTINES IN BANK 0.
 1062            TS     FBANK
 1063  2         TCF    DDV/BDDV
 1064   SETPD    CA     ADDRWD          ANYWHERE IN ERASABLE IN GENERAL, BUT
 1065            TS     PUSHLOC         ALMOST ALWAYS IN THE WORK AREA.
 1066  2         TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1067   TSLC     CAF    ZERO            SHIFTING ROUTINES LOCATED IN BANK 00.
 1068            TS     FBANK
 1069  2         TCF    TSLC2
 1070   GSHIFT   CAF    LOW7            USED AS MASK AT GENSHIFT. THIS PROCESSES
 1071            TS     FBANK           ANY SHIFT INSTRUCTION (EXCEPT TSLC) WITH
 1072            TCF    GENSHIFT        AN ADDRESS (ROUTINES IN BANK 0).
P1073            THE FOLLOWING IS THE PROLOGUE TO V/SC. IF THE PRESENT MODE IS V
 1074  9ECTOR, IT SAVES THE SCALAR AT X IN BUF
R1075   AND CALLS THE V/SC ROUTINE IN BANK 0. IF THE PRESENT MODE IS SCALAR, IT
 1076  9MOVES THE VECTOR AT X INTO MPAC, SAVING
R1077  4THE SCALAR IN MPAC IN BUF BEFORE CALLING THE V/SC ROUTINE IN BANK 0.
 1078   V/SC     CCS    MODE
 1079            TCF    DV/SC           MOVE VECTOR INTO MPAC.
 1080  2         TCF    DV/SC
 1081   VV/SC    EXTEND
 1082            INDEX  ADDRWD
 1083            DCA    0
 1084   V/SC1    DXCH   BUF             IN BOTH CASES, VECTOR IS NOW IN MPAC AND
 1085            CAF    ZERO            SCALAR IN BUF.
 1086            TS     FBANK
 1087  2         TCF    V/SC2
 1088   DV/SC    EXTEND
 1089            INDEX  ADDRWD
 1090            DCA    2
 1091            DXCH   MPAC +3
 1092            EXTEND
 1093            INDEX  ADDRWD
 1094            DCA    4
 1095  2         DXCH   MPAC +5
 1096            CS     ONE             CHANGE MODE TO VECTOR.
 1097  2         TS     MODE
 1098            EXTEND
 1099            INDEX  ADDRWD
 1100            DCA    0
 1101            DXCH   MPAC
 1102            TCF    V/SC1           FINISH PROLOGUE AT COMMON SECTION.
P1103  2         SIGN AND COMPLEMENT INSTRUCTIONS.
 1104   SIGN     INDEX  ADDRWD          CALL COMP INSTRUCTION IF WORD AT X IS
 1105            CCS    0               NEGATIVE NON-ZERO.
 1106            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1107            TCF    +2
 1108  2         TCF    COMP            DO THE COMPLEMENT.
 1109            INDEX  ADDRWD
 1110            CCS    1
 1111            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1112            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1113            TCF    COMP
 1114  4         TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1115   COMP     EXTEND                 COMPLEMENT DP MPAC IN EVERY CASE.
 1116            DCS    MPAC
 1117  2         DXCH   MPAC
 1118            CCS    MODE            EITHER COMPLEMENT MPAC +3 OR THE REST OF
 1119            TCF    DCOMP           THE VECTOR ACCUMULATOR.
 1120  2         TCF    DCOMP
 1121            EXTEND                 VECTOR COMPLEMENT.
 1122            DCS    MPAC +3
 1123            DXCH   MPAC +3
 1124            EXTEND
 1125            DCS    MPAC +5
 1126            DXCH   MPAC +5
 1127  2         TCF    DANZIG
 1128   DCOMP    CS     MPAC +2
 1129            TS     MPAC +2
 1130            TCF    DANZIG
P1131  2         CONSTANTS REQUIRED IN FIXED-FIXED.
 1132   DPOSMAX  OCT    37777
 1133   POSMAX   OCT    37777
 1134   LIMITS   EQUALS POSMAX +1
 1135  2NEG1/2   OCT    -20000          MUST BE TWO LOCATIONS AHEAD OF POS1/2.
 1136   BIT15    OCT    40000           BIT TABLE FOLLOWS.
 1137   BIT14    OCT    20000
 1138   BIT13    OCT    10000
 1139   BIT12    OCT    04000
 1140   BIT11    OCT    02000
 1141   BIT10    OCT    01000
 1142   BIT9     OCT    00400
 1143   BIT8     OCT    00200
 1144   BIT7     OCT    00100
 1145   BIT6     OCT    00040
 1146   BIT5     OCT    00020
 1147   BIT4     OCT    00010
 1148   BIT3     OCT    00004
 1149   BIT2     OCT    00002
 1150  2BIT1     OCT    00001
 1151   NEGMAX   EQUALS BIT15
 1152   HALF     EQUALS BIT14
 1153   POS1/2   EQUALS HALF
 1154   QUARTER  EQUALS BIT13
 1155   2K       EQUALS BIT11
 1156   ELEVEN   DEC    11
 1157   NOUTCON  =      ELEVEN
 1158   TEN      DEC    10
 1159   NINE     DEC    9
 1160   EIGHT    EQUALS BIT4
 1161   SEVEN    OCT    7
 1162   SIX      EQUALS REVCNT
 1163   FIVE     OCT    5
 1164   FOUR     EQUALS BIT3
 1165   THREE    EQUALS NO.WDS +1
 1166   TWO      EQUALS BIT2
 1167   ONE      EQUALS BIT1
 1168   ZERO     OCT    0
 1169   NEG0     OCT    77777
 1170  2NEGONE   DEC    -1
 1171   NEG1     =      NEGONE
 1172   MINUS1   EQUALS NEG1
 1173   NEG2     OCT    77775
 1174   NEG3     DEC    -3
 1175   LOW9     OCT    777
 1176   LOW4     OCT    17
 1177   LOW3     EQUALS SEVEN
 1178  2LOW2     EQUALS THREE
 1179   CALLCODE OCT    00030
 1180   DLOADCOD OCT    40014
 1181   VLOADCOD EQUALS BIT15
 1182   DLOAD*   OCT    40015
 1183   VLOAD*   EQUALS OCT40001
 1184   LVBUF    ADRES  VBUF
 1185   BIT13-14 OCTAL  30000
 1186   ENDINTF  EQUALS
P1187  2SHIFTING AND ROUNDING PACKAGE.
R1188  2         THE FOLLOWING SHORT SHIFT CODES REQUIRE NO ADDRESS WORD:
R1189            1.  SR1 TO SR4         SCALAR SHIFT RIGHT.
R1190            2.  SR1R TO SR4R       SCALAR SHIFT RIGHT AND ROUND.
R1191            3.  SL1 TO SL4         SCALAR SHIFT LEFT.
R1192  2         4.  SL1R TO SL4R       SCALAR SHIFT LEFT AND ROUND.
R1193            5.  VSR1 TO VSR8       VECTOR SHIFT RIGHT (ALWAYS ROUNDS).
R1194  2         6.  VSL1 TO VSL8       VECTOR SHIFT LEFT (NEVER ROUNDS).
R1195  2         THE FOLLOWING CODES REQUIRE AN ADDRESS WHICH MAY BE INDEXED:*
R1196            1.  SR                 SCALAR SHIFT RIGHT.
R1197            2.  SRR                SCALAR SHIFT RIGHT AND ROUND.
R1198            3.  SL                 SCALAR SHIFT LEFT.
R1199  2         4.  SLR                SCALAR SHIFT LEFT AND ROUND.
R1200            5.  VSR                VECTOR SHIFT RIGHT.
R1201  2         6.  VSL                VECTOR SHIFT LEFT.
R1202   *  IF THE ADDRESS IS INDEXED, AND THE INDEX MODIFICATION RESULTS IN A NE
 1203  9GATIVE SHIFT COUNT, A SHIFT OF THE
R1204  4ABSOLUTE VALUE OF THE COUNT IS DONE IN THE OPPOSITE DIRECTION.
 1205  2         SETLOC 10000           BANK 0 PORTION FOLLOWS.
 1206   SHORTT   CAF    SIX             SCALAR SHORT SHIFTS COME HERE. THE SHIFT
 1207            MASK   CYR             COUNT-1 IS NOW IN BITS 2-3 OF CYR. THE
 1208  2         TS     SR              ROUNDING BIT IS IN BIT1 AT THIS POINT.
 1209            CCS    CYR             SEE IF RIGHT OR LEFT SHIFT DESIRED.
 1210  2         TCF    TSSL            SHIFT LEFT.
 1211  2SRDDV    DEC    20              MPTEMP SETTING FOR SR BEFORE DDV.
 1212   TSSR     INDEX  SR              GET SHIFTING BIT.
 1213            CAF    BIT14
 1214  2         TS     MPTEMP
 1215            CCS    CYR             SEE IF A ROUND IS DESIRED.
 1216   RIGHTR   TC     MPACSRND        YES - SHIFT RIGHT AND ROUND.
 1217            TCF    NEWMODE         SET MODE TO DP (C(A) = 0).
 1218   MPACSHR  CA     MPTEMP          DO A TRIPLE PRECISION SHIFT RIGHT.
 1219            EXTEND
 1220            MP     MPAC +2
 1221    +3      TS     MPAC +2         (EXIT FROM SQRT AND ABVAL).
 1222            CA     MPTEMP
 1223            EXTEND
 1224            MP     MPAC            SHIFT MAJOR PART INTO A,L AND PLACE IN
 1225            DXCH   MPAC            MPAC,+1.
 1226            CA     MPTEMP
 1227            EXTEND
 1228            MP     L               ORIGINAL C(MPAC +1).
 1229            DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 1230  2         TCF    DANZIG
R1231  2         MPAC SHIFT RIGHT AND ROUND SUBROUTINES.
 1232   MPACSRND CA     MPAC +2         WE HAVE TO DO ALL THREE MULTIPLIES SINCE
 1233            EXTEND                 MPAC +1 AND MPAC +2 MIGHT HAVE SIGN
 1234            MP     MPTEMP          DISAGREEMENT WITH A SHIFT RIGHT OF 1.
 1235            XCH    MPAC +1
 1236            EXTEND
 1237            MP     MPTEMP
 1238            XCH    MPAC +1         TRIAL MINOR PART.
 1239  2         AD     L
 1240   VSHR2    DOUBLE                 (FINISH VECTOR COMPONENT SHIFT RIGHT
 1241            TS     MPAC +2         AND ROUND.
 1242            TCF    +2
 1243  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1244            CAF    ZERO
 1245            TS     MPAC +2
 1246            XCH    MPAC            SETTING TO ZERO SO FOLLOWING DAS WORKS.
 1247            EXTEND
 1248            MP     MPTEMP
 1249            DAS    MPAC            AGAIN NO OVERFLOW.
 1250  2         TC     Q
 1251   VSHRRND  CA     MPTEMP          ENTRY TO SHIFT RIGHT AND ROUND MPAC WHEN
 1252            EXTEND                 MPAC CONTAINS A VECTOR COMPONENT.
 1253            MP     MPAC +1
 1254            TS     MPAC +1
 1255            XCH    L
 1256            TCF    VSHR2           GO ADD ONE IF NECESSARY AND FINISH.
P1257  2         ROUTINE FOR SHORT SCALAR SHIFT LEFT (AND MAYBE ROUND).
 1258   TSSL     CA     SR              GET SHIFT COUNT FOR SR.
 1259  2 +1      TS     MPTEMP
 1260    +2      EXTEND                 ENTRY HERE FROM SL FOR SCALARS.
 1261            DCA    MPAC +1         SHIFTING LEFT ONE PLACE AT A TIME IS
 1262            DAS    MPAC +1         FASTER THAN DOING THE WHOLE SHIFT WITH
 1263            AD     MPAC            MULTIPLIES ASSUMING THAT FREQUENCY OF
 1264            AD     MPAC            SHIFT COUNTS GOES DOWN RAPIDLY AS A
 1265            TS     MPAC            FUNCTION OF THEIR MAGNITUDE.
 1266            TCF    +2
 1267            TS     OVFIND          OVERFLOW. (LEAVES OVERFLOW-CORRECTED
A1268                                   RESULT ANYWAY).
 1269            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNT.
 1270  2         TCF    TSSL +1
 1271            CCS    CYR             SEE IF ROUND WANTED.
 1272   ROUND    TC     ROUNDSUB        YES - ROUND AND EXIT.
 1273            TCF    DANZIG          SL LEAVES A ZERO IN CYR FOR NO ROUND.
 1274            TCF    DANZIG          NO - EXIT IMMEDIATL
P1275  2VECTOR SHIFTING ROUTINES.
 1276   SHORTV   CAF    LOW3            SAVE 3 BIT SHIFT COUNT - 1 WITHOUT
 1277            MASK   CYR             EDITING CYR.
 1278            TS     MPTEMP
 1279            CCS    CYR             SEE IF LEFT OR RIGHT SHIFT.
 1280            TCF    VSSL            VECTOR SHIFT LEFT.
 1281  2OCT176   OCT    176             USED IN PROCESSED SHIFTS WITH - COUNT.
 1282   VSSR     INDEX  MPTEMP          (ENTRY FROM SR). PICK UP SHIFTING BIT.
 1283            CAF    BIT14           MPTEMP CONTAINS THE SHIFT COUNT - 1.
 1284            TS     MPTEMP
 1285  2         TC     VSHRRND         SHIFT X COMPONENT.
 1286            DXCH   MPAC            SWAP X AND Y COMPONENTS.
 1287            DXCH   MPAC +3
 1288            DXCH   MPAC
 1289  2         TC     VSHRRND         SHIFT Y COMPONENT.
 1290            DXCH   MPAC            SWAP Y AND Z COMPONENTS.
 1291            DXCH   MPAC +5
 1292            DXCH   MPAC
 1293  2         TC     VSHRRND         SHIFT Z COMPONENT.
 1294            TCF    VROTATEX        RESTORE COMPONENTS TO PROPER PLACES.
P1295  2VECTOR SHIFT LEFT - DONE ONE PLACE AT A TIME.
 1296  2 -1      TS     MPTEMP          SHIFTING LOOP.
 1297   VSSL     EXTEND
 1298            DCA    MPAC
 1299            DAS    MPAC
 1300            EXTEND
 1301            BZF    +2
 1302  2         TC     OVERFLOW
 1303            EXTEND
 1304            DCA    MPAC +3
 1305            DAS    MPAC +3
 1306            EXTEND
 1307            BZF    +2
 1308  2         TC     OVERFLOW
 1309            EXTEND
 1310            DCA    MPAC +5
 1311            DAS    MPAC +5
 1312            EXTEND
 1313            BZF    +2
 1314  2         TC     OVERFLOW
 1315            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNTER.
 1316            TCF    VSSL -1
 1317            TCF    DANZIG          EXIT.
P1318            TSLC - TRIPLE SHIFT LEFT AND COUNT. SHIFTS MPAC LEFT UNTIL GREA
 1319  9TER THAN .5 IN MAGNITUDE, LEAVING
R1320  2THE COMPLEMENT OF THE NUMBER OF SHIFTS REQUIRED IN X.
 1321   TSLC2    TS     MPTEMP          START BY ZEROING SHIFT COUNT (IN A NOW).
 1322            TC     BRANCH          EXIT WITH NO SHIFTING IF ARGUMENT ZERO.
 1323            TCF    +2
 1324  2         TCF    ENDTSLC         STORES ZERO SHIFT COUNT IN THIS CASE.
 1325            CA     MPAC            BEGIN NORMALIZATION LOOP.
 1326  2         TCF    TSLCTEST
 1327   TSLCLOOP INCR   MPTEMP          INCREMENT SHIFT COUNTER.
 1328            EXTEND
 1329            DCA    MPAC +1
 1330            DAS    MPAC +1
 1331            AD     MPAC
 1332            ADS    MPAC
 1333   TSLCTEST DOUBLE                 SEE IF (ANOTHER) SHIFT IS REQUIRED.
 1334            OVSK
 1335  2         TCF    TSLCLOOP        YES - INCREMENT COUNT AND SHIFT AGAIN.
 1336   ENDTSLC  CS     MPTEMP
 1337            TCF    STORE1          STORE SHIFT COUNT AND RETURN TO DANZIG.
P1338            THE FOLLOWING ROUTINES PROCESSES THE GENERAL SHIFT INSTRUCTIONS
 1339  9 SR, SRR, SL, AND SLR.
R1340  2THE GIVEN ADDRESS IS DECODED AS FOLLOWS:
R1341            BITS 1-7    SHIFT COUNT (SUBADDRESS) LESS THAN 125 DECIMAL.
R1342            BIT 8       PSEUDO SIGN BIT (DETECTS CHANGE IN SIGN IN INDEXED
 1343  9SHIFTS).
R1344            BIT 9       0 FOR LEFT SHIFT, AND 1 FOR RIGHT SHIFT.
R1345            BIT 10      1 FOR TERMINAL ROUND ON SCALAR SHIFTS, 0 OTHERWISE.
R1346  2         BITS 11-15  0.
R1347  4THE ABOVE ENCODING IS DONE BY THE YUL SYSTEM.
 1348   GENSHIFT MASK   ADDRWD          GET SHIFT COUNT, TESTING FOR ZERO.
 1349            CCS    A               (ARRIVES WITH C(A) = LOW7).
 1350  2         TCF    GENSHFT2        IF NON-ZERO, PROCEED WITH DECREMENTED CT
 1351            CAF    BIT10           ZERO SHIFT COUNT. NO SHIFTS NEEDED BUT
 1352            MASK   ADDRWD          WE MIGHT HAVE TO ROUND MPAC ON SLR AND
 1353            CCS    A               SRR (SCALAR ONLY).
 1354            TC     ROUNDSUB
 1355  2         TCF    DANZIG
 1356   GENSHFT2 TS     MPTEMP          DECREMENTED SHIFT COUNT TO MPTEMP.
 1357            CAF    BIT8            TEST MEANING OF LOW SEVEN BIT COUNT IN
 1358            EXTEND                 MPTEMP NOW.
 1359            MP     ADDRWD
 1360            MASK   LOW2            JUMPS ON SHIFT DIRECTION (BIT8) AND
 1361            INDEX  A
 1362            TCF    +1              ORIGINAL SHIFT DIRECTION (BIT 9).
 1363            TCF    RIGHT-          NEGATIVE SHIFT COUNT FOR SL OR SLR.
 1364            TCF    LEFT            SL OR SLR.
 1365            TCF    LEFT-           NEGATIVE SHIFT COUNT WITH SR OR SRR.
P1366  2         GENERAL SHIFT RIGHT.
 1367   RIGHT    CCS    MODE            SEE IF VECTOR OR SCALAR.
 1368            TCF    GENSCR
 1369  2         TCF    GENSCR
 1370            CA     MPTEMP          SEE IF SHIFT COUNT GREATER THAN 13D.
 1371   VRIGHT2  AD     NEG12
 1372            EXTEND
 1373  2         BZMF   VSSR            IF SO, BRANCH AND SHIFT IMMEDIATELY.
 1374            AD     NEGONE          IF NOT, REDUCE MPTEMP BY A TOTAL OF 14,
 1375            TS     MPTEMP          AND DO A SHIFT RIGHT AND ROUND BY 14.
 1376            CAF    ZERO            THE ROUND AT THIS STAGE MAY INTRODUCE A
 1377            TS     L               ONE BIT ERROR IN A SHIFT RIGHT 15D.
 1378            XCH    MPAC
 1379            XCH    MPAC +1
 1380            TC     SETROUND        X COMPONENT NOW SHIFTED, SO MAKE UP THE
 1381            DAS    MPAC            ROUNDING QUANTITY (0 IN A AND 0 OR +-1
A1382                                   IN L).
 1383            XCH    MPAC +3         REPEAT THE ABOVE PROCESS FOR Y AND Z.
 1384            XCH    MPAC +4
 1385            TC     SETROUND
 1386  2         DAS    MPAC +3         NO OVERFLOW ON THESE ADDS.
 1387            XCH    MPAC +5
 1388            XCH    MPAC +6
 1389            TC     SETROUND
 1390  2         DAS    MPAC +5
 1391            CCS    MPTEMP          SEE IF DONE, DOING FINAL DECREMENT.
 1392            TCF    VRIGHT2
 1393   TCSUBTR  TCF    SUBTR
 1394  2BIASLO   DEC    .2974 B-1       SQRT CONSTANT
 1395  4         TCF    DANZIG
 1396   SETROUND DOUBLE                 MAKES UP ROUNDING QUANTITY FROM ARRIVING
 1397            TS     MPAC +2         C(A). L IS ZERO INITIALLY.
 1398            CAF    ZERO
 1399            XCH    L
 1400            TC     Q               RETURN AND DO THE DAS, RESETTING L TO 0.
P1401  2         PROCESS SR AND SRR FOR SCALARS.
 1402   GENSCR   CA     MPTEMP          SEE IF THE ORIGINAL SHIFT COUNT WAS LESS
 1403    +1      AD     NEG12           THAN 14D.
 1404            EXTEND
 1405  2         BZMF   DOSSHFT         DO THE SHIFT IMMEDIATELY IF SO.
 1406    +4      AD     NEGONE          IF NOT, DECREMENT SHIFT COUNT BY 14D AND
 1407            TS     MPTEMP          SHIFT MPAC RIGHT 14 PLACES.
 1408            CAF    ZERO
 1409            XCH    MPAC
 1410            XCH    MPAC +1
 1411            TS     MPAC +2
 1412            CCS    MPTEMP          SEE IF FINISHED, DO FINAL DECREMENT.
 1413            TC     GENSCR +1
 1414   NEG12    DEC    -12
 1415   SLOPEHI  DEC    .5884           SQRT CONSTANT.
 1416            CAF    BIT10           FINISHED WITH SHIFT. SEE IF ROUND
 1417            MASK   ADDRWD          WANTED.
 1418            CCS    A
 1419            TC     ROUNDSUB
 1420  2         TCF    DANZIG          DO SO AND/OR EXIT.
 1421   DOSSHFT  INDEX  MPTEMP          PICK UP SHIFTING BIT.
 1422            CAF    BIT14
 1423            TS     MPTEMP
 1424            CAF    BIT10           SEE IF TERMINAL ROUND DESIRED.
 1425            MASK   ADDRWD
 1426            CCS    A
 1427            TCF    RIGHTR          YES.
 1428            TCF    MPACSHR         JUST SHIFT RIGHT.
P1429  2         PROCESS THE RIGHT- (SL(R) WITH A NEGATIVE COUNT), LEFT-, AND LE
 1430  9FT OPTIONS.
 1431   RIGHT-   CS     MPTEMP          GET ABSOLUTE VALUE - 1 OF SHIFT COUNT
 1432            AD     OCT176          UNDERSTANDING THAT BIT8 (PSEUDO-SIGN)
 1433            TS     MPTEMP          WAS 1 INITIALLY.
 1434  2         TCF    RIGHT           DO NORMAL SHIFT RIGHT.
 1435   LEFT-    CS     MPTEMP          SAME PROLOGUE TO LEFT FOR INDEXED RIGHT
 1436            AD     OCT176          SHIFTS WHOSE NET SHIFT COUNT IS NEGATIVE
 1437  2         TS     MPTEMP
 1438   LEFT     CCS    MODE            SINCE LEFT SHIFTING IS SONE ONE PLACE AT
 1439            TCF    GENSCL          A TIME, NO COMPARISON WITH 14 NEED BE
 1440            TCF    GENSCL          DONE. FOR SCALARS, SEE IF TERMINAL ROUND
 1441  2         TCF    VSSL            DESIRED. FOR VECTORS, SHIFT IMMEDIATELY.
 1442   GENSCL   CAF    BIT6            PUT ROUNDING BIT (BIT10 OF ADDRWD) INTO
 1443            EXTEND                 BIT 15 OF CYR WHERE THE ROUNDING BIT OF
 1444            MP     ADDRWD          A SHORT SHIFT LEFT WOULD BE.
 1445            TS     CYR
 1446            TCF    TSSL +2         DO THE SHIFT.
P1447            SCALAR DIVISION INSTRUCTIONS, DDV AND BDDV, ARE EXECUTED HERE.
 1448  9AT THIS POINT, THE DIVIDEND IS IN MPAC
R1449  2AND THE DIVISOR IN BUF.
 1450   DDV/BDDV CS     ONE             INITIALIZATION.
 1451            TS     DVSIGN          +-1 FOR POSITIVE QUOTIENT - -0 FOR NEG.
 1452            TS     DVNORMCT        DIVIDEND NORMALIZATION COUNT.
 1453  2         TS     MAXDVSW         NEAR-ONE DIVIDE FLAG.
 1454            CCS    BUF             FORCE BUF POSITIVE WITH THE MAJOR PART
 1455            TCF    BUF+            NON-ZERO.
 1456            TCF    +2
 1457  2         TCF    BUF-
 1458            XCH    BUF +1          SHIFT DIVIDEND AND DIVISOR LEFT 14.
 1459            XCH    BUF
 1460            XCH    MPAC +1
 1461            XCH    MPAC
 1462            EXTEND                 CHECK FOR OVERFLOW.
 1463            BZF    +2
 1464  2         TCF    DVOVF
 1465            CCS    BUF             TRY AGAIN ON FORMER MINOR PART.
 1466            TCF    BUF+
 1467            TCF    DVOVF           OVERFLOW ON ZERO DIVISOR.
 1468  2         TCF    BUF-
 1469   DVOVF    CAF    POSMAX          ON DIVISION OVERFLOW OF ANY SORT, SET
 1470            TS     MPAC            SET DP MPAC TO +-POSMAX.
 1471            TC     FINALDV +3
 1472            CAF    ONE             SET OVERFLOW INDICATOR AND EXIT.
 1473  2         TCF    SETOVF
 1474   BUF-     EXTEND                 IF BUF IS NEGATIVE, COMPLEMENT IT AND
 1475            DCS    BUF             MAINTAIN DVSIGN FOR FINAL QUOTIENT SIGN.
 1476            DXCH   BUF
 1477  2         INCR   DVSIGN          NOW -0.
 1478   BUF+     CCS    MPAC            FORCE MPAC POSITIVE, CHECKING FOR ZERO
 1479            TCF    MPAC+           DIVIDEND IN THE PROCESS.
 1480            TCF    +2
 1481            TCF    MPAC-
 1482            CCS    MPAC +1
 1483            TCF    MPAC+
 1484            TCF    DANZIG          EXIT IMMEDIATELY ON ZERO DIVIDEND.
 1485            TCF    MPAC-
 1486  2         TCF    DANZIG
 1487   MPAC-    EXTEND                 FORCE MPAC POSITIVE AS BUF IN BUF-.
 1488            DCS    MPAC
 1489            DXCH   MPAC
 1490  8         INCR   DVSIGN          NOW +1 OR -0.
 1491   MPAC+    CS     MPAC            CHECK FOR DIVISION OVERFLOW. IF THE
 1492            AD     NEGONE          MAJOR PART OF THE DIVIDEND IS LESS THAN
 1493            AD     BUF             THE MAJOR PART OF THE DIVISOR BY AT
 1494            CCS    A               LEAST TWO, WE CAN PROCEED IMMEDIATELY
 1495            TCF    DVNORM          WITHOUT NORMALIZATION PRODUCING A DVMAX.
 1496  2-1/2+2   OCT    60001           USED IN SQRTSUB.
 1497            TCF    +1              IF THE ABOVE DOES NOT HOLD, FORCE SIGN
 1498            CAF    HALF            AGREEMENT IN NUMERATOR AND DENOMINATOR
 1499            DOUBLE                 TO FACILITATE OVERFLOW AND NEAR-ONE
 1500            AD     MPAC +1         CHECKING.
 1501            TS     MPAC +1
 1502            CAF    ZERO
 1503            AD     POSMAX
 1504  2         ADS    MPAC
 1505            CAF    HALF            SAME FOR BUF.
 1506            DOUBLE
 1507            AD     BUF +1
 1508            TS     BUF +1
 1509            CAF    ZERO
 1510            AD     POSMAX
 1511  2         ADS    BUF
 1512            CS     MPAC            CHECK MAGNITUDE OF SIGN-CORRECTED
 1513            AD     BUF             OPERANDS.
 1514            CCS    A
 1515            TCF    DVNORM          DIVIDE OK - WILL NOT BECOME MAXDV CASE.
 1516   LBUF2    ADRES  BUF2
 1517  2         TCF    DVOVF           DIVISOR NOT LESS THAN DIVIDEND - OVF.
 1518            TS     MAXDVSW         IF THE MAJOR PARTS OF THE DIVIDEND AND
 1519            CS     MPAC +1         DIVISOR ARE EQUAL, A SPECIAL APPROXIMA-
 1520            AD     BUF +1          TION IS USED (PROVIDED THE DIVISION IS
 1521            EXTEND                 POSSIBLE, OF COURSE).
 1522            BZMF   DVOVF
 1523  8         TCF    DVNORM          IF NO OVERFLOW.
 1524   BUFNORM  EXTEND                 ADD -1 TO AUGMENT SHIFT COUNT AND SHIFT
 1525            AUG    DVNORMCT        LEFT ONE PLACE.
 1526            EXTEND
 1527            DCA    BUF
 1528  2         DAS    BUF
 1529   DVNORM   CA     BUF             SEE IF DIVISOR NORMALIZED YET.
 1530            DOUBLE
 1531            OVSK
 1532  2         TCF    BUFNORM         NO - SHIFT LEFT ONE AND TRY AGAIN.
 1533            DXCH   MPAC            CALL DIVIDEND NORMALIZATION SEQUENCE
 1534            INDEX  DVNORMCT        PRIOR TO DOING THE DIVIDE.
 1535  2         TC     MAXTEST
 1536            TS     MPAC +2         RETURNS WITH DIVISION DONE AND C(A) = 0.
 1537            TCF    DANZIG
P1538  2         THE FOLLOWING ARE PROLOGUES TO SHIFT THE DIVIDEND ARRIVING IN A
 1539  9 AND L BEFORE THE DIVIDE.
 1540    -21D    LXCH   SR              SPECIAL PROLOGUE FOR UNIT WHEN THE
 1541            EXTEND                 LENGTH OF THE ARGUMENT WAS NOT LESS THAN
 1542            MP     HALF            .5. IN THIS CASE, EACH COMPONENT MUST BE
 1543            XCH    L               SHIFTED RIGHT ONE TO PRODUCE A HALF-UNIT
 1544            AD     SR              VECTOR.
 1545            XCH    L
 1546  2         TCF    GENDDV +1       WITH DP DIVIDEND IN A,L.
 1547            DDOUBL                 PROLOGUE WHICH NORMALIZES THE DIVIDEND
 1548            DDOUBL                 WHEN IT IS KNOWN THAT NO DIVISION
 1549            DDOUBL                 OVERFLOW WILL OCCUR.
 1550            DDOUBL
 1551            DDOUBL
 1552            DDOUBL
 1553            DDOUBL
 1554            DDOUBL
 1555            DDOUBL
 1556            DDOUBL
 1557            DDOUBL
 1558            DDOUBL
 1559            DDOUBL
 1560  2         DXCH   MPAC
 1561   MAXTEST  CCS    MAXDVSW         0 IF MAJORS MIGHT BE =, -1 OTHERWISE.
 1562  2BIASHI   DEC    .4192 B-1       SQRT CONSTANTS
 1563            TCF    MAXDV           CHECK TO SEE IF THEY ARE NOW EQUAL.
P1564            THE FOLLOWING IS A GENERAL PURPOSE DOUBLE PRECISION DIVISION RO
 1565  9UTINE. IT DIVIDES MPAC BY BUF AND LEAVES
R1566  2THE RESULT IN MPAC. THE FOLLOWING CONDITIONS MUST BE SATISFIED:
R1567  2         1.  THE DIVISOR (BUF) MUST BE POSITIVE AND NOT LESS THAN .5.
R1568            2.  THE DIVIDEND (MPAC) MUST BE POSITIVE WITH THE MAJOR PART OF
 1569  9 MPAC STRICTLY LESS THAN THAT OF BUF
R1570  2(A SPECIAL APPROXIMATION, MAXDV, IS USED WHEN THE MAJOR PARTS ARE EQUAL)
 1571  9.
R1572            UNDERSTANDING THAT A/B = Q + S(R/B) WHERE S = 2(-14) AND Q AND
 1573  9R ARE QUOTIENT AND REMAINDER, RESPEC-
R1574   TIVELY, THE FOLLOWING APPROXIMATION IS OBTAINED BY MULTIPLYING ABOVE AND
 1575  9 BELOW BY C - SD AND NEGLECTING TERMS OF
R1576  2ORDER S-SQUARED (POSSIBLY INTRODUCING ERROR INTO THE LOW TWO BITS OF THE
 1577  9 RESULT). SIGN AGREEMENT IS UNNECESSARY.
R1578            A + SB .      (R - QD)
 1579  9    A + SB
R1580            ------ = Q + S(------) WHERE Q AND R ARE QUOTIENT AND REMAINDER
 1581  9 OF ------ RESPECTIVELY.
R1582  4         C + SD        (  C   )
 1583  9      C
 1584   GENDDV   DXCH   MPAC            WE NEED A AND B ONLY FOR FIRST DV.
 1585    +1      EXTEND                 (SPECIAL UNIT PROLOGUE ENTERS HERE).
 1586            DV     BUF             A NOW CONTAINS Q AND L, R.
 1587  2         DXCH   MPAC
 1588            CS     MPAC            FORM DIVIDEND FOR MINOR PART OF RESULT.
 1589            EXTEND
 1590            MP     BUF +1
 1591            AD     MPAC +1         OVERFLOW AT THIS POINT IS POSITIVE SINCE
 1592            OVSK                   R IS POSITIVE IN EVERY CASE.
 1593  2         TCF    +5
 1594            EXTEND                 OVERFLOW CAN BE REMOVED BY SUBTRACTING C
 1595            SU     BUF             (BUF) ONCE SINCE R IS ALWAYS LESS THAN C
 1596            INCR   MPAC            IN THIS CASE. INCR COMPENSATES SUBTRACT.
 1597  2         TCF    +DOWN           (SINCE C(A) IS STILL POSITIVE).
 1598    +5      EXTEND                 C(A) CAN BE MADE LESS THAN C IN MAGNI-
 1599            BZMF   -UP             TUDE BY DIMINISHING IT BY C (SINCE C IS
A1600  8                                NOT LESS THAN .5) UNLESS C(A) = 0.
 1601   +DOWN    EXTEND
 1602            SU     BUF             IF POSITIVE, REDUCE ONLY IF NECESSARY
 1603            EXTEND                 SINCE THE COMPENSATING INCR MIGHT CAUSE
 1604            BZF    +3              OVERFLOW.
 1605            EXTEND                 DONT SUBTRACT UNLESS RESULT IS POSITIVE
 1606  2         BZMF   ENDMAXDV        OR ZERO.
 1607    +3      INCR   MPAC            KEEP SUBTRACT HERE AND COMPENSATE.
 1608  2         TCF    FINALDV
 1609   -UP      EXTEND                 IF ZERO, SET MINOR PART OF RESULT TO
 1610  2         BZF    FINALDV +3      ZERO.
 1611            EXTEND                 IF NEGATIVE, ADD C TO A, SUBTRACTING ONE
 1612            DIM    MPAC            TO COMPENSATE. DIM IS OK HERE SINCE THE
 1613  8ENDMAXDV AD     BUF             MAJOR PART NEVER GOES NEGATIVE.
 1614   FINALDV  ZL                     DO DV TO OBTAIN MINOR PART OF RESULT.
 1615            EXTEND
 1616            DV     BUF
 1617  2 +3      TS     MPAC +1
 1618            CCS    DVSIGN          LEAVE RESULT POSITIVE UNLESS C(DVSIGN)=
 1619            TC     Q               -0.
 1620            TC     Q
 1621  2         TC     Q
 1622            EXTEND
 1623            DCS    MPAC
 1624            DXCH   MPAC
 1625            CAF    ZERO            SO WE ALWAYS RETURN WITH C(A) = 0.
 1626            TC     Q
P1627            IF THE MAJOR PARTS OF THE DIVISOR AND DIVIDEND ARE EQUAL, BUT T
 1628  9HE MINOR PARTS ARE SUCH THAT THE
R1629   DIVIDEND IS STRICTLY LESS THAN THE DIVISOR IN MAGNITUDE, THE FOLLOWING A
 1630  9PPROXIMATION IS USED. THE ASSUMPTIONS
R1631  2ARE THE SAME AS THE GENERAL ROUTINE WITH THE ADDITION THAT SIGN AGREEMEN
 1632  9T IS NECESSARY (B, C, & D POSITIVE).
R1633                   C + SB .          (C + B - D)
R1634                   ------ = 37777 + S(---------)
R1635  2                C + SD            (    C    )
R1636  4         THE DIVISION MAY BE PERFORMED IMMEDIATELY SINCE B IS STRICTLY L
 1637  9ESS THAN D AND C IS NOT LESS THAN .5.
 1638   MAXDV    CS     MPAC            SEE IF MAXDV CASE STILL HOLDS AFTER
 1639            AD     BUF             NORMALIZATION.
 1640            EXTEND
 1641            BZF    +2
 1642  2         TCF    GENDDV          MPAC NOW LESS THAN BUF - DIVIDE AS USUAL
 1643    +2      CAF    POSMAX          SET MAJOR PART OF RESULT.
 1644  2         TS     MPAC
 1645            CS     BUF +1          FORM DIVIDEND OF MINOR PART OF RESULT.
 1646            AD     MPAC +1
 1647            TCF    ENDMAXDV        GO ADD C AND DO DIVIDE, ATTACHING SIGN
A1648                                   BEFORE EXITING.
P1649  2         VECTOR DIVIDED BY SCALAR, V/SC, IS EXECUTED HERE. THE VECTOR IS
 1650  9 NOW IN MPAC WITH SCALAR IN BUF.
 1651   V/SC2    CS     ONE             INITIALIZE DIVIDEND NORMALIZATION COUNT
 1652            TS     DVNORMCT        AND DIVISION SIGN REGISTER.
 1653  2         TS     VBUF +5
 1654            CCS    BUF             FORCE DIVISOR POSITIVE WITH MAJOR PART
 1655            TCF    /BUF+           NON-ZERO (IF POSSIBLE).
 1656            TCF    +2
 1657  2         TCF    /BUF-
 1658            XCH    BUF +1          SHIFT VECTOR AND SCALAR LEFT 14.
 1659            XCH    BUF
 1660            XCH    MPAC +1
 1661            XCH    MPAC
 1662            EXTEND                 CHECK FOR OVERFLOW IN EACH CASE.
 1663            BZF    +2
 1664  2         TCF    DVOVF
 1665            XCH    MPAC +4
 1666            XCH    MPAC +3
 1667            EXTEND
 1668            BZF    +2
 1669  2         TCF    DVOVF
 1670            XCH    MPAC +6
 1671            XCH    MPAC +5
 1672            EXTEND
 1673            BZF    +2
 1674  2         TCF    DVOVF
 1675            CCS    BUF
 1676            TCF    /BUF+
 1677            TCF    DVOVF           ZERO DIVISOR - OVERFLOW.
 1678            TCF    /BUF-
 1679  2         TCF    DVOVF
 1680   /BUF-    EXTEND                 ON NEGATIVE, COMPLEMENT BUF AND MAINTAIN
 1681            DCS    BUF             DVSIGN IN VBUF +5.
 1682            DXCH   BUF
 1683  8         INCR   VBUF +5
 1684   /BUF+    CAF    HALF            FORCE SIGN AGREEMENT IN DIVISOR.
 1685            DOUBLE
 1686            AD     BUF +1
 1687            TS     BUF +1
 1688            CAF    ZERO
 1689            AD     POSMAX
 1690  2         ADS    BUF
 1691            XCH    BUF2            LEAVE ABS(ORIGINAL DIVISOR) IN BUF2 FOR
 1692            CA     BUF +1          OVERFLOW TESTING.
 1693            TS     BUF2 +1
 1694  2         TCF    /NORM           NORMALIZE DIVISOR IN BUF.
 1695   /NORM2   EXTEND                 IF LESS THAN .5, AUGMENT DVNORMCT AND
 1696            AUG    DVNORMCT        DOUBLE DIVISOR.
 1697            EXTEND
 1698            DCA    BUF
 1699  2         DAS    BUF
 1700   /NORM    CA     BUF             SEE IF DIVISOR NORMALIZED.
 1701            DOUBLE
 1702            OVSK
 1703  2         TCF    /NORM2          DOUBLE AND TRY AGAIN IF NOT.
 1704            TC     V/SCDV          DO X COMPONENT DIVIDE.
 1705            DXCH   MPAC +3         SUPPLY ARGUMENTS IN USUAL SEQUENCE.
 1706            DXCH   MPAC
 1707  2         DXCH   MPAC +3
 1708            TC     V/SCDV          Y COMPONENT.
 1709            DXCH   MPAC +5
 1710            DXCH   MPAC
 1711  2         DXCH   MPAC +5
 1712            TC     V/SCDV          Z COMPONENT.
 1713            TCF    VROTATEX        GO RE-ARRANGE COMPONENTS BEFORE EXIT.
P1714  2         SUBROUTINE USED BY V/SC TO DIVIDE VECTOR COMPONENT IN MPAC,+1 B
 1715  9Y THE SCALAR GIVEN IN BUF.
 1716   V/SCDV   CA     VBUF +5         REFLECTS SIGN OF SCALAR.
 1717  2         TS     DVSIGN
 1718            CCS    MPAC            FORCE MPAC POSITIVE, EXITING ON ZERO.
 1719            TCF    /MPAC+
 1720            TCF    +2
 1721  2         TCF    /MPAC-
 1722            CCS    MPAC +1
 1723            TCF    /MPAC+
 1724            TC     Q
 1725            TCF    /MPAC-
 1726  2         TC     Q
 1727   /MPAC-   EXTEND                 USUAL COMPLEMENTING AND SETTING OF SIGN.
 1728            DCS    MPAC
 1729            DXCH   MPAC
 1730  2         INCR   DVSIGN
 1731   /MPAC+   CS     ONE             INITIALIZE NEAR-ONE SWITCH.
 1732  2         TS     MAXDVSW
 1733            CS     MPAC            CHECK POSSIBLE OVERFLOW.
 1734            AD     BUF2            UNNORMALIZED INPUT DIVISOR.
 1735            EXTEND
 1736  2         BZMF   /AGREE          CHECK FOR NEAR-ONE OR OVERFLOW.
 1737   DDVCALL  DXCH   MPAC            CALL PRE-DIVIDE NORMALIZATION.
 1738            INDEX  DVNORMCT
 1739  8         TCF    MAXTEST
 1740   /AGREE   CAF    HALF            FORCE SIGN AGREEMENT IN DIVIDEND
 1741            DOUBLE                 (ALREADY DONE FOR DIVISOR).
 1742            AD     MPAC +1
 1743            TS     MPAC +1
 1744            CAF    ZERO
 1745            AD     POSMAX
 1746  2         ADS    MPAC
 1747            CS     MPAC            CHECK TO SEE IF OVERFLOW GONE OR IF
 1748            AD     BUF2            NEAR-ONE CASE IS PRESENT.
 1749            CCS    A
 1750            TCF    DDVCALL         NOT NEAR-ONE.
 1751   SLOPELO  DEC    .8324
 1752  2         TCF    DVOVF           NO HOPE.
 1753            TS     MAXDVSW         SIGNAL POSSIBLE NEAR-ONE CASE.
 1754            CS     MPAC +1         SEE IF DIVISION CAN BE DONE.
 1755            AD     BUF2 +1
 1756            EXTEND
 1757            BZMF   DVOVF
 1758            TCF    DDVCALL         GOING TO MAXDV.
P1759  2         THE FOLLOWING ROUTINE EXECUTES THE UNIT INSTRUCTION, WHICH TAKE
 1760  9S THE UNIT OF THE VECTOR IN MPAC.
 1761   UNIT     TC     MPACVBUF        SAVE THE ARGUMENT IN VBUF.
 1762            CAF    ZERO            MUST SENSE OVERFLOW IN FOLLOWING DOT.
 1763            XCH    OVFIND
 1764            TS     TEM1
 1765            TC     VSQSUB          DOT MPAC WITH ITSELF.
 1766            CA     TEM1
 1767            XCH    OVFIND
 1768            EXTEND
 1769            BZF    +2
 1770            TCF    DVOVF
 1771            EXTEND
 1772            DCA    MPAC            LEAVE THE SQUARE OF THE LENGTH OF THE
 1773            INDEX  FIXLOC          ARGUMENT IN LVSQUARE.
 1774  2         DXCH   LVSQUARE
 1775  2         TC     SQRTSUB         GO TAKE THE NORMALIZED SQUARE ROOT.
 1776            CCS    MPAC            CHECK FOR UNIT OVERFLOW.
 1777            TCF    +5              MPAC IS NOT LESS THAN .5 UNLESS
 1778            TS     L
 1779            INDEX  FIXLOC
 1780            DXCH   LV
 1781  2         TCF    DVOVF           INPUT TO SQRTSUB WAS 0.
 1782            CS     FOURTEEN        SEE IF THE INPUT WAS SO SMALL THE THE
 1783            AD     MPTEMP          FIRST TWO REGISTERS OF THE SQUARE WERE 0
 1784            CCS    A
 1785            COM                    IF SO, SAVE THE NEGATIVE OF THE SHIFT
 1786  2         TCF    SMALL           COUNT -15D.
 1787  2         TCF    LARGE           (THIS IS USUALLY THE CASE.)
 1788            CS     THIRTEEN        IF THE SHIFT COUNT WAS EXACTLY 14, SET
 1789  2         TS     MPTEMP          THE PRE-DIVIDE NORM COUNT TO -13D.
 1790            CA     MPAC            SHIFT THE LENGTH RIGHT 14 BEFORE STORING
 1791   SMALL2   TS     L               (SMALL EXITS TO THIS POINT).
 1792            CAF    ZERO
 1793  2         TCF    LARGE2          GO TO STORE LENGTH AND PROCEED.
 1794   LARGE    CCS    MPTEMP          MOST ALL CASES COME HERE.
 1795  2         TCF    LARGE3          SEE IF NO NORMALIZATION WAS REQUIRED BY
 1796            CS     SRDDV           SQRT, AND IF SO, SET UP FOR A SHIFT
 1797            TS     MPTEMP          RIGHT 1 BEFORE DIVIDING TO PRODUCE
 1798            EXTEND                 THE DESIRED HALF UNIT VECTOR.
 1799            DCA    MPAC
 1800  8         TCF    LARGE2
 1801   LARGE3   COM                    LEAVE NEGATIVE OF SHIFT COUNT-1 FOR
 1802  2         TS     MPTEMP          PREDIVIDE LEFT SHIFT.
 1803            COM                    PICK UP REQUIRED SHIFTING BIT TO UNNORM-
 1804            INDEX  A               ALIZE THE SQRT RESULT.
 1805            CAF    BIT14
 1806            TS     BUF
 1807            EXTEND
 1808            MP     MPAC +1
 1809            XCH    BUF
 1810            EXTEND                 (UNNORMALIZE THE SQRT FOR LV).
 1811            MP     MPAC
 1812            XCH    L
 1813            AD     BUF
 1814  2         XCH    L
 1815   LARGE2   INDEX  FIXLOC
 1816  2         DXCH   LV              LENGTH NOW STORED IN WORK AREA.
 1817            CS     ONE
 1818  2         TS     MAXDVSW         NO MAXDV CASES IN UNIT.
 1819            DXCH   VBUF            PREPARE X COMPONENT FOR DIVIDE, SETTING
 1820            DXCH   MPAC            LENGTH OF VECTOR AS DIVISOR IN BUF.
 1821            DXCH   BUF
 1822  2         TC     UNITDV
 1823            DXCH   VBUF +2         DO Y AND Z IN USUAL FASHION SO WE CAN
 1824            DXCH   MPAC            EXIT THROUGH VROTATEX.
 1825            DXCH   MPAC +3
 1826  2         TC     UNITDV
 1827            DXCH   VBUF +4
 1828            DXCH   MPAC
 1829            DXCH   MPAC +5
 1830            TC     UNITDV
 1831            TCF    VROTATEX        AND EXIT.
P1832            IF THE LENGTH OF THE ARGUMENT VECTOR WAS LESS THAN 2(-28), EACH
 1833  9 COMPONENT MUST BE SHIFTED LEFT AT LEAST
R1834  214 PLACES BEFORE THE DIVIDE. NOTE THAT IN THIS CASE, THE MAJOR PART OF E
 1835  9ACH COMPONENT IS ZERO.
 1836  2SMALL    TS     MPTEMP          NEGATIVE OF PRE-DIVIDE SHIFT COUNT.
 1837            CAF    ZERO            SHIFT EACH COMPONENT LEFT 14.
 1838            XCH    VBUF +1
 1839            XCH    VBUF
 1840            XCH    VBUF +3
 1841            XCH    VBUF +2
 1842            XCH    VBUF +5
 1843  2         XCH    VBUF +4
 1844            CS     MPTEMP
 1845            INDEX  A
 1846            CAF    BIT14
 1847            EXTEND
 1848            MP     MPAC
 1849  2         TCF    SMALL2
 1850   THIRTEEN DEC    13
 1851   FOURTEEN DEC    14
P1852  2         THE FOLLOWING ROUTINE SETS UP THE CALL TO THE DIVIDE ROUTINES.
 1853   UNITDV   CCS    MPAC            FORCE MPAC POSITIVE IF POSSIBLE, SETTING
 1854            TCF    UMPAC+          DVSIGN ACCORDING TO THE SIGN OF MPAC
 1855            TCF    +2              SINCE THE DIVISOR IS ALWAYS POSITIVE
 1856  2         TCF    UMPAC-          HERE.
 1857            CCS    MPAC +1
 1858            TCF    UMPAC+
 1859            TC     Q               EXIT IMMEDIATELY ON ZERO.
 1860            TCF    UMPAC-
 1861  2         TC     Q
 1862   UMPAC-   CS     ZERO            IF NEGATIVE, SET -0 IN DVSIGN FOR FINAL
 1863            TS     DVSIGN          COMPLEMENT.
 1864            EXTEND
 1865            DCS    MPAC            PICK UP ABSOLUTE VALUE OF ARG AND JUMP.
 1866            INDEX  MPTEMP
 1867  2         TCF    MAXTEST -1
 1868   UMPAC+   TS     DVSIGN          SET DVSIGN FOR POSITIVE QUOTIENT.
 1869            DXCH   MPAC
 1870            INDEX  MPTEMP
 1871            TCF    MAXTEST -1
P1872  2         MISCELLANEOUS UNARY OPERATIONS.
 1873   DSQ      TC     DSQSUB          SQUARE THE DP CONTENTS OF MPAC.
 1874  2         TCF    DANZIG
 1875   ABVALABS CCS    MODE            ABVAL OR ABS INSTRUCTION.
 1876            TCF    ABS             DO ABS ON SCALAR.
 1877  2         TCF    ABS
 1878   ABVAL    TC     VSQSUB          DOT MPAC WITH ITSELF.
 1879  2         LXCH   MODE            MODE IS NOW DP (L ZERO AFTER DAS).
 1880            EXTEND                 STORE SQUARE OF LENGTH IN WORK AREA.
 1881            DCA    MPAC
 1882            INDEX  FIXLOC
 1883  2         DXCH   LVSQUARE
 1884   SQRT     TC     SQRTSUB         TAKE THE SQUARE ROOT OF MPAC.
 1885            CCS    MPTEMP          RETURNED NORMALIZED SQUARE ROOT. SEE IF
 1886            TCF    +2              ANY UN-NORMALIZATION REQUIRED AND EXIT
 1887  2         TCF    DANZIG          IF NOT.
 1888            AD     NEG12           A RIGHT SHIFT OF MORE THAN 13 COULD BE
 1889            EXTEND                 REQUIRED IF INPUT WAS ZERO IN MPAC,+1.
 1890            BZMF   SQRTSHFT        GOES HERE IN MOST CASES.
 1891            ZL                     IF A LONG SHIFT IS REQUIRED, GO TO
 1892            LXCH   ADDRWD          GENERAL RIGHT SHIFT ROUTINES.
 1893  2         TCF    GENSCR +4       ADDRWD WAS ZERO TO PREVENT ROUND.
 1894   SQRTSHFT INDEX  MPTEMP          SELECT SHIFTING BIT AND EXIT THROUGH
 1895            CAF    BIT15           SHIFT ROUTINES.
 1896            TS     MPTEMP
 1897            CAF    ZERO            TO ZERO MPAC +2 IN THE PROCESS.
 1898  2         TCF    MPACSHR +3
 1899   ABS      TC     BRANCH          TEST SIGN OF MPAC AND COMPLEMENT IF
 1900            TCF    DANZIG
 1901            TCF    DANZIG
 1902  8         TCF    COMP
 1903   VDEF     CS     FOUR            VECTOR DEFINE - ESSENTIALLY TREATS
 1904            ADS    PUSHLOC         SCALAR IN MPAC AS X COMPONENT, PUSHES UP
 1905            EXTEND                 FOR Y AND THEN AGAIN FOR Z.
 1906            INDEX  A
 1907            DCA    2
 1908            DXCH   MPAC +3
 1909            EXTEND
 1910            INDEX  PUSHLOC
 1911            DCA    0
 1912            DXCH   MPAC +5
 1913            CS     ONE             MODE IS NOW VECTOR.
 1914  2         TCF    NEWMODE
 1915   VSQ      TC     VSQSUB          DOT MPAC WITH ITSELF.
 1916            CAF    ZERO
 1917  2         TCF    NEWMODE         MODE IS NOW DP.
 1918   PUSH     EXTEND                 PUSH DOWN MPAC LEAVING IT LOADED.
 1919            DCA    MPAC
 1920            INDEX  PUSHLOC         PUSH DOWN FIRST TWO REGISTERS IN EACH
 1921  2         DXCH   0
 1922            INDEX  MODE            INCREMENT PUSHDOWN POINTER.
 1923            CAF    NO.WDS
 1924  2         ADS    PUSHLOC
 1925            CCS    MODE
 1926            TCF    TPUSH           PUSH DOWN MPAC +2.
 1927  2         TCF    DANZIG          DONE FOR DP.
 1928            EXTEND                 ON VECTOR, PUSH DOWN Y AND Z COMPONENTS.
 1929            DCA    MPAC +3
 1930            INDEX  PUSHLOC
 1931            DXCH   0 -4
 1932            EXTEND
 1933            DCA    MPAC +5
 1934            INDEX  PUSHLOC
 1935            DXCH   0 -2
 1936  2         TCF    DANZIG
 1937   TPUSH    CA     MPAC +2
 1938  2         TCF    ENDTPUSH +2
 1939   RVQ      INDEX  FIXLOC          RVQ - RETURN IVA QPRET.
 1940            CA     QPRET
 1941            TCF    GOTO +1
P1942            THE FOLLOWING SUBROUTINES ARE USED IN SQUARING MPAC, IN BOTH TH
 1943  9E SCALAR AND VECTOR SENSE. THEY ARE
R1944  2SPECIAL CASES OF DMPSUB AND DOTSUB, PUT IN TO SAVE SOME TIME.
 1945   DSQSUB   CA     MPAC +1         SQUARES THE SCALAR CONTENTS OF MPAC.
 1946            EXTEND
 1947            SQUARE
 1948            TS     MPAC +2
 1949            CAF    ZERO            FORM 2(CROSS TERM).
 1950            XCH    MPAC +1
 1951            EXTEND
 1952            MP     MPAC
 1953            DDOUBL                 AND MAYBE OVERFLOW.
 1954            DAS    MPAC +1         AND SET A TO NET OVERFLOW.
 1955            XCH    MPAC
 1956            EXTEND
 1957            SQUARE
 1958            DAS    MPAC
 1959  2         TC     Q
 1960   VSQSUB   EXTEND                 DOTS THE VECTOR IN MPAC WITH ITSELF.
 1961            QXCH   DOTRET
 1962            TC     DSQSUB          SQUARE THE X COMPONENT.
 1963            DXCH   MPAC +3
 1964            DXCH   MPAC
 1965            DXCH   BUF             SO WE CAN END IN DOTSUB.
 1966            CA     MPAC +2
 1967  2         TS     BUF +2
 1968            TC     DSQSUB          SQUARE Y COMPONENT.
 1969            DXCH   MPAC +1
 1970            DAS    BUF +1
 1971            AD     MPAC
 1972            AD     BUF
 1973            TS     BUF
 1974            TCF    +2
 1975  2         TS     OVFIND          IF OVERFLOW.
 1976            DXCH   MPAC +5
 1977            DXCH   MPAC
 1978            TC     DSQSUB          SQUARE Z COMPONENT.
 1979            TCF    ENDDOT          END AS IN DOTSUB.
P1980            DOUBLE PRECISION SQUARE ROOT ROUTINE. TAKE THE SQUARE ROOT OF T
 1981  9HE TRIPLE PRECISION (MPAC +2 USED ONLY
R1982   IN NORMALIZATION) CONTENTS OF MPAC AND LEAVE THE NORMALIZED RESULT IN MP
 1983  9AC (C(MPAC) GREATER THAN OR EQUAL TO
R1984  4.5). THE RIGHT SHIFT COUNT (TO UNNORMALIZE) IS LEFT IN MPTEMP.
 1985   SQRTSUB  CAF    ZERO            START BY ZEROING RIGHT SHIFT COUNT.
 1986  2         TS     MPTEMP
 1987            CCS    MPAC            CHECK FOR POSITIVE ARGUMENT, SHIFTING
 1988            TCF    SMPAC+          FIRST SIGNIFICANT MPAC REGISTER INTO
 1989            TCF    +2              MPAC ITSELF.
 1990  2         TCF    SQRTNEG         SEE IF MAG OF ARGUMENT LESS THAN 10(-4).
 1991            XCH    MPAC +2         MPAC IS ZERO - SHIFT LEFT 14.
 1992            XCH    MPAC +1
 1993            TS     MPAC
 1994            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1995  2         TS     MPTEMP
 1996            CCS    MPAC            SEE IF MPAC NOW PNZ.
 1997            TCF    SMPAC+
 1998            TCF    +2
 1999  2         TCF    ZEROANS         NEGATIVE BUT LESS THAN 10(-4) IN MAG.
 2000            XCH    MPAC +1         ZERO - SHIFT LEFT 14 AGAIN.
 2001            TS     MPAC
 2002            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 2003  2         ADS    MPTEMP
 2004            CCS    MPAC
 2005            TCF    SMPAC+
 2006            TC     Q               SQRT(0) = 0.
 2007            TCF    ZEROANS
 2008  4         TC     Q
 2009   SQRTNEG  CCS    A               ARGUMENT IS NEGATIVE, BUT SEE IF SIGN-
 2010  2         TCF    SQRTABRT        CORRECTED ARGUMENT IS LESS THAN 10(-4)
 2011            CCS    MPAC +1         IN MAGNITUDE. IF SO, CALL ANSWER ZERO.
 2012   ZEROANS  CAF    ZERO            FORCE ANSWER TO ZERO HERE.
 2013            TCF    FIXROOT
 2014            TCF    SQRTABRT
 2015  2         TCF    FIXROOT
 2016   SQRTABRT TC     ABORT
 2017  8         OCT    1302
 2018   SMPAC+   AD     -1/2+2          SEE IF ARGUMENT GREATER THAN OR EQUAL TO
 2019            EXTEND                 .5.
 2020  2         BZMF   SRTEST          IF SO, SEE IF LESS THAN .25.
 2021            DXCH   MPAC            WE WILL TAKE THE SQUARE ROOT OF MPAC/2.
 2022            LXCH   SR              SHIFT RIGHT 1 AND GO TO THE SQRT ROUTINE
 2023            EXTEND
 2024            MP     HALF
 2025            DXCH   MPAC
 2026            XCH    SR
 2027  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 2028   ARGHI    CAF    SLOPEHI         ARGUMENT BETWEEN .25 AND .5. GET A
 2029            EXTEND                 LINEAR APPROXIMATION FOR THIS RANGE.
 2030            MP     MPAC
 2031  2         AD     BIASHI          X0/2 = (MPAC/2)(SLOPEHI) + BIASHI/2.
 2032    +4      TS     BUF             X0/2 (ARGLO ENTERS HERE).
 2033            CA     MPAC            SINGLE-PRECISION THROUGHOUT.
 2034            ZL
 2035            EXTEND
 2036            DV     BUF             (MPAC/2)/(X0/2)
 2037            EXTEND
 2038            MP     HALF
 2039  2         ADS    BUF             X1 = X0/2 + .5(MPAC/2)/(X0/2).
 2040            EXTEND
 2041            MP     HALF            FORM UP X1/2.
 2042            DXCH   MPAC            SAVE AND BRING OUT ARGUMENT.
 2043            EXTEND                 TAKE DP QUOTIENT WITH X1.
 2044            DV     BUF
 2045            TS     BUF +1          SAVE MAJOR PART OF QUOTIENT.
 2046            CAF    ZERO            FORM MINOR PART OF QUOTIENT USING
 2047            XCH    L               (REMAINDER,0).
 2048            EXTEND
 2049            DV     BUF
 2050            TS     L               IN PREPARATION FOR DAS.
 2051            CA     BUF +1
 2052  2         DAS    MPAC            X2 = X1/2 + (MPAC/2)X1
 2053            EXTEND                 OVERFLOWS IF ARG. NEAR POSMAX.
 2054            BZF    TCQBNK00
 2055            CAF    POSMAX
 2056   FIXROOT  TS     MPAC
 2057            TS     MPAC +1
 2058  8TCQBNK00 TC     Q               RETURN TO CALLER TO UNNORMALIZE, ETC.
 2059   SRTEST   AD     QUARTER         ARGUMENT WAS LESS THAN .5, SEE IF LESS
 2060            EXTEND                 THAN .25.
 2061  2         BZMF   SQRTNORM        IF SO, BEGIN NORMALIZATION.
 2062            DXCH   MPAC            IF BETWEEN .5 AND .25, SHIFT RIGHT 1 AND
 2063            LXCH   SR              START AT ARGLO.
 2064            EXTEND
 2065            MP     HALF
 2066            DXCH   MPAC
 2067            XCH    SR
 2068  2         ADS    MPAC +1         NO OVERFLOW.
 2069   ARGLO    CAF    SLOPELO         (NORMALIZED) ARGUMENT BETWEEN .125 AND
 2070            EXTEND                 .25
 2071            MP     MPAC
 2072            AD     BIASLO
 2073  2         TCF    ARGHI +4        BEGIN SQUARE ROOT.
 2074   SQRTNM2  EXTEND                 SHIFT LEFT 2 AND INCREMENT RIGHT SHIFT
 2075            DCA    MPAC +1         COUNT (FOR TERMINAL UNNORMALIZATION).
 2076            DAS    MPAC +1
 2077            AD     MPAC
 2078  2         ADS    MPAC            (NO OVERFLOW).
 2079   SQRTNORM INCR   MPTEMP          FIRST TIME THROUGH, JUST SHIFT LEFT 1
 2080            EXTEND                 (PUTS IN EFFECTIVE RIGHT SHIFT SINCE
 2081            DCA    MPAC +1         WE WANT MPAC/2).
 2082            DAS    MPAC +1
 2083            AD     MPAC
 2084            ADS    MPAC            (AGAIN NO OVERFLOW).
 2085            DOUBLE
 2086  2         TS     CYL
 2087   NORMTEST CCS    CYL             SEE IF ARGUMENT NOW NORMALIZED AT
 2088            CCS    CYL             GREATER THAN .125.
 2089            TCF    SQRTNM2         NO - SHIFT LEFT 2 MORE AND TRY AGAIN.
 2090            TCF    ARGHI           YES - NOW BETWEEN .5 AND .25.
 2091            TCF    ARGLO           ARGUMENT NOW BETWEEN .25 AND .125.
P2092  2TRIGONOMETRIC FUNCTION PACKAGE.
R2093  2         THE FOLLOWING TRIGONOMETRIC FUNCTIONS ARE AVAILABLE AS INTERPRE
 2094  9TIVE OPERATIONS:
R2095            1.  SIN                COMPUTES (1/2)SINE(2 PI MPAC).
R2096  2         2.  COS                COMPUTES (1/2)COSINE(2 PI MPAC).
R2097            3.  ASIN               COMPUTES (1/2PI)ARCSINE(2 MPAC).
R2098  2         4.  ACOS               COMPUTES (1/2PI)ARCCOSINE(2 MPAC).
R2099  4SIN-ASIN AND COS-ACOS ARE MUTUALLY INVERSE, IE SIN(ASIN(X)) = X.
 2100   COSINE   TC     BRANCH          FINDS COSINE USING THE IDENTITY
 2101            TCF    +3              COS(X) = SIN(PI/2 - ABS(X)).
 2102            TCF    PRESINE
 2103  2         TCF    PRESINE
 2104    +3      EXTEND
 2105            DCS    MPAC
 2106  2         DXCH   MPAC
 2107   PRESINE  CAF    QUARTER         PI/2 SCALED.
 2108  4         ADS    MPAC
 2109   SINE     DXCH   MPAC            DOUBLE ARGUMENT.
 2110            DDOUBL
 2111            OVSK                   SEE IF OVERFLOW PRESENT.
 2112  2         TCF    +3              IF NOT, ARGUMENT OK AS IS.
 2113            EXTEND                 IF SO, WE LOST (OR GAINED) PI, SO
 2114            DCOM                   COMPLEMENT MPAC USING THE IDENTITY
A2115                                   SIN(X-(+)PI) = SIN(-X).
 2116    +3      DXCH   MPAC
 2117            CA     MPAC            SEE IF ARGUMENT GREATER THAN .5 IN
 2118            DOUBLE                 MAGNITUDE. IF SO, REDUCE IT TO LESS THAN
 2119            TS     L               .5 (+-PI/2 SCALED) AS FOLLOWS:
 2120  2         TCF    SN1
 2121            INDEX  A               IF POSITIVE, FORM PI - X, IF NEGATIVE
 2122            CAF    NEG1/2 +1       USE -PI - X.
 2123            DOUBLE
 2124            EXTEND
 2125            SU     MPAC            GUARANTEED NO OVERFLOW.
 2126            TS     MPAC
 2127            CS     MPAC +1
 2128  8         TS     MPAC +1
 2129   SN1      EXTEND                 SET UP TO EVALUATE HASTINGS POLYNOMIAL
 2130            DCA    MPAC
 2131            DXCH   BUF2
 2132  2         TC     DSQSUB          SQUARE MPAC.
 2133            TC     POLY            EVALUATE FOURTH ORDER POLYNOMIAL.
 2134            DEC    3
 2135            2DEC   +.3926990796
 2136            2DEC   -.6459637111
 2137            2DEC   +.318758717
 2138            2DEC   -.074780249
 2139            2DEC   +.009694988
 2140            CAF    LBUF2           MULTIPLY BY ARGUMENT AND SHIFT LEFT 2.
 2141  2         TC     DMPSUB -1
 2142            EXTEND
 2143            DCA    MPAC +1
 2144            DAS    MPAC +1
 2145            AD     MPAC
 2146            ADS    MPAC            NEITHER SHIFT OVERFLOWS.
 2147            EXTEND
 2148            DCA    MPAC +1
 2149            DAS    MPAC +1
 2150            AD     MPAC
 2151            ADS    MPAC
 2152            TCF    DANZIG
P2153  2         ARCSIN/ARCCOS ROUTINE.
 2154   ARCSIN   CAF    LASINEX         COMPUTE ARCSIN BY USING THE IDENTITY
 2155  2         TCF    +2              ARCSIN(X) = PI/2 - ARCCOS(X).
 2156   ARCCOS   CAF    LDANZIG         (EXITS IMMEDIATELY).
 2157            TS     ESCAPE
 2158            TC     BRANCH          TEST SIGN OF INPUT.
 2159            TCF    ACOSST          START IMMEDIATELY IF POSITIVE.
 2160            TCF    ACOSZERO        ARCCOS(0) = PI/2 = .25.
 2161            EXTEND                 IF NEGATIVE, USE THE IDENTITY
 2162            DCS    MPAC            ARCCOS(X) = PI - ARCCOS(-X), FORCING
 2163            DXCH   MPAC            ARGUMENT POSITIVE.
 2164            CAF    TCSUBTR         SET EXIT  TO DO ABOVE BEFORE
 2165            XCH    ESCAPE          ARCSIN/ARCCOS CONSIDERATIONS.
 2166  2         TS     ESCAPE2
 2167   ACOSST   CS     HALF            TEST MAGNITUDE OF INPUT.
 2168            AD     MPAC
 2169            CCS    A
 2170  2         TCF    ACOSOVF         THIS IS PROBABLY AN OVERFLOW CASE.
 2171  2LASINEX  TCF    ASINEX
 2172  2         TCF    ACOSST2         NO OVERFLOW - PROCEED.
 2173            CCS    MPAC +1         IF MAJOR PART IS .5, CALL ANSWER 0
 2174            CAF    ZERO            UNLESS MINOR PART NEGATIVE.
 2175  2         TCF    ACOS=0
 2176  2         TCF    ACOSST2
 2177   ACOS=0   TS     MPAC +1
 2178            TS     MPAC
 2179  2         TC     ESCAPE
 2180   ACOSST2  EXTEND                 NOW THAT ARGUMENT IS IN PROPER RANGE,
 2181            DCS    MPAC            BEGIN COMPUTATION. USE HASTINGS
 2182            AD     HALF            APPROXIMATION ARCCOS(X) = SQRT(1-X)P(X)
 2183            DXCH   MPAC            IN A SCALED VERSION WHERE P(X) IS A
 2184  2         DXCH   BUF2            SEVENTH ORDER POLYNOMIAL.
 2185  2         TC     SQRTSUB         RETURNS WITH NORMALIZED SQUARE ROOT.
 2186            CCS    MPTEMP          SEE IF UN-NORMALIZATION REQUIRED.
 2187  8         TCF    ACOSSHR         IF SO.
 2188   ACOS3    DXCH   MPAC            SET UP FOR POLYNOMIAL EVALUATION.
 2189            DXCH   BUF2
 2190  2         DXCH   MPAC
 2191            TC     POLY
 2192            DEC    6
 2193            2DEC   +.353553385     COEFFICIENTS ARE C 2(+I)/PISQRT(2) WHERE
 2194            2DEC*  -.0483017006 B+1*                 I
 2195            2DEC*  +.0200273085 B+2*    WHERE C STANDS FOR ORIGINAL COEFFS.
 2196            2DEC*  -.0112931863 B+3*
 2197            2DEC*  +.00695311612 B+4*
 2198            2DEC*  -.00384617957 B+5*
 2199            2DEC*  +.001501297736 B+6*
 2200            2DEC*  -.000284160334 B+7*
 2201            CAF    LBUF2           DO FINAL MULTIPLY AND GO TO ANY
 2202            TC     DMPSUB -1       EPILOGUE SEQUENCES.
 2203  2         TC     ESCAPE
 2204   SUBTR    EXTEND                 EPILOGUE FOR NEGATIVE INPUTS TO ARCCOS.
 2205            DCS    MPAC
 2206            AD     HALF            FORMS PI - ARCCOS(-X) = ARCCOS(X).
 2207            DXCH   MPAC
 2208  2         TC     ESCAPE2         GO TO POSSIBLE ARCSIN EPILOGUE.
 2209   ASINEX   EXTEND
 2210            DCS    MPAC            ARCSIN EPILOGUE - GET ARCSIN(X)
 2211            AD     QUARTER         = PI/2 - ARCCOS(X).
 2212            DXCH   MPAC
 2213  8LDANZIG  TCF    DANZIG
 2214   ACOSSHR  INDEX  A               THE SHIFT RIGHT IS LESS THAN 14 SINCE
 2215            CAF    BIT14           THE INPUT WAS NON-ZERO DP.
 2216            TS     MPTEMP
 2217            TC     VSHRRND         DP SHIFT RIGHT AND ROUND.
 2218  2         TCF    ACOS3           PROCEED.
 2219   ACOSOVF  CCS    A               IF MAJOR PART WAS ONLY 1 MORE THAN .5,
 2220            TCF    +2              CALL ANSWER 0.
 2221            TCF    ACOS=0
 2222  2         TCF    ACOS=0
 2223   ACOSABRT TC     ABORT
 2224  2         OCT    1301
 2225   ACOSZERO CAF    QUARTER         ACOS(0) = PI/2.
 2226            TCF    ACOS=0 +1       SET MPAC AND EXIT VIA ESCAPE.
 2227   ENDINTS0 EQUALS
P2228  2         THE FOLLOWING INSTRUCTIONS ARE AVAILABLE FOR SETTING, MODIFYING
 2229  9, AND BRANCHING ON INDEX REGISTERS:
R2230            1.  AXT                ADDRESS TO INDEX TRUE.
R2231            1.  AXC                ADDRESS TO INDEX COMPLEMENTED.
R2232            3.  LXA                LOAD INDEX FROM ERASABLE.
R2233            4.  LXC                LOAD INDEX COMPLEMENTED FROM ERASABLE.
R2234            5.  SXA                STORE INDEX IN ERASABLE.
R2235  2         6.  XCHX               EXCHANGE INDEX REIGSTER WITH ERASABLE.
R2236            7.  INCR               INCREMENT INDEX REGISTER.
R2237            8.  XAD                ERASABLE ADD TO INDEX REGISTER.
R2238  2         9.  XSU                ERASABLE SUBTRACT FROM INDEX REGISTER.
R2239  4        10.  TIX                BRANCH ON INDEX REGISTER AND DECREMENT.
 2240  2         SETLOC 12000           SUFFIX CLASS 01 IS IN BANK 1.
 2241   AXT      TC     TAGSUB          SELECT APPROPRIATE INDEX REGISTER.
 2242            CA     POLISH
 2243   XSTORE   INDEX  INDEXLOC        CONTAINS C(FIXLOC) OR C(FIXLOC)+1.
 2244            TS     X1
 2245  2         TCF    DANZIG
 2246   AXC      TC     TAGSUB
 2247            CS     POLISH
 2248  2         TC     XSTORE
 2249   LXA      TC     TAGSUB          LOAD INDEX FROM ERASABLE.
 2250            INDEX  ADDRWD
 2251            CA     0
 2252  2         TCF    XSTORE
 2253   LXC      TC     TAGSUB          LOAD INDEX FROM ERASABLE COMPLEMENTED.
 2254            INDEX  ADDRWD
 2255            CS     0
 2256  2         TCF    XSTORE
 2257   SXA      TC     TAGSUB          STORE INDEX IN ERASABLE.
 2258            INDEX  INDEXLOC
 2259            CA     X1
 2260  2         TCF    STORE1          (STORE SINGLE PRECISION BEFORE EXIT).
 2261   XCHX     TC     TAGSUB          EXCHANGE INDEX REGISTER WITH ERASABLE.
 2262            INDEX  ADDRWD
 2263            CA     0
 2264            INDEX  INDEXLOC
 2265            XCH    X1
 2266  2         TCF    STORE1
 2267   XAD      TC     TAGSUB          ERASABLE ADD TO INDEX.
 2268            INDEX  ADDRWD
 2269            CA     0
 2270   XAD2     INDEX  INDEXLOC
 2271            ADS    X1              IGNORING OVERFLOWS.
 2272  2         TCF    DANZIG
 2273   INCR     TC     TAGSUB          INCREMENT INDEX REGISTER.
 2274            CA     POLISH
 2275  2         TCF    XAD2
 2276   XSU      TC     TAGSUB          ERASABLE SUBTRACT FROM INDEX.
 2277            INDEX  ADDRWD
 2278            CS     0
 2279  4         TCF    XAD2
 2280   TIX      TC     TAGSUB          BRANCH AND DECREMENT ON INDEX.
 2281            INDEX  INDEXLOC
 2282            CS     S1
 2283            INDEX  INDEXLOC
 2284            AD     X1
 2285            EXTEND                 NO OPERATION IF DECREMENTED INDEX IS
 2286  2         BZMF   DANZIG          NEGATIVE OR ZERO.
 2287   DOTIXBR  INDEX  INDEXLOC
 2288  2         XCH    X1              IGNORING OVERFLOWS.
 2289  4         TCF    GOTO            DO THE BRANCH USING THE CADR IN POLISH.
R2290  2         SUBROUTINE WHICH SETS THE ADDRESS OF THE SPECIFIED INDEX IN IND
 2291  9EXLOC. (ACTUALLY, THE ADDRESS -38D.)
 2292   TAGSUB   CA     FIXLOC
 2293  2         TS     INDEXLOC
 2294            CCS    CYR             BIT 15 SPECIFIES INDEX.
 2295            INCR   INDEXLOC        0 MEANS USE X2.
 2296            TC     Q
 2297            TC     Q               1 FOR X1.
P2298  2         MISCELLANEOUS OPERATION CODES WITH DIRECT ADDRESSES. INCLUDED H
 2299  9ERE ARE:
R2300            1.  ITA                STORE QPRET (RETURN ADDRESS) IN ERASABLE
 2301  9.
R2302            2.  CALL               CALL A SUBROUTINE, LEAVING RETURN IN QPR
 2303  9ET.
R2304            3.  RTB                RETURN TO BASIC LANGUAGE AT THE GIVEN AD
 2305  9DRESS.
R2306            4.  BHIZ               BRANCH IF THE HIGH ORDER OF MPAC IS ZERO
 2307  9 (SINGLE PRECISION).
R2308            5.  BOV                BRANCH ON OVERFLOW.
R2309  2         6.  GOTO               SIMPLE SEQUENCE CHANGE.
 2310   RTB/BHIZ CCS    CYR
 2311   RTB      CA     POLISH
 2312  2         TCF    BANKJUMP        CALL BASIC ROUTINE.
 2313   BHIZ     CCS    MPAC
 2314            TCF    DANZIG
 2315            TCF    GOTO
 2316            TCF    DANZIG
 2317  2         TCF    GOTO
 2318   BOV(B)   CCS    OVFIND          BRANCH ON OVERFLOW TO BASIC OR INTERP.
 2319            TCF    +2
 2320            TCF    DANZIG
 2321            TS     OVFIND
 2322            CCS    CYR
 2323            TCF    RTB             IF BASIC.
 2324   B5TOB8   OCT    360
 2325  8         TCF    GOTO
 2326   BZE/GOTO CCS    CYR             SEE WHICH OP-CODE IS DESIRED.
 2327            TC     BRANCH          DO BZE.
 2328            TCF    DANZIG
 2329            TCF    GOTO            DO GOTO.
 2330  2         TCF    DANZIG
 2331   BPL/BMN  CCS    CYR
 2332            TCF    BPL
 2333  25B10     DEC    5 B+10          SHIFTS OP CODE IN SWITCH INSTRUCTION ADR
 2334            TC     BRANCH          DO BMN.
 2335            TCF    DANZIG
 2336            TCF    DANZIG
 2337  2         TCF    GOTO            ONLY IF NNZ.
 2338   BPL      TC     BRANCH
 2339            TCF    GOTO            IF POSITIVE OR ZERO.
 2340            TCF    GOTO
 2341  2         TCF    DANZIG
 2342   CALL/ITA CCS    CYR
 2343  2         TCF    CALL
 2344            TC     CCSHOLE
 2345            INDEX  FIXLOC          STORE QPRET.
 2346            CA     QPRET
 2347            TCF    STORE1
P2348  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR ALTERING AND TESTING
 2349  9 INTERPRETIVE SWITCHES:
R2350   00       BONSET                 SET A SWITCH AND DO A GOTO IF IT WAS ON.
R2351   01       SETGO                  SET A SWITCH AND DO A GOTO.
R2352   02       BOFSET                 SET A SWITCH AND DO A GOTO IF IT WAS OFF
R2353  203       SET                    SET A SWITCH.
R2354   04       BONINV                 INVERT A SWITCH AND BRANCH IF IT WAS ON.
R2355   05       INVGO                  INVERT A SWITCH AND DO A GOTO.
R2356   06       BOFINV                 INVERT A SWITCH AND BRANCH IF IT WAS OFF
R2357  207       INVERT                 INVERT A SWITCH.
R2358   10       BONCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS ON.
R2359   11       CLRGO                  CLEAR A SWITCH AND DO A GOTO.
R2360   12       BOFCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS OFF.
R2361  213       CLEAR                  CLEAR A SWITCH.
R2362   14       BON                    BRANCH IF A SWITCH WAS ON.
R2363  416       BOFF                   BRANCH IF A SWITCH WAS OFF.
R2364  2         THE ADDRESS SUPPLIED WITH THE SWITCH INSTRUCTION IS INTERPRETED
 2365  9 AS FOLLOWS:
R2366            BITS 1-4    SWITCH BIT NUMBER (1-15).
R2367            BITS 5-8    SWITCH OPERATION NUMBER.
R2368  2         BITS 9-     SWITCH WORD NUMBER (UP TO 64 SWITCH WORDS).
R2369            THE ADDRESS ITSELF IS MADE UP BY THE YUL SYSTEM ASSEMBLER. THE
 2370  9BRANCH INSTRUCTIONS REQUIRE TWO
R2371  4ADDRESSES, THE SECOND TAKEN AS THE DIRECT (OR INDIRECT IF IN ERASABLE) A
 2372  9DDRESS OF THE BRANCH.
 2373   SWITCHES CAF    LOW4            LEAVE THE SWITCH BIT IN  SWBIT  .
 2374            MASK   POLISH
 2375            INDEX  A
 2376            CAF    BIT15           (NUMBER FROM LEFT TO RIGHT.)
 2377  2         TS     SWBIT
 2378            CAF    BIT7            LEAVE THE SWITCH NUMBER IN SWWORD.
 2379            EXTEND
 2380            MP     POLISH
 2381  2         TS     SWWORD
 2382            INHINT                 DURING SWITCH CHANGE SO RUPT CAN USE TOO
 2383            INDEX  A               LEAVE THE SWITCH WORD ITSELF IN L.
 2384            CA     STATE
 2385  8         TS     Q               Q WILL BE USED AS A CHANNEL.
 2386            CAF    BIT11
 2387            EXTEND                 DISPATCH SWITCH BIT OPERATION AS IN BITS
 2388            MP     POLISH          7-8 OF POLISH.
 2389            MASK   B3TOB4          GETS 4X2-BIT CODE.
 2390            INDEX  A
 2391  2         TCF    +1
 2392    +1      CA     SWBIT           00 - SET SWITCH IN QUESTION.
 2393            EXTEND
 2394            ROR    Q
 2395  2         TCF    SWSTORE
 2396    +5      CA     SWBIT           01 - INVERT SWITCH.
 2397            EXTEND
 2398            RXOR   Q
 2399  2         TCF    SWSTORE
 2400    +9D     CS     SWBIT           10 - CLEAR.
 2401            MASK   Q
 2402   SWSTORE  INDEX  SWWORD
 2403  8         TS     STATE           NEW SWITCH WORD.
 2404    +13D    RELINT                 11 - NOOP.
 2405            CAF    BIT13
 2406            EXTEND                 DISPATCH SEQUCE CHANGING OR BRANCHING
 2407            MP     POLISH          CODE.
 2408            MASK   B3TOB4
 2409            INDEX  A
 2410  2         TCF    +1              ORIGINALLY STORED IN BITS 5-6.
 2411    +1      CS     Q               00 - BRANCH IF ON.
 2412   TEST     MASK   SWBIT
 2413            CCS    A
 2414  2         TCF    SWSKIP
 2415  2 +5      TCF    SWBRANCH        01 - GO TO.
 2416  2         TCF    SWSKIP          HERE ONLY ON BIT 15.
 2417            TC     CCSHOLE
 2418  2         TC     CCSHOLE
 2419    +9D     CA     Q               10 - BRANCH IF OFF.
 2420  2         TCF    TEST
 2421  2B3TOB4   OCT    14
 2422  2SWSKIP   INCR   LOC
 2423  2SW/      EQUALS SWITCHES
 2424  2 +13D    TCF    DANZIG          11 - NOOP.
 2425   ENDINTS1 EQUALS
L      2SINGLE PRECISION SUBROUTINES
 0001  2         SETLOC ENDIBNKF
R0002  2SINGLE PRECISION SINE AND COSINE
 0003   SPCOS    AD     HALF            ARGUMENTS SCALED AT PI
 0004   SPSIN    TS     TEMK
 0005            TCF    SPT
 0006            CS     TEMK
 0007   SPT      DOUBLE
 0008            TS     TEMK
 0009            TCF    POLLEY
 0010            XCH    TEMK
 0011            INDEX  TEMK
 0012            AD     LIMITS
 0013            COM
 0014            AD     TEMK
 0015            TS     TEMK
 0016            TCF    POLLEY
 0017            TCF    ARG90
 0018   POLLEY   EXTEND
 0019            MP     TEMK
 0020            TS     SQ
 0021            EXTEND
 0022            MP     C5/2
 0023            AD     C3/2
 0024            EXTEND
 0025            MP     SQ
 0026            AD     C1/2
 0027            EXTEND
 0028            MP     TEMK
 0029            DDOUBL
 0030            TS     TEMK
 0031            TC     Q
 0032   ARG90    INDEX  A
 0033            CS     LIMITS
 0034            TC     Q               RESULT SCALED AT 1
 0035   C1/2     DEC    .7853134
 0036   C3/2     DEC    -.3216146
 0037  8C5/2     DEC    .0363551
R0038   ENTER WITH ARGUMENT IN A, EXIT WITH ROOT IN A.  IF GIVEN A NEGATIVE ARGU
 0039  9MENT, THE RETURN SKIPS WITH CCS RESULT.
R0040   MINUS ZERO RETURNS LIKE PLUS ZERO.
R0041   MAXIMUM ERROR IN ANSWER IS NO GREATER THAN 2 BITS.
R0042  4INTERRUPT PROGRAMS USING SPROOT MUST SAVE AND RESTORE SR.
 0043   SPROOT   TS     SQRARG          ENTER WITH C(A) = Y
 0044            CCS    A
 0045            TCF    POSARG          IF PNZ, CONTINUE
 0046            TC     Q               RETURN WITH 0 FOR +0
 0047            INCR   Q
 0048  2         TC     Q               RETURN WITH 0 FOR -0
 0049   POSARG   EXTEND
 0050            QXCH   ROOTRET         WILL BE CALLING SPROOT1
 0051            AD     63/64+1         B(A) = Y - 1
 0052            OVSK
 0053            TCF    SPROOT2
 0054  2         XCH    SQRARG          ARG JUGGLING
 0055   SPROOT3  TS     SQRARG
 0056            TS     SR              C(A) = Y
 0057            XCH    SR              (LOSE 1 BIT)
 0058            TS     HALFY           HALFY = Y/2
 0059            AD     -1/8            FORM Y/2 - 1/8
 0060            CCS    A               TEST FOR FIRST GUESS
 0061            AD     5/8+1           Y .G. 1/4, X = Y/2 + 1/2
 0062            TC     HIGUESS         +0 IMPOSSIBLE FROM ADDITION
 0063            NOOP                   Y .LE. 1/4, X/2 = Y + 1/16
 0064            CAF    BIT11           1/16
 0065            AD     SQRARG          SQRARG = Y
 0066            DOUBLE                 X FROM X/2
 0067   HIGUESS  TC     SPROOT1
 0068            TC     SPROOT1         ITERATE TWICE
 0069            XCH    ROOTRET         SAVE ANSWER AND GET Q
 0070            CCS    A
 0071            XCH    ROOTRET         NO SHIFT NEEDED
 0072            TC     ROOTBCK
 0073            XCH    ROOTRET         Q NEG, SHIFT RIGHT THREE
 0074            EXTEND
 0075            MP     BIT12           EXP -3
 0076   ROOTBCK  INDEX  ROOTRET         ROOTRET = Q - 1
 0077  2         TC     1               RETURN, C(A) = SQRT(Y)
 0078   SPROOT1  XCH    SR              SR = X/2
 0079            CS     HALFY           NEWTON ITER  X = X/2 + (Y/2 / X/2) / 2
 0080            ZL
 0081            EXTEND
 0082            DV     SR              C(SR) = X/2 DV DOES NOT EDIT
 0083            XCH    SR
 0084            EXTEND
 0085            SU     SR
 0086  2         TC     Q               C(A) = X (NEXT)
 0087   SPROOT2  CS     ROOTRET         SET RETURN Q NEG, AS FLAG
 0088            TS     ROOTRET
 0089            CAF    BIT7            SHIFT FOR SIGNIFCANCE
 0090            EXTEND
 0091            MP     SQRARG
 0092            CA     L               B(A) = 0
 0093  2         TC     SPROOT3
 0094   -1/8     OCTAL  73777
 0095   5/8+1    OCTAL  24001
 0096  463/64+1  OCTAL  37401
 0097   ENDSUBSF EQUALS
*       ENDOFJOB
